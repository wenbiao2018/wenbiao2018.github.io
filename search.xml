<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 3, Day 20, 3/29/2019]]></title>
    <url>%2F2019%2F03%2F29%2FDay-20%2F</url>
    <content type="text"><![CDATA[&#x770B;&#x4E86;&#x4E00;&#x767D;&#x5929;&#x300A;&#x5927;&#x8BDD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x300B;&#x4E66;&#x5199;&#x7684;&#x771F;&#x597D;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x662F;&#x4E00;&#x5929;&#x4E24;&#x5929;&#x80FD;&#x770B;&#x5B8C;&#x7684;&#x3002;&#x6211;&#x592A;&#x5FC3;&#x6025;&#x4E86;&#xFF0C;&#x51C6;&#x5907;&#x8C03;&#x6574;&#x6218;&#x7565;&#xFF0C;&#x8FD8;&#x662F;&#x8981;&#x7EE7;&#x7EED;&#x5237;&#x9898;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x5929;&#x770B;&#x70B9;&#x8FD9;&#x4E2A;&#x4E66;&#x3002;&#x603B;&#x5171;&#x4E5D;&#x7AE0;&#xFF0C;&#x524D;&#x4E24;&#x7AE0;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x4E00;&#x5929;&#x770B;&#x5B8C;&#x3002;&#x5176;&#x4F59;&#x7684;&#x4E89;&#x53D6;&#x6BCF;&#x5929;&#x4E00;&#x7AE0;&#x6216;&#x8005;&#x4E24;&#x5929;&#x4E00;&#x7AE0;&#x3002; &#x4ECA;&#x5929;&#x505A;&#x70B9;&#x65E7;&#x9898;&#xFF0C;&#x590D;&#x4E60;&#x590D;&#x4E60;&#xFF0C;&#x7136;&#x540E;&#x597D;&#x597D;&#x4F11;&#x606F;&#x4F11;&#x606F;&#x3002;&#x7CBE;&#x795E;&#x4E0D;&#x597D;&#x662F;&#x4E0D;&#x80FD;&#x597D;&#x597D;&#x5B66;&#x4E60;&#x7684;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 3, Day 19, 3/28/2019]]></title>
    <url>%2F2019%2F03%2F29%2FDay-19%2F</url>
    <content type="text"><![CDATA[&#x60F3;&#x7CFB;&#x7EDF;&#x5B66;&#x4E60;&#x4E00;&#x4E0B;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x770B;&#x4E86;Head First Java&#xFF0C;&#x5E2E;&#x52A9;&#x4E0D;&#x5927;&#x3002;&#x627E;&#x5230;&#x4E00;&#x672C;&#x597D;&#x4E66;&#xFF0C;&#x300A;&#x5927;&#x8BDD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x300B;&#xFF0C;&#x665A;&#x4E0A;&#x770B;&#x7740;&#x770B;&#x7740;&#x7761;&#x7740;&#x4E86;&#x3002;&#x6700;&#x8FD1;&#x5F88;&#x4E4F;&#xFF0C;&#x8001;&#x4E86;&#x8001;&#x4E86;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 3, Day 18, 3/27/2019]]></title>
    <url>%2F2019%2F03%2F27%2FDay-18%2F</url>
    <content type="text"><![CDATA[LeetCode &#x590D;&#x4E60; 356. Linde Reflection 123456789101112131415161718192021222324252627282930313233343536373839404142434445class Solution { public boolean isReflected(int[][] points) { if(points.length == 0){ return true; } Map&lt;Integer, Set&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;(); for(int[] point : points){ int y = point[1]; int x = point[0]; if(map.containsKey(y)){ map.get(y).add(x); }else{ Set&lt;Integer&gt; set = new HashSet&lt;&gt;(); set.add(x); map.put(y, set); } } Set&lt;Integer&gt; set0 = map.get(points[0][1]); int max = Integer.MIN_VALUE; int min = Integer.MAX_VALUE; for(int i : set0){ max = Math.max(max, i); min = Math.min(min, i); } double mid = (min + max)/2.0; //System.out.println(&quot;mid: &quot;+ mid); for(Map.Entry&lt;Integer, Set&lt;Integer&gt;&gt; entry : map.entrySet()){ Set&lt;Integer&gt; set = entry.getValue(); for(int i:set){ //System.out.println(&quot;i: &quot; + i); int reflected = (int)(2*mid - i); if(!set.contains(reflected)){ return false; } } } return true; }} 781. Rabbits in Forest 123456789101112131415161718192021222324252627282930313233343536class Solution { public int numRabbits(int[] a) { if(a.length == 0){ return 0; } Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); for(int i : a){ int num = i+1; if(map.containsKey(num)){ map.put(num, map.get(num)+1);// &#x4E0D;&#x80FD;&#x76F4;&#x63A5;map.get(num)++ }else{ map.put(num, 1); } } int result = 0; for(Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()){ int num = entry.getKey(); int cnt = entry.getValue(); if(cnt &lt;= num){ result += num; }else{ if(cnt%num == 0){ result += cnt; }else{ result += num*(cnt/num + 1); } } } return result; }} 554. Brick Wall &#x597D;&#x597D;&#x7406;&#x89E3;iterator 123456789101112131415161718192021222324252627282930313233343536class Solution { public int leastBricks(List&lt;List&lt;Integer&gt;&gt; wall) { if(wall.size() == 0){ return 0; } Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); for(List&lt;Integer&gt; bricks : wall){ Iterator&lt;Integer&gt; itr = bricks.iterator(); int len = 0; while(itr.hasNext()){ len += itr.next(); if(!itr.hasNext()){ break; } if(map.containsKey(len)){ map.put(len, map.get(len)+1); }else{ map.put(len, 1); } } } int height = wall.size(); int min = height; for(Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()){ //System.out.println(&quot;key: &quot;+entry.getKey()); //System.out.println(&quot;value: &quot;+entry.getValue()); min = Math.min(min, height - entry.getValue()); } return min; }} &#x770B;&#x4E86;&#x65B0;&#x9898;&#xFF0C;692&#xFF0C;&#x53D1;&#x73B0;&#x73B0;&#x5728;&#x5BF9;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x77E5;&#x8BC6;&#x7684;&#x7F3A;&#x4E4F;&#x5DF2;&#x7ECF;&#x660E;&#x663E;&#x59A8;&#x788D;&#x6211;&#x7406;&#x89E3;&#x8001;&#x5E08;&#x7684;&#x7B54;&#x6848;&#x4E86;&#x3002;&#x4ECA;&#x665A;&#x4E0D;&#x505A;&#x65B0;&#x9898;&#x4E86;&#xFF0C;&#x6293;&#x7D27;&#x628A;head first java&#x8FC7;&#x4E00;&#x904D; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>356</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 3, Day 17, 3/26/2019]]></title>
    <url>%2F2019%2F03%2F26%2FDay-17%2F</url>
    <content type="text"><![CDATA[&#x72B6;&#x6001;&#x5F88;&#x5DEE;&#x8BF6;&#xFF0C;&#x590D;&#x4E60;&#x4E00;&#x9053;Medium&#x9898;&#x7ADF;&#x7136;&#x7528;&#x4E86;&#x4E00;&#x4E2A;&#x5C0F;&#x65F6;&#xFF0C;&#x903B;&#x8F91;&#x8FD8;&#x6A21;&#x68F1;&#x4E24;&#x53EF;&#x7684;&#x3002; LeetCode - 23 (0 Easy, 0 Medium, 2 Hard) &#x590D;&#x4E60; - 636 &#x542D;&#x54E7;&#x505A;&#x4E86;&#x597D;&#x4E45; 1234567891011121314151617181920212223242526272829303132333435363738class Solution { public int[] exclusiveTime(int n, List&lt;String&gt; logs) { Node[] node = new Node[n]; Stack&lt;Node&gt; stack = new Stack&lt;&gt;(); int[] result = new int[n]; stack.push(new Node(99)); for(String log : logs){ String[] content = log.split(&quot;:&quot;); int id = Integer.valueOf(content[0]); int time = Integer.valueOf(content[2]); if(content[1].equals(&quot;start&quot;)){ node[id] = new Node(time); stack.push(node[id]); }else{ Node cur = stack.pop(); int timeUsed = time - cur._start + 1 - cur._consumedByOthers; stack.peek()._consumedByOthers += time - cur._start + 1; result[id] += timeUsed; } } return result; } private class Node{ int _start; int _consumedByOthers; public Node(int start){ _start = start; _consumedByOthers = 0; } }} 71 testcase 123456&quot;/home/&quot;&quot;/../&quot;&quot;/home//foo/&quot;&quot;/a/./b/../../c/&quot;&quot;/a/../../b/../c//.//&quot;&quot;/a//b////c/d//././/..&quot; code 12345678910111213141516171819202122232425262728293031323334353637383940414243class Solution { public String simplifyPath(String path) { int start = 1; Stack&lt;String&gt; stack = new Stack&lt;&gt;(); for(int i = 1; i &lt; path.length(); i++){ char cur = path.charAt(i); if(cur == &apos;/&apos; || i == path.length()-1){ String str = path.substring(start, i); if(i == path.length()-1 &amp;&amp; cur != &apos;/&apos;){ str = path.substring(start, i+1); //System.out.println(str); } if(str.equals(&quot;..&quot;) &amp;&amp; !stack.isEmpty()){ stack.pop(); }else if(!str.equals(&quot;.&quot;) &amp;&amp; !str.equals(&quot;..&quot;) &amp;&amp; !str.equals(&quot;&quot;)&amp;&amp;!str.equals(&quot;/&quot;)){ //System.out.println(&quot;start: &quot; + start); //System.out.println(&quot;i: &quot; + i); //System.out.println(str); stack.push(str); } start = i+1; } } if(start != path.length()){ String str = path.substring(start, path.length()); } StringBuilder sb = new StringBuilder(); if(!stack.isEmpty()){ for(String str: stack){ //System.out.println(str); sb.append(&quot;/&quot; + str); } }else{ return &quot;/&quot;; } return sb.toString(); }} 735. Asteroid Collision &#x5C1D;&#x8BD5;&#x5199;&#x5B8C;&#x4E4B;&#x540E;&#x8FC7;&#x6BCF;&#x4E00;&#x4E2A;testcase&#xFF0C;&#x5148;&#x67E5;&#x6F0F;&#x8865;&#x7F3A; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546class Solution { public int[] asteroidCollision(int[] a) { Stack&lt;Integer&gt; stack = new Stack&lt;&gt;(); if(a.length == 0){ return new int[0]; } for(int i = 0; i &lt; a.length; i++){ int cur = a[i]; if(stack.isEmpty()){ stack.push(cur); continue; } if(cur &gt; 0){ stack.push(a[i]); }else{ // a[i] &lt; 0 while(!stack.isEmpty() &amp;&amp; stack.peek() + cur &lt; 0 &amp;&amp; stack.peek() &gt; 0){ stack.pop(); } if(!stack.isEmpty() &amp;&amp; stack.peek() &lt; 0){ stack.push(cur); } if(stack.isEmpty()){ stack.push(cur); continue; } if(!stack.isEmpty() &amp;&amp; stack.peek() + cur == 0 ){ stack.pop(); } } } if(stack.isEmpty()){ return new int[0]; } int[] result = new int[stack.size()]; int i = 0; for(int num : stack){ result[i] = num; i++; } return result; }} &#x65B0;&#x9898; 23. Merge k Sorted Lists - Hard &#x94FE;&#x8868;&#x554A;&#x94FE;&#x8868; 12345678910111213141516171819202122232425262728293031323334353637/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */class Solution { public ListNode mergeKLists(ListNode[] lists) { PriorityQueue&lt;ListNode&gt; heep = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o1.val, o2.val)); ListNode fake = new ListNode(99); ListNode cur = fake; for(ListNode ln : lists){ if(ln != null){ heep.add(ln); } } while(!heep.isEmpty()){ ListNode node = heep.poll(); cur.next = node; cur = node; if(cur.next != null){ heep.add(cur.next); } } return fake.next; }} 358. Rearrange String k Distance Apart - Hard &#x505A;&#x4E0D;&#x52A8;&#x5566;&#x505A;&#x4E0D;&#x52A8;&#x5566; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556class Solution { public String rearrangeString(String s, int k) { if(k&lt;=0){ return s; } int[] freq = new int[26]; // &#x7B97;frequency for(int i = 0; i &lt; s.length(); i++){ freq[s.charAt(i) - &apos;a&apos;]++; } // &#x628A;&#x51FA;&#x73B0;&#x6B21;&#x6570;&#x591A;&#x7684;&#x653E;heap&#x5934;&#xFF0C;&#x5148;&#x6446;&#x51FA;&#x6765; PriorityQueue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(freq[o1], freq[o2]) != 0 ? Integer.compare(freq[o2], freq[o1]) : Integer.compare(o1, o2)); // &#x5148;&#x52A0;&#x4E00;&#x904D;&#x5B57;&#x6BCD; for(int i = 0; i &lt; 26; i++){ //System.out.println(i); if(freq[i] &gt; 0){ heap.add(i); //System.out.println(i); } } StringBuilder sb = new StringBuilder(); while(!heap.isEmpty()){ List&lt;Integer&gt; index = new ArrayList&lt;&gt;(); try{ for(int i=0; i &lt; k; i++){//&#x56E0;&#x4E3A;heap&#x91CC;&#x6BCF;&#x4E2A;&#x5B57;&#x6BCD;&#x53EA;&#x6709;&#x4E00;&#x904D;&#xFF0C;&#x5148;&#x52A0;&#x524D;k&#x4E2A;&#x5B57;&#x6BCD;&#xFF0C;&#x5F53;&#x5B57;&#x6BCD;&#x9891;&#x7387;&#x8FD8;&#x5927;&#x4E8E;0&#xFF0C;&#x628A;&#x5B57;&#x6BCD;&#x518D;&#x52A0;&#x56DE;heap int cur = heap.poll(); //&#x4E24;&#x5468;exception 1. &#x5B8C;&#x5168;&#x6CA1;&#x6709;&#x5B57;&#x6BCD;&#x9700;&#x8981;&#x52A0;&#x4E86; &#x90A3;&#x4E48;&#x8FD4;&#x56DE;sb&#x5C31;&#x884C; 2. &#x6709;&#x7684;&#x5B57;&#x6BCD;&#x5F53;&#x524D;&#x8F6E;&#x5DF2;&#x7ECF;&#x52A0;&#x8FC7;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x7684;&#x9891;&#x7387;&#x8FD8;&#x662F;&#x5927;&#x4E8E;0&#xFF0C; &#x8FD4;&#x56DE;&quot;&quot; sb.append((char)(cur + &apos;a&apos;)); //System.out.println(cur + &apos;a&apos;); freq[cur]--; if(freq[cur] &gt; 0){ index.add(cur); } } }catch (Exception e){ if(index.isEmpty()){ return sb.toString(); }else{ return &quot;&quot;; } } for(int i : index){ heap.add(i); } } return sb.toString(); }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>636， 71， 735， 23</tag>
        <tag>358</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode-ToDoList]]></title>
    <url>%2F2019%2F03%2F25%2FLeetCode-ToDoList%2F</url>
    <content type="text"><![CDATA[&#x1F4C6; &#x7B2C;&#x4E09;&#x5468;&#x8BA1;&#x5212;&#xFF1A; &#x590D;&#x4E60;&#x524D;&#x4E24;&#x5468;&#x5185;&#x5BB9;&#xFF08;17&#x9053;&#x65E7;&#x9898;&#xFF09; 353 &#x1F389; 636 &#x1F389; 71 &#x1F389; 385 &#x1F389; 735 &#x1F389; 356 &#x1F389; 781 &#x1F389; 554 &#x1F389; 36 205 151 163 38 228 26 27 80 17&#x9053;&#x65B0;&#x9898;&#xFF08;&#x4E00;&#x5929;&#x81F3;&#x5C11;3&#x9053;Medium&#x65B0;&#x9898;&#xFF0C;&#x4E24;&#x9053;Medium&#x65E7;&#x9898;&#xFF09; Sliding Window Maximum &#x1F389; My Calendar I &#x1F389; Find Median from Data Stream &#x1F389; Merge k Sorted Lists &#x1F389; Rearrange String k Distance Apart &#x1F389; Top K Frequent Words Merge Intervals Largest Number Car Fleet Meeting Rooms II Pow(x, n) Shortest Word Distance II Longest Substring Without Repeating Characters Longest Substring with At Most K Distinct Characters Minimum Window Substring Smallest Range Sliding Window Maximum document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>ToDo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 3, Day 16, 3/25/2019]]></title>
    <url>%2F2019%2F03%2F25%2FDay-16%2F</url>
    <content type="text"><![CDATA[&#x7B2C;&#x4E09;&#x5468;&#x7684;&#x7B2C;&#x4E00;&#x5929;&#xFF0C;&#x505A;&#x4E86;&#x4E24;&#x9053;Hard&#x4E00;&#x9053;Medium&#x5E76;&#x4E14;&#x590D;&#x4E60;&#x4E86;&#x4E24;&#x9053;&#x9898;&#x3002;&#x597D;&#x7684;&#x5F00;&#x59CB;&#x662F;&#x6210;&#x529F;&#x7684;&#x4E00;&#x534A;&#xFF01; LeetCode - 239, 729, 295 (0 Easy, 1 Medium, 2 Hard) &#x590D;&#x4E60; - 353 353. Design Snake Game 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374class SnakeGame { /** Initialize your data structure here. @param width - screen width @param height - screen height @param food - A list of food positions E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */ private Queue&lt;Integer&gt; _rowQueue = new LinkedList&lt;&gt;(); private Queue&lt;Integer&gt; _colQueue = new LinkedList&lt;&gt;(); private int[][] _food; private int _lastRow = 0; private int _lastCol = 0; private int _foodIndex = 0; private boolean[][] _broad; public SnakeGame(int width, int height, int[][] food) { _broad = new boolean[height][width]; _food = food; _rowQueue.add(_lastRow); _colQueue.add(_lastCol); } /** Moves the snake. @param direction - &apos;U&apos; = Up, &apos;L&apos; = Left, &apos;R&apos; = Right, &apos;D&apos; = Down @return The game&apos;s score after the move. Return -1 if game over. Game over when snake crosses the screen boundary or bites its body. */ public int move(String dir) { int nextRow = _lastRow; int nextCol = _lastCol; if(dir.equals(&quot;U&quot;)){ nextRow--; }else if(dir.equals(&quot;D&quot;)){ nextRow++; }else if(dir.equals(&quot;R&quot;)){ nextCol++; }else if(dir.equals(&quot;L&quot;)){ nextCol--; } if(nextRow == -1 || nextRow == _broad.length || nextCol == -1 || nextCol == _broad[0].length){ return -1; } //System.out.println(&quot;cur poistion: &quot;+ nextRow + &quot;, &quot; + nextCol); if(_foodIndex != _food.length &amp;&amp; nextRow == _food[_foodIndex][0] &amp;&amp; nextCol == _food[_foodIndex][1]){ _foodIndex++; }else{ _broad[_rowQueue.peek()][_colQueue.peek()] = false; _rowQueue.remove(); _colQueue.remove(); } if(_broad[nextRow][nextCol]){ return -1; } _rowQueue.add(nextRow); _colQueue.add(nextCol); _broad[nextRow][nextCol] = true; _lastRow = nextRow; _lastCol = nextCol; return _foodIndex; }}/** * Your SnakeGame object will be instantiated and called as such: * SnakeGame obj = new SnakeGame(width, height, food); * int param_1 = obj.move(direction); */ &#x65B0;&#x9898; 239. Sliding Window Maximum - hard 1234567891011121314151617181920212223242526272829class Solution { public int[] maxSlidingWindow(int[] nums, int k) { if(k&lt;0){ return new int[0]; } int[] result = new int[nums.length - k+1]; TreeSet&lt;Integer&gt; bstTree = new TreeSet&lt;&gt;((o1, o2) -&gt; Integer.compare(nums[o1], nums[o2]) != 0 ? Integer.compare(nums[o1], nums[o2]): Integer.compare(o1, o2));// :&#x540E;&#x9762;&#x662F;&#x5F53;nums[o1] == nums[o2]&#x65F6;&#x53D1;&#x751F;&#x7684;&#x6240;&#x4EE5;&#x91CC;&#x9762;&#x5199;(nums[o1], nums[o2]) &#x8FD8;&#x662F;&#x5199;(o1, o2)&#x65E0;&#x6240;&#x8C13; for(int i = 0; i &lt; nums.length; i++){ if(i &gt;= k){ bstTree.remove(i-k); } bstTree.add(i); //System.out.println(&quot;i: &quot; + i); //System.out.println(&quot;max: &quot; + bstTree.last()); if(i&gt;=k-1){ result[i-(k-1)] = nums[bstTree.last()]; } } return result; }} 729. My Calendar 1 - Medium TreeMap&#x7684;compare&#x662F;&#x6BD4;&#x8F83;key&#x503C;; Map.Entry&#x5DF2;&#x7ECF;&#x6709;&#x70B9;&#x5FD8;&#x4E86;&#x3002; 1234567891011121314151617181920212223242526272829class MyCalendar { TreeMap&lt;Integer, Integer&gt; bst = null; public MyCalendar() { bst = new TreeMap&lt;&gt;((o1, o2) -&gt; Integer.compare(o1, o2)); } public boolean book(int start, int end) { Map.Entry&lt;Integer, Integer&gt; smaller = bst.floorEntry(start); if(smaller != null &amp;&amp; start &lt; smaller.getValue()){ return false; } Map.Entry&lt;Integer, Integer&gt; larger = bst.ceilingEntry(start); if(larger != null &amp;&amp; end &gt; larger.getKey()){ return false; } bst.put(start, end); return true; }}/** * Your MyCalendar object will be instantiated and called as such: * MyCalendar obj = new MyCalendar(); * boolean param_1 = obj.book(start,end); */ 295. Find Median from Data Stream - Hard 123456789101112131415161718192021222324252627282930313233343536373839404142434445class MedianFinder { /** initialize your data structure here. */ private PriorityQueue&lt;Integer&gt; bstL = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o2, o1)); //&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x6392;&#xFF0C;poll&#x51FA;&#x6765;&#x6700;&#x5927;&#x7684; private PriorityQueue&lt;Integer&gt; bstS = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o1, o2));//&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#xFF0C;poll&#x51FA;&#x6765;&#x6700;&#x5C0F;&#x7684; public MedianFinder() { } public void addNum(int num) { if(!bstL.isEmpty() &amp;&amp; num &lt;= bstL.peek()){//&#x5982;&#x679C;&#x6BD4;bstL&#x7684;&#x6700;&#x5927;&#x5927;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x653E;&#x8FDB;&#x6765; bstL.add(num); }else{ bstS.add(num); } if(bstS.size() == bstL.size()+2){ bstL.add(bstS.poll()); }else if(bstS.size() == bstL.size()-1){ bstS.add(bstL.poll()); } } public double findMedian() { int sSize = bstS.size(); int lSize = bstL.size(); if(sSize == lSize){ return (double)(bstS.peek()+bstL.peek())/2.0; }else{ return (double)(bstS.peek()); } }}/** * Your MedianFinder object will be instantiated and called as such: * MedianFinder obj = new MedianFinder(); * obj.addNum(num); * double param_2 = obj.findMedian(); */ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>353</tag>
        <tag>239</tag>
        <tag>729</tag>
        <tag>295</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 2, Day 15, 3/24/2019]]></title>
    <url>%2F2019%2F03%2F24%2FDay-15%2F</url>
    <content type="text"><![CDATA[&#x7EC8;&#x4E8E;&#x628A;&#x7B2C;&#x4E00;&#x5468;&#x7684;&#x4EFB;&#x52A1;&#x5B8C;&#x6210;&#x4E86;&#xFF0C;&#x7528;&#x4E86;&#x4E24;&#x5468;&#x65F6;&#x95F4;&#x3002;&#x60ED;&#x6127;&#x60ED;&#x6127;&#x3002; X&#x5929;&#x5929;&#x540A;&#x7740;&#x8138;&#xFF0C;&#x50CF;&#x6B20;&#x5979;&#x94B1;&#x4F3C;&#x7684;&#x3002;&#x4E00;&#x4E2A;&#x4EBA;&#x4E3A;&#x4EC0;&#x4E48;&#x53EF;&#x4EE5;&#x5BF9;&#x522B;&#x4EBA;&#x8FD9;&#x4E48;&#x4E0D;&#x53CB;&#x597D;&#x3002; LeetCode - 353 (0 Easy, 1 Medium, 0 Hard) 353. Design Snake Game - Medium Code: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475class SnakeGame { /** Initialize your data structure here. @param width - screen width @param height - screen height @param food - A list of food positions E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */ private Queue&lt;Integer&gt; _rowQueue = new LinkedList&lt;&gt;(); private Queue&lt;Integer&gt; _colQueue = new LinkedList&lt;&gt;(); private boolean[][] _broad; private int _foodIndex = 0; private int[][] _food; private int _lastRow = 0; private int _lastCol = 0; public SnakeGame(int width, int height, int[][] food) { _broad = new boolean[height][width]; _food = food; _rowQueue.add(_lastRow); _colQueue.add(_lastCol); } /** Moves the snake. @param direction - &apos;U&apos; = Up, &apos;L&apos; = Left, &apos;R&apos; = Right, &apos;D&apos; = Down @return The game&apos;s score after the move. Return -1 if game over. Game over when snake crosses the screen boundary or bites its body. */ public int move(String dir) { int _nextRow = _lastRow; int _nextCol = _lastCol; if(dir.equals(&quot;U&quot;)){ _nextRow--; }else if(dir.equals(&quot;D&quot;)){ _nextRow++; }else if(dir.equals(&quot;L&quot;)){ _nextCol--; }else if(dir.equals(&quot;R&quot;)){ _nextCol++; } //System.out.println(&quot;cur position: &quot; + _nextRow + &quot;,&quot; + _nextCol); if(_nextRow == _broad.length || _nextRow == -1 || _nextCol == _broad[0].length || _nextCol == -1){ //System.out.println(_broad[_nextRow][_nextCol]); return -1; } if(_foodIndex != _food.length &amp;&amp; _nextRow == _food[_foodIndex][0] &amp;&amp; _nextCol == _food[_foodIndex][1]){//_foodIndex != _food.length&#x4E3A;&#x4E86;&#x907F;&#x514D;_food[_foodIndex]&#x8D8A;&#x754C; _foodIndex++; }else{ //System.out.println(&quot;cur peek: &quot; + _rowQueue.peek() +&quot;, &quot;+_colQueue.peek()); _broad[_rowQueue.peek()][_colQueue.peek()] = false; _rowQueue.remove(); _colQueue.remove(); } if(_broad[_nextRow][_nextCol]){ return -1;//&#x5224;&#x65AD;&#x5B8C;&#x86C7;&#x5177;&#x4F53;&#x5360;&#x7684;&#x4F4D;&#x7F6E;&#x4E4B;&#x540E;&#xFF08;&#x8981;&#x4E0D;&#x8981;&#x81EA;&#x8EAB;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x957F;&#x5EA6;&#xFF09;&#x518D;&#x770B;&#x4E0B;&#x4E00;&#x6B65;&#x80FD;&#x4E0D;&#x80FD;&#x78B0;&#x5230;&#x81EA;&#x5DF1; } _broad[_nextRow][_nextCol] = true; _rowQueue.add(_nextRow); _colQueue.add(_nextCol); _lastRow = _nextRow; _lastCol = _nextCol; return _foodIndex; }}/** * Your SnakeGame object will be instantiated and called as such: * SnakeGame obj = new SnakeGame(width, height, food); * int param_1 = obj.move(direction); */ Testcases: 12[&quot;SnakeGame&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;][[3,3,[[2,0],[0,0],[0,2],[2,2]]],[&quot;D&quot;],[&quot;D&quot;],[&quot;R&quot;],[&quot;U&quot;],[&quot;U&quot;],[&quot;L&quot;],[&quot;D&quot;],[&quot;R&quot;],[&quot;R&quot;],[&quot;U&quot;],[&quot;L&quot;],[&quot;D&quot;]] 12[&quot;SnakeGame&quot;,&quot;move&quot;,&quot;move&quot;][[2,2,[[0,1]]],[&quot;R&quot;],[&quot;D&quot;]] 12[&quot;SnakeGame&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;][[3,2,[[1,2],[0,1]]],[&quot;R&quot;],[&quot;D&quot;],[&quot;R&quot;],[&quot;U&quot;],[&quot;L&quot;],[&quot;U&quot;]] 12[&quot;SnakeGame&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;][[3,3,[[2,0],[0,0],[0,2],[0,1],[2,2],[0,1]]],[&quot;D&quot;],[&quot;D&quot;],[&quot;R&quot;],[&quot;U&quot;],[&quot;U&quot;],[&quot;L&quot;],[&quot;D&quot;],[&quot;R&quot;],[&quot;R&quot;],[&quot;U&quot;],[&quot;L&quot;],[&quot;L&quot;],[&quot;D&quot;],[&quot;R&quot;],[&quot;U&quot;]] document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>353</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 2, Day 14, 3/23/2019]]></title>
    <url>%2F2019%2F03%2F23%2FDay-14%2F</url>
    <content type="text"><![CDATA[&#x4E4B;&#x524D;&#x7684;&#x8BA1;&#x5212;&#x662F;&#x6BCF;&#x5468;&#x516D;&#x4F11;&#x606F;&#xFF0C;&#x9274;&#x4E8E;&#x524D;&#x4E24;&#x5929;&#x592A;&#x4E4F;&#x63D0;&#x524D;&#x4F11;&#x606F;&#xFF0C;&#x4ECA;&#x5929;&#x5F00;&#x59CB;&#x518D;&#x6B21;&#x505A;&#x9898;&#x3002; LeetCode - 636, 71, 385 (0 Easy, 3 Medium, 0 Hard) 636. Exclusive Time of Functions - Medium 123456789101112131415161718192021222324252627282930313233343536class Solution { public int[] exclusiveTime(int n, List&lt;String&gt; logs) { Stack&lt;Node&gt; stack = new Stack&lt;&gt;(); int[] result = new int[n]; for(String log: logs){ String[] content = log.split(&quot;:&quot;); int id = Integer.valueOf(content[0]); int time = Integer.valueOf(content[2]); if(content[1].equals(&quot;start&quot;)){ stack.push(new Node(id, time)); }else{ Node cur = stack.pop(); int consumed = time - cur._start + 1 - cur._consumedByChildren; // &#x51CF;&#x6389;&#x522B;&#x7684;id&#x505A;&#x7684;&#x4E8B;&#x60C5;&#xFF0C;&#x547D;&#x540D;&#x4E3A;consumedByOther&#x66F4;&#x597D; result[id] += consumed; if(!stack.isEmpty()){ stack.peek()._consumedByChildren += time - cur._start + 1; } } } return result; } private class Node{ final int _id; final int _start; int _consumedByChildren; public Node(int id, int start){ _id = id; _start = start; _consumedByChildren = 0; } }} 71. Simplify Path - Medium 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748class Solution { public String simplifyPath(String path) { Stack&lt;String&gt; stack = new Stack&lt;&gt;(); int start = 0; String str = new String(); for(int i=1; i&lt;path.length(); i++){ char cur = path.charAt(i); if(cur == &apos;/&apos;){ if(path.charAt(i-1) != &apos;/&apos;){ str = path.substring(start, i); if(str.equals(&quot;/..&quot;) &amp;&amp; !stack.isEmpty()){ stack.pop(); }else if(!str.equals(&quot;/.&quot;) &amp;&amp; !str.equals(&quot;/..&quot;)){ stack.push(str); } } start = i; } } String strEnd = path.substring(start, path.length()); if(stack.isEmpty()){ if(strEnd.equals(&quot;/..&quot;) || strEnd.equals(&quot;/.&quot;)){ stack.push(&quot;/&quot;); }else{ stack.push(strEnd); } }else{ if(strEnd.equals(&quot;/..&quot;)){ stack.pop(); if(stack.isEmpty()){ stack.push(&quot;/&quot;); } }else if(!strEnd.equals(&quot;/&quot;) &amp;&amp; !strEnd.equals(&quot;/.&quot;)){ stack.push(strEnd); } } StringBuilder sb = new StringBuilder(); for(String s: stack){ sb.append(s); } return sb.toString(); }} 385 - Mini Parser - Medium 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566/** * // This is the interface that allows for creating nested lists. * // You should not implement it, or speculate about its implementation * public interface NestedInteger { * // Constructor initializes an empty nested list. * public NestedInteger(); * * // Constructor initializes a single integer. * public NestedInteger(int value); * * // @return true if this NestedInteger holds a single integer, rather than a nested list. * public boolean isInteger(); * * // @return the single integer that this NestedInteger holds, if it holds a single integer * // Return null if this NestedInteger holds a nested list * public Integer getInteger(); * * // Set this NestedInteger to hold a single integer. * public void setInteger(int value); * * // Set this NestedInteger to hold a nested list and adds a nested integer to it. * public void add(NestedInteger ni); * * // @return the nested list that this NestedInteger holds, if it holds a nested list * // Return null if this NestedInteger holds a single integer * public List&lt;NestedInteger&gt; getList(); * } */class Solution { public NestedInteger deserialize(String s) { Stack&lt;NestedInteger&gt; stack = new Stack&lt;&gt;(); if(s.charAt(0) != &apos;[&apos;){ return new NestedInteger(Integer.valueOf(s)); } NestedInteger fakeBaba = new NestedInteger(); int start = 0; stack.push(fakeBaba); for(int i=0; i &lt; s.length(); i++){ char c = s.charAt(i); if( c == &apos;-&apos; || &apos;0&apos;&lt;= c &amp;&amp; c &lt;= &apos;9&apos;){ continue; } if(c == &apos;[&apos;){ NestedInteger nested = new NestedInteger(); stack.peek().add(nested); stack.push(nested); }else{ if(s.charAt(i-1) &gt;= &apos;0&apos; &amp;&amp; s.charAt(i-1) &lt;= &apos;9&apos;){ int num = Integer.valueOf(s.substring(start, i)); NestedInteger nested = new NestedInteger(num); stack.peek().add(nested); } if(c == &apos;]&apos;){ stack.pop();// &apos;[&apos;&#x65F6;,&#x65E2;peek&#x53C8;push&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#x5F53;&apos;]&apos;&#x6216;&apos;,&apos;&#x65F6; &#x7ED9;peek&#x52A0;&#x5C31;&#x76F8;&#x5F53;&#x4E8E;&#x7ED9;&#x524D;&#x4E00;&#x4E2A;&#x4E5F;&#x52A0;&#x4E86;&#xFF1B; } } start = i+1; } return stack.peek().getList().get(0); }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>636</tag>
        <tag>71</tag>
        <tag>385</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 2, Day 13, 3/22/2019]]></title>
    <url>%2F2019%2F03%2F23%2FDay-13%2F</url>
    <content type="text"><![CDATA[&#x53C8;&#x4F11;&#x606F;&#x4E86;&#x4E00;&#x5929;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 2, Day 12, 3/21/2019]]></title>
    <url>%2F2019%2F03%2F21%2FDay-12%2F</url>
    <content type="text"><![CDATA[&#x770B;&#x4E0D;&#x52A8;&#x4E86;&#xFF0C;&#x4E0B;&#x5348;&#x5750;&#x7740;&#x5C31;&#x7761;&#x7740;&#x4E86;&#x3002;&#x51C6;&#x5907;&#x7761;&#x4E86;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 2, Day 11, 3/20/2019]]></title>
    <url>%2F2019%2F03%2F20%2FDay-11%2F</url>
    <content type="text"><![CDATA[&#x53C8;&#x5FD8;&#x8BB0;&#x5E26;&#x7B14;&#x548C;&#x672C;&#x6765;&#x56FE;&#x4E66;&#x9986;&#x4E86;&#xFF0C;&#x53EA;&#x80FD;&#x7EE7;&#x7EED;&#x590D;&#x4E60;&#x3002; &#x590D;&#x4E60;&#xFF1A; 163&#xFF0C;38 (&#x4E2D;&#x5348;&#x4E0D;&#x5230;&#x4E00;&#x5C0F;&#x65F6;) 228, 26, 27, 80(&#x665A;&#x996D;&#x540E;) LeetCode - &#x590D;&#x4E60; 163. Missing Ranges &#x53C8;&#x5FD8;&#x8BB0;int&#x6700;&#x5927;&#x503C;&#x7684;&#x95EE;&#x9898;&#x4E86; 12345678910111213141516171819202122232425262728293031323334class Solution { public List&lt;String&gt; findMissingRanges(int[] nums, int lower, int upper) { List&lt;String&gt; list = new ArrayList&lt;&gt;(); if(nums.length == 0){ list.add(group(lower, upper)); return list; } if(nums[0] &gt; lower){ list.add(group(lower, nums[0]-1)); } for(int i = 1; i &lt; nums.length; i++){ if(nums[i] != nums[i-1]+1 &amp;&amp; nums[i] != nums[i-1]){ list.add(group(nums[i-1]+1, nums[i]-1)); } } if(nums[nums.length - 1] &lt; upper){ list.add(group(nums[nums.length - 1]+1, upper)); } return list; } private String group(int start, int end){ if(start == end){ return start + &quot;&quot;; }else{ return start + &quot;-&gt;&quot; + end; } }} 38. Count and Say StringBuilder sb &#x6DFB;&#x52A0; 1B &#x8981;&#x5148;append(1)&#x518D;append(B) 1234567891011121314151617181920212223242526class Solution { public String countAndSay(int n) { String result = &quot;1&quot;; for(int i=2; i &lt;= n; i++){ StringBuilder sb = new StringBuilder(); char pre = result.charAt(0); int num = 1; for(int j = 1; j&lt;result.length(); j++){ char cur = result.charAt(j); if(cur != pre){ sb.append(num); sb.append(pre); pre = result.charAt(j); num = 1; }else{ num++; } } sb.append(num); sb.append(pre); result = sb.toString(); } return result; }} 228. Summary Ranges 123456789101112131415161718192021222324252627282930313233class Solution { public List&lt;String&gt; summaryRanges(int[] nums) { if(nums.length == 0){ return new ArrayList&lt;&gt;(); } List&lt;String&gt; list = new ArrayList&lt;&gt;(); int start = 0; for(int i=1; i &lt; nums.length; i++){ if(nums[i] != nums[i-1] +1 &amp;&amp; nums[i] != nums[i-1]){ list.add(group(nums[start], nums[i-1])); start = i; } } if(start &lt; nums.length){ list.add(group(nums[start], nums[nums.length-1])); } return list; } private String group(int start, int end){ if(start == end){ return start + &quot;&quot;; }else{ return start + &quot;-&gt;&quot; + end; } }} 26. Remove Duplicates from Sorted Array 1234567891011121314151617class Solution { public int removeDuplicates(int[] nums) { if(nums.length &lt;= 1){ return nums.length; } int start = 0; for(int i = 1; i &lt; nums.length; i++){ if(nums[i] != nums[i-1]){ start++; nums[start] = nums[i]; } } return start+1; }} 27. Remove Element 1234567891011121314151617class Solution { public int removeElement(int[] nums, int val) { if(nums.length == 0){ return 0; } int start = -1; for(int i=0; i &lt; nums.length; i++){ if(nums[i] != val){ start++; nums[start] = nums[i]; } } return start+1; }} 80. Remove Duplicates from Sorted Array 2 1234567891011121314151617class Solution { public int removeDuplicates(int[] nums) { if(nums.length &lt; 2){ return nums.length; } int start = 1; for(int i=2; i &lt; nums.length; i++){ if(nums[i] != nums[start-1]){ start++; nums[start] = nums[i]; } } return start+1; }} LeetCode - 735 (0 Easy, 1 Medium, 0 Hard) 735. Asteroid Collision - Medium &#x4E00;&#x6BB5;&#x62A5;&#x9519;&#x7684;&#x4EE3;&#x7801; 1234567891011121314151617181920212223242526272829303132class Solution { public int[] asteroidCollision(int[] asteroids) { if(asteroids.length == 0){ return new int[0]; } Stack&lt;Integer&gt; stack= new Stack&lt;&gt;(); stack.push(asteroids[0]); for(int i = 1; i &lt; asteroids.length; i++){ if(asteroids[i] &gt; 0){ stack.push(asteroids[i]); }else{ while(asteroids[i] + stack.peek() &lt; 0){ stack.pop(); } if(asteroids[i] + stack.peek() == 0){ stack.pop(); } } } int[] result = new int[stack.size()]; int i = 0; for(int val : stack){ result[i++] = val; } return result; }} &#x6B63;&#x786E;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x592A;&#x591A;&#x79CD;&#x60C5;&#x51B5;&#x4E86;&#xFF0C;&#x4E00;&#x5B9A;&#x8981;&#x60F3;&#x6E05;&#x695A; 12345678910111213141516171819202122232425262728293031323334353637class Solution { public int[] asteroidCollision(int[] a) { if(a.length == 0){ return new int[0]; } Stack&lt;Integer&gt; stack= new Stack&lt;&gt;(); stack.push(a[0]); for(int i = 1; i &lt; a.length; i++){ if(stack.isEmpty() || stack.peek()&lt;0){ stack.push(a[i]); }else{ if(a[i] &gt; 0){ stack.push(a[i]); }else{ while(!stack.isEmpty() &amp;&amp; stack.peek() &gt; 0 &amp;&amp; a[i] + stack.peek() &lt; 0){ stack.pop(); } if(!stack.isEmpty() &amp;&amp; a[i] + stack.peek() == 0){ stack.pop(); }else if(stack.isEmpty() || a[i] + stack.peek() &lt; 0){ stack.push(a[i]); } } } } int[] result = new int[stack.size()]; int i = 0; for(int val:stack){ result[i] = val; i++; } return result; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>163</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 2, Day 10, 3/19/2019]]></title>
    <url>%2F2019%2F03%2F19%2FDay-10%2F</url>
    <content type="text"><![CDATA[&#x4E2D;&#x5348;&#x6765;&#x56FE;&#x4E66;&#x9986;&#x590D;&#x4E60;&#x4E86;LeetCode 356&#xFF0C;554, 205, 781, 36, 299, 151&#x3002;&#x6293;&#x7D27;&#x6BCF;&#x4E00;&#x5206;&#x949F;&#x3002;&#x6CA1;&#x60F3;&#x5230;&#x6700;&#x4E0D;&#x719F;&#x7EC3;&#x7684;&#x7ADF;&#x7136;&#x662F;Easy&#x7684;205&#xFF0C;&#x4E5F;&#x8BB8;&#x662F;&#x56E0;&#x4E3A;&#x662F;&#x7B2C;&#x4E94;&#x5929;&#x505A;&#x7684;&#xFF0C;&#x800C;&#x5176;&#x5B83;&#x4E24;&#x9053;&#x90FD;&#x662F;&#x6628;&#x5929;&#x505A;&#x7684;&#x3002;&#x4ECA;&#x665A;&#x628A;&#x8FD9;&#x4E9B;&#x90FD;&#x590D;&#x4E60;&#x4E86;&#x5427;&#x3002; LeetCode document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 2, Day 9, 3/18/2019]]></title>
    <url>%2F2019%2F03%2F18%2FDay-09%2F</url>
    <content type="text"><![CDATA[&#x548C;&#x60C5;&#x7EEA;&#x4E0D;&#x7A33;&#x5B9A;&#x7684;&#x4EBA;&#x76F8;&#x5904;&#x771F;&#x7684;&#x9700;&#x8981;&#x6781;&#x597D;&#x7684;&#x8010;&#x5FC3;&#xFF0C;&#x4E5F;&#x8BB8;&#x8FD9;&#x5C31;&#x662F;&#x6211;&#x9700;&#x8981;&#x4FEE;&#x884C;&#x7684;&#x5730;&#x65B9;&#x5427;&#x3002; &#x529E;GC&#x8FD8;&#x8981;&#x518D;&#x7B49;&#xFF0C;&#x6293;&#x7D27;&#x5237;&#x9898;&#x5427;&#x3002; Java&#x5F3A;&#x5236;&#x7C7B;&#x578B;&#x8F6C;&#x6362; &#x8BED;&#x6CD5;&#xFF1A;&#x201C;&#xFF08;&#x201D;+&#x201C;&#x76EE;&#x6807;&#x7C7B;&#x578B;&#x201D;+&#x201C;&#xFF09;&#x201D;+&#x201C;&#x60F3;&#x8981;&#x8F6C;&#x6362;&#x7684;&#x503C;&#x201D;&#xFF1B; Ref: Java&#x5F3A;&#x5236;&#x7C7B;&#x578B;&#x8F6C;&#x6362; Java&#x96C6;&#x5408;&#x7C7B;: Set&#x3001;List&#x3001;Map&#x3001;Queue&#x4F7F;&#x7528;&#x573A;&#x666F;&#x68B3;&#x7406; Ref: Java&#x96C6;&#x5408;&#x7C7B;: Set&#x3001;List&#x3001;Map&#x3001;Queue&#x4F7F;&#x7528;&#x573A;&#x666F;&#x68B3;&#x7406; LeetCode - 356 356. Line Reflection - Medium 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051class Solution { public boolean isReflected(int[][] points) { if(points.length == 0){ return true; } Map&lt;Integer, Set&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;(); // 1. &#x4EE5;y&#x6765;&#x5F52;&#x7C7B;x // 2. &#x627E;&#x51FA;&#x6700;&#x5927;&#x6700;&#x5C0F;&#x7684;x&#xFF0C;&#x7B97;&#x51FA;mid(&#x7B2C;&#x4E00;&#x7EC4;&#x6570;) // 3. &#x904D;&#x5386;&#x6BCF;&#x4E00;&#x4E2A;&#x70B9;&#xFF0C;&#x5BF9;&#x7167;&#x662F;&#x5426;&#x4EE5;mid&#x6765;reflect // 1. &#x4EE5;y&#x6765;&#x5F52;&#x7C7B;x for(int[] point: points){ int x = point[0]; int y = point[1]; if(map.containsKey(y)){ Set&lt;Integer&gt; set = map.get(y); set.add(x); }else{ Set&lt;Integer&gt; set = new HashSet&lt;&gt;(); set.add(x); map.put(y, set); } } // 2. &#x627E;&#x51FA;&#x6700;&#x5927;&#x6700;&#x5C0F;&#x7684;x&#xFF0C;&#x7B97;&#x51FA;mid(&#x7B2C;&#x4E00;&#x7EC4;&#x6570;) int min = Integer.MAX_VALUE; int max = Integer.MIN_VALUE; Iterator&lt;Map.Entry&lt;Integer, Set&lt;Integer&gt;&gt;&gt; iter = map.entrySet().iterator(); Set&lt;Integer&gt; set0 = iter.next().getValue(); for(int x: set0){ min = Math.min(min, x); max = Math.max(max, x); } double mid = min + (max-min)/2.0; // 3. &#x904D;&#x5386;&#x6BCF;&#x4E00;&#x4E2A;&#x70B9;&#xFF0C;&#x5BF9;&#x7167;&#x662F;&#x5426;&#x4EE5;mid&#x6765;reflect for(Map.Entry&lt;Integer, Set&lt;Integer&gt;&gt; entry: map.entrySet()){ Set&lt;Integer&gt; set = entry.getValue(); for(int x:set){ int reflect = (int)(2*mid - x); if(!set.contains(reflect)){ return false; } } } return true; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>356</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 1, Day 8, 3/17/2019]]></title>
    <url>%2F2019%2F03%2F17%2FDay-08%2F</url>
    <content type="text"><![CDATA[&#x7531;&#x4E8E;&#x7B2C;&#x4E00;&#x5929;&#x5237;&#x9898;&#x90A3;&#x5929;&#x662F;&#x4E2A;&#x5468;&#x4E94;&#xFF0C;&#x6240;&#x4EE5;&#x7B2C;&#x4E00;&#x5468;&#x6709;&#x4E86;8&#x5929;&#x3002;&#x8D76;&#x4E86;&#x4E00;&#x5929;&#x98DE;&#x673A;&#xFF0C;&#x7531;&#x4E8E;&#x65F6;&#x5DEE;&#xFF0C;17&#x53F7;&#x8FD8;&#x5728;&#x3002; mod mod % LeetCode - 781 - (0 Easy, 1 Medium, 0 Hard) 781 - Rabbits in Forest - Medium 123456789101112131415161718192021222324252627282930class Solution { public int numRabbits(int[] answers) { if(answers.length == 0){ return 0; } Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); for(int i = 0; i &lt; answers.length; i++){ if(map.containsKey(answers[i]+1)){ map.put(answers[i]+1, map.get(answers[i]+1)+1); }else{ map.put(answers[i]+1, 1); } } int result = 0; int key = 0; int value = 0; for(Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()){ key = entry.getKey(); value = entry.getValue(); if (value%key != 0){ result += key*(value/key+1); }else{ result += value; } } return result; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>mod</tag>
        <tag>781</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 1, Day 7, 3/16/2019]]></title>
    <url>%2F2019%2F03%2F16%2FDay-07%2F</url>
    <content type="text"><![CDATA[3/17 updated: &#x6628;&#x5929;&#x6700;&#x540E;&#x4E00;&#x5929;&#x5728;&#x5BB6;&#xFF0C;&#x966A;&#x4E86;&#x5BB6;&#x91CC;&#x4EBA;&#xFF0C;&#x803D;&#x8BEF;&#x4E86;&#x5237;&#x9898;&#x3002;&#x4ECA;&#x5929;&#x8865;&#x4E0A;&#x3002; for loop 12345678910111213//&#x666E;&#x901A;for&#x5FAA;&#x73AF;&#x904D;&#x5386;for (int i = 0; i &lt; list.size(); i++) { System.out.print(list.get(i) + &quot;,&quot;);}//&#x8FED;&#x4EE3;&#x5668;&#x5FAA;&#x73AF;&#x904D;&#x5386;Iterator iterator = list.iterator();while (iterator.hasNext()) { System.out.print(iterator.next() + &quot;,&quot;);}//&#x589E;&#x5F3A;for&#x5FAA;&#x73AF;for (Integer i : list) { System.out.print(i + &quot;,&quot;);} // &#x601D;&#x8003; int[] x&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x4E0D;&#x80FD;&#x7528; int i: x Iterator Object next()&#xFF1A;&#x8FD4;&#x56DE;&#x8FED;&#x4EE3;&#x5668;&#x521A;&#x8D8A;&#x8FC7;&#x7684;&#x5143;&#x7D20;&#x7684;&#x5F15;&#x7528;&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x662F; Object&#xFF0C;&#x9700;&#x8981;&#x5F3A;&#x5236;&#x8F6C;&#x6362;&#x6210;&#x81EA;&#x5DF1;&#x9700;&#x8981;&#x7684;&#x7C7B;&#x578B; boolean hasNext()&#xFF1A;&#x5224;&#x65AD;&#x5BB9;&#x5668;&#x5185;&#x662F;&#x5426;&#x8FD8;&#x6709;&#x53EF;&#x4F9B;&#x8BBF;&#x95EE;&#x7684;&#x5143;&#x7D20; void remove()&#xFF1A;&#x5220;&#x9664;&#x8FED;&#x4EE3;&#x5668;&#x521A;&#x8D8A;&#x8FC7;&#x7684;&#x5143;&#x7D20; Ref: Iterator Map.Entry Map.Entry&#x662F;Map&#x58F0;&#x660E;&#x7684;&#x4E00;&#x4E2A;&#x5185;&#x90E8;&#x63A5;&#x53E3;&#xFF0C;&#x6B64;&#x63A5;&#x53E3;&#x4E3A;&#x6CDB;&#x578B;&#xFF0C;&#x5B9A;&#x4E49;&#x4E3A;Entry&lt;K,V&gt;&#x3002;&#x5B83;&#x8868;&#x793A;Map&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x5B9E;&#x4F53;&#xFF08;&#x4E00;&#x4E2A;key-value&#x5BF9;&#xFF09;&#x3002;&#x63A5;&#x53E3;&#x4E2D;&#x6709;getKey(),getValue&#x65B9;&#x6CD5;&#x3002; Ref: Map.Entry&#x4F7F;&#x7528;&#x8BE6;&#x89E3; break &#x8DF3;&#x51FA;&#x4E00;&#x5C42;&#x5FAA;&#x73AF; LeetCode - 554 - (0 Easy, 1 Medium, 0 Hard) 554. Brick Wall - Easy 123456789101112131415161718192021222324252627class Solution { public int leastBricks(List&lt;List&lt;Integer&gt;&gt; wall) { Map&lt;Integer, Integer&gt; gapBypass = new HashMap&lt;&gt;(); for(List&lt;Integer&gt; list: wall){ int gap = 0; Iterator&lt;Integer&gt; it = list.iterator(); while(it.hasNext()){ gap += it.next(); if(!it.hasNext()){ break; // &#x7EC6;&#x7EC6;&#x4F53;&#x5473;&#x4E3A;&#x4EC0;&#x4E48;&#x8FD9;&#x5757;&#x8981;&#x52A0;break } if(gapBypass.containsKey(gap)){ gapBypass.put(gap, gapBypass.get(gap)+1); }else{ gapBypass.put(gap, 1); } } } int result = wall.size(); for(Map.Entry&lt;Integer, Integer&gt; entry: gapBypass.entrySet()){ int Bypass = entry.getValue(); result = Math.min(result, wall.size() - Bypass); } return result; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>for loop</tag>
        <tag>Iterator</tag>
        <tag>Map.Entry</tag>
        <tag>break</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 1, Day 6, 3/15/2019]]></title>
    <url>%2F2019%2F03%2F15%2FDay-06%2F</url>
    <content type="text"><![CDATA[&#x7EE7;&#x7EED;&#x52AA;&#x529B;&#xFF01; &#x4ECA;&#x5929;&#x6709;&#x4E9B;&#x4E4F;&#xFF0C;&#x51FA;&#x73B0;&#x4E86;&#x601D;&#x7EF4;&#x60F0;&#x6027;&#xFF0C;&#x4E0D;&#x77E5;&#x9053;&#x662F;&#x56E0;&#x4E3A;&#x6CA1;&#x6709;&#x4F11;&#x606F;&#x597D;&#xFF0C;&#x8FD8;&#x662F;&#x505A;&#x4E86;&#x4E94;&#x5929;&#x9898;&#x6709;&#x4E9B;&#x7D2F;&#x4E86;&#x3002;&#x4E5F;&#x8BB8;&#x53EF;&#x4EE5;&#x8BD5;&#x8BD5;&#x4EE5;&#x540E;&#x5468;&#x4E00;&#x5230;&#x5468;&#x4E94;&#x6B63;&#x5E38;&#x5237;&#x9898;&#xFF0C;&#x5468;&#x516D;&#x4F11;&#x606F;&#xFF0C;&#x5468;&#x65E5;&#x590D;&#x4E60;&#x8FD9;&#x4E00;&#x5468;&#x7684;&#x9898;&#x3002; boolean[] boolean[] array = new boolean[size]; &#x6240;&#x6709;&#x9ED8;&#x8BA4;&#x503C;&#x4E3A;false&#xFF1B; LeetCode - 36 (0 Easy, 1 Medium, 0 Hard) 36. Valid Sudoku - Medium 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960class Solution { public boolean isValidSudoku(char[][] board) { // row for(int i=0; i &lt; 9; i++){ boolean[] set = new boolean[9]; for(int j=0; j&lt;9; j++){ char num = board[i][j]; if( &apos;1&apos;&lt;=num &amp;&amp; num&lt;=&apos;9&apos;){ if(set[num - &apos;1&apos;]){ return false; }else{ set[num - &apos;1&apos;]=true; } }else if(num != &apos;.&apos;){ return false; } } } // col for(int i=0; i &lt; 9; i++){ boolean[] set = new boolean[9]; for(int j=0; j&lt;9; j++){ char num = board[j][i]; if( &apos;1&apos;&lt;=num &amp;&amp; num&lt;=&apos;9&apos;){ if(set[num - &apos;1&apos;]){ return false; }else{ set[num - &apos;1&apos;]=true; } }else if(num != &apos;.&apos;){ return false; } } } // &#x4E5D;&#x5BAB;&#x683C; for(int daHang = 0; daHang &lt;3; daHang++){ for(int daLie = 0; daLie &lt;3; daLie++){ boolean[] set = new boolean[9]; for(int i=0; i &lt; 3; i++){ for(int j=0; j&lt;3; j++){ char num = board[daHang*3+i][daLie*3+j]; if( &apos;1&apos;&lt;=num &amp;&amp; num&lt;=&apos;9&apos;){ if(set[num - &apos;1&apos;]){ return false; }else{ set[num - &apos;1&apos;]=true; } }else if(num != &apos;.&apos;){ return false; } } } } } return true; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>boolean数组</tag>
        <tag>36</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 1, Day 5, 3/14/2019]]></title>
    <url>%2F2019%2F03%2F14%2FDay-05%2F</url>
    <content type="text"><![CDATA[&#x52A0;&#x6CB9;&#x52A0;&#x6CB9;&#xFF01; Set, Map Set(&#x96C6;&#x5408;)&#xFF1A;&#x65E0;&#x5E8F;&#xFF0C;&#x4E0D;&#x80FD;&#x91CD;&#x590D;&#xA0; Map&#xFF08;&#x6620;&#x5C04;&#xFF09;&#xFF1A;&#x96C6;&#x5408;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5305;&#x542B;&#x4E00;&#x5BF9;&#x952E;&#x5BF9;&#x8C61;&#x548C;&#x503C;&#x5BF9;&#x8C61;&#xFF0C;&#x96C6;&#x5408;&#x4E2D;&#x6CA1;&#x6709;&#x91CD;&#x590D;&#x7684;&#x952E;&#x5BF9;&#x8C61;&#xFF0C;&#x503C;&#x5BF9;&#x8C61;&#x53EF;&#x4EE5;&#x91CD;&#x590D;&#x3002; char[] char s=new char[30]; &#x5982;&#x679C;&#x6CA1;&#x6709;&#x663E;&#x5F0F;&#x8D4B;&#x503C;&#xFF0C;&#x5219;&#x7CFB;&#x7EDF;&#x81EA;&#x52A8;&#x8D4B;&#x9ED8;&#x8BA4;&#x503C;null&#x3002; &#x9700;&#x8981;&#x601D;&#x8003;&#x4E24;&#x79CD;Map&#x7684;&#x8868;&#x8FBE;&#x65B9;&#x5F0F; General 1234Map&lt;Character, T&gt; map;map.put(k, v);v = map.get(k);if(map.containsKey(k)); &#x6709;char&#x7684;&#x65F6;&#x5019;&#x7528;&#x8FD9;&#x4E2A;&#x6BD4;&#x8F83;&#x597D;&#xFF0C;char&#x53EA;&#x6709;256&#x4E2A; 1234T[] map = new T[256];map[k] = v;v = map[k];if(map[k] ! nullValue) LeetCode - 205 (1 Easy, 1 Medium, 0 Hard) 205. Isomorphic Strings - Easy 123456789101112131415161718192021222324class Solution { public boolean isIsomorphic(String s, String t) { return mappable(s, t) &amp;&amp; mappable(t, s);//&#x5982;&#x679C;&#x53EA;&#x5173;&#x5FC3;mappable(s, t)&#x5C31;&#x4E0D;&#x662F;&#x4E00;&#x4E00;&#x6620;&#x5C04;&#xFF0C;testcase: &quot;ab&quot;, &quot;aa&quot; } private boolean mappable(String s, String t) { char[] map = new char[256]; for (int i = 0; i &lt; s.length(); i++){ char cS = s.charAt(i); char cT = t.charAt(i); if(map[cS] == 0){ map[cS] = cT; }else{ if(map[cS] != cT){ return false; } } } return true; }} 299. Bulls and Cows - Medium 123456789101112131415161718192021222324class Solution { public String getHint(String secret, String guess) { int[] sF = new int[10]; int[] gF = new int[10]; int cntA = 0; for (int i = 0; i &lt; secret.length(); i++){ char cS = secret.charAt(i); char cG = guess.charAt(i); if(cS == cG){ cntA ++; }else{ sF[cS - &apos;0&apos;]++;// &apos;0&apos; -&gt; 0, &apos;1&apos; -&gt; 1 gF[cG - &apos;0&apos;]++; } } int cntB = 0; for (int i=0; i &lt; 10; i++){ cntB += Math.min(sF[i], gF[i]); } return cntA + &quot;A&quot; + cntB + &quot;B&quot;; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Set</tag>
        <tag>Map</tag>
        <tag>205</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 1, Day 4, 3/13/2019]]></title>
    <url>%2F2019%2F03%2F13%2FDay-04%2F</url>
    <content type="text"><![CDATA[3/13: &#x4ECA;&#x5929;&#x592A;&#x56F0;&#x4E86;&#xFF0C;&#x7F51;&#x4E5F;&#x603B;&#x65AD;&#xFF0C;&#x4E0A;&#x4E0D;&#x4E86;LeetCode&#xFF0C;&#x5199;&#x4E86;&#x4E00;&#x534A;&#x7684;Code&#x6CA1;&#x6CD5;test&#x3002; 3/14: &#x5148;&#x5B8C;&#x6210;&#x6628;&#x5929;&#x7684;#151 Java substring() &#x65B9;&#x6CD5; substring(int beginIndex) or substring(int beginIndex, int endIndex) &#x65B9;&#x6CD5;&#x8FD4;&#x56DE;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x5B50;&#x5B57;&#x7B26;&#x4E32;&#x3002; beginIndex -- &#x8D77;&#x59CB;&#x7D22;&#x5F15;&#xFF08;&#x5305;&#x62EC;&#xFF09;, &#x7D22;&#x5F15;&#x4ECE; 0 &#x5F00;&#x59CB;&#x3002; endIndex -- &#x7ED3;&#x675F;&#x7D22;&#x5F15;&#xFF08;&#x4E0D;&#x5305;&#x62EC;&#xFF09;&#x3002; Ref: Java substring() &#x65B9;&#x6CD5; IndexOutOfBoundsException - if the beginIndex is negative, or endIndex is larger than the length of this String object, or beginIndex is larger than endIndex. substring(length) will return an empty string Ref: substring(length) &#x5355;&#x5F15;&#x53F7;&#xFF0C;&#x53CC;&#x5F15;&#x53F7; &#x5355;&#x5F15;&#x53F7;&#x5F15;&#x7684;&#x6570;&#x636E; &#x662F;char&#x7C7B;&#x578B;&#x7684;; &#x53CC;&#x5F15;&#x53F7;&#x5F15;&#x7684;&#x6570;&#x636E; &#x662F;String&#x7C7B;&#x578B;&#x7684; Stack Stack&lt;String&gt; stack = new Stack&lt;&gt;(); &#x5148;&#x8FDB;&#x540E;&#x51FA; &#x52A0;&#x5728;&#x5C3E;: push() &#x5220;&#x5728;&#x5C3E;: pop() &#x770B;&#x5728;&#x5C3E;: peek() &#x6CDB;&#x578B; LeetCode - 151 (0 Easy, 1 Medium, 0 Hard) 151. Reverse Words in a String - Medium 12345678910111213141516171819202122232425class Solution { public String reverseWords(String s) { Stack&lt;String&gt; stack = new Stack&lt;&gt;(); // base case int start = 0; // general case for(int i=1; i &lt; s.length(); i++){ if(s.charAt(i) == &apos; &apos;){ // should be &apos; &apos; not &quot; &quot; if(s.charAt(i-1) != &apos; &apos;){ stack.push(s.substring(start, i)); } start = i+1; // consider why if s.charAt(i-1) != &apos; &apos; or not, start always should equal to i+1 } } stack.push(s.substring(start)); // if start = s.length(), will return an empty string StringBuilder sb = new StringBuilder(); while (!stack.isEmpty()){ sb.append(stack.pop() + &quot; &quot;); } return sb.toString().trim(); }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Stack</tag>
        <tag>substring()</tag>
        <tag>泛型</tag>
        <tag>单引号</tag>
        <tag>双引号</tag>
        <tag>151</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 1, Day 3, 3/12/2019]]></title>
    <url>%2F2019%2F03%2F12%2FDay-03%2F</url>
    <content type="text"><![CDATA[L&#x770B;&#x4EBA;&#x4E0B;&#x83DC;&#x789F;&#xFF0C;&#x552F;&#x6709;&#x81EA;&#x5DF1;&#x5F3A;&#x5927;&#x624D;&#x80FD;&#x4E0D;&#x88AB;&#x627E;&#x832C;&#x3002;X&#x654F;&#x611F;&#x591A;&#x7591;&#x65E0;&#x7406;&#x6027;&#x601D;&#x7EF4;&#xFF0C;&#x552F;&#x6709;&#x8EB2;&#x7740;&#x70B9;&#x624D;&#x80FD;&#x907F;&#x514D;&#x51B2;&#x7A81;&#x3002; int&#x6EA2;&#x51FA; &#x4EE3;&#x7801;&#xFF1A; int a = 2147483647; System.out.println(a); int b = a + 1; System.out.println(b); &#x7ED3;&#x679C;&#xFF1A; 2147483647 -2147483648 Reason: int&#x7C7B;&#x578B;&#x4E8C;&#x8FDB;&#x5236;&#x5B58;&#x50A8;&#x7684;&#x7B2C;&#x4E00;&#x4F4D;&#x4E3A;&#x7B26;&#x53F7;&#x4F4D;&#xFF0C;0&#x8868;&#x793A;&#x6B63;&#x6570;&#xFF0C;1&#x8868;&#x793A;&#x8D1F;&#x6570;&#xFF0C;2147483647&#x8FD9;&#x4E2A;&#x6570;&#x5B57;&#x7684;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x8868;&#x8FBE;&#x4E3A;01111111111111111111111111111111,&#x52A0;1&#x4EE5;&#x540E;&#x7684;&#x503C;&#x4E3A;10000000000000000000000000000000,&#x800C;10000000000000000000000000000000&#x8868;&#x793A;&#x7684;&#x662F;-2147483648&#x8FD9;&#x4E2A;&#x6570;&#x5B57;. Ref:Java&#x6574;&#x5F62;&#x6EA2;&#x51FA;&#x5904;&#x7406;&#x673A;&#x5236; LeetCode - 163 (0 Easy, 1 Medium, 0 Hard) 163. Missing Ranges - Medium 12345678910111213141516171819202122232425262728293031323334353637383940414243class Solution { public List&lt;String&gt; findMissingRanges(int[] nums, int lower, int upper) { List&lt;String&gt; result = new ArrayList&lt;&gt;(); if(nums.length == 0){ result.add(group(lower, upper)); return result; } // base case int start = nums[0]; int end = nums[0]; if(start != lower){ end = start-1; start = lower; result.add(group(start, end)); } // general case for (int i=1; i &lt; nums.length; i++){ if(nums[i] != nums[i-1] &amp;&amp; nums[i] != nums[i-1]+1){ //&#x5982;&#x679C;&#x5199;&#x6210; nums[i]&gt;nums[i-1]+1&#x4F1A;&#x8FC7;&#x4E0D;&#x4E86;&#x4E0B;&#x9762;&#x7684;test case start = nums[i-1]+1; end = nums[i] - 1; result.add(group(start, end)); } } if(nums[nums.length - 1] != upper){ result.add(group(nums[nums.length - 1]+1, upper)); } return result; } private String group(int start, int end){ if (start == end){ return start + &quot;&quot;; }else{ return start + &quot;-&gt;&quot; + end; } }} Input: [-2147483648,-2147483648,0,2147483647,2147483647] -2147483648 2147483647 Output: [&quot;-2147483647-&gt;-1&quot;,&quot;1-&gt;2147483646&quot;,&quot;-2147483648-&gt;2147483646&quot;] Expected: [&quot;-2147483647-&gt;-1&quot;,&quot;1-&gt;2147483646&quot;] &#x4EE3;&#x7801;&#xFF1A; int a = 2147483647; System.out.println(a); int b = a + 1; System.out.println(b); &#x7ED3;&#x679C;&#xFF1A; 2147483647 -2147483648 Reason: int&#x7C7B;&#x578B;&#x4E8C;&#x8FDB;&#x5236;&#x5B58;&#x50A8;&#x7684;&#x7B2C;&#x4E00;&#x4F4D;&#x4E3A;&#x7B26;&#x53F7;&#x4F4D;&#xFF0C;0&#x8868;&#x793A;&#x6B63;&#x6570;&#xFF0C;1&#x8868;&#x793A;&#x8D1F;&#x6570;&#xFF0C;2147483647&#x8FD9;&#x4E2A;&#x6570;&#x5B57;&#x7684;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x8868;&#x8FBE;&#x4E3A;01111111111111111111111111111111,&#x52A0;1&#x4EE5;&#x540E;&#x7684;&#x503C;&#x4E3A;10000000000000000000000000000000,&#x800C;10000000000000000000000000000000&#x8868;&#x793A;&#x7684;&#x662F;-2147483648&#x8FD9;&#x4E2A;&#x6570;&#x5B57;. Ref:Java&#x6574;&#x5F62;&#x6EA2;&#x51FA;&#x5904;&#x7406;&#x673A;&#x5236; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>int溢出</tag>
        <tag>163</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 1, Day 2, 3/11/2019]]></title>
    <url>%2F2019%2F03%2F11%2FDay-02%2F</url>
    <content type="text"><![CDATA[&#x5C0F;&#x767D;&#x7684;&#x8DEF;&#x7EBF;&#xFF0C;&#x5237;&#x9898;&#x524D;&#x671F;&#x5B66;&#x4E60;Java&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#xFF0C;&#x540E;&#x671F;&#x7B97;&#x6CD5;&#x8FDB;&#x9636;&#x3002; StringBuilder? StringBuffer? String? String &#x7C7B;&#x578B;&#x7684;&#x5BF9;&#x8C61;&#x4E0D;&#x53EF;&#x53D8;&#xFF0C;&#x5728;&#x6BCF;&#x6B21;&#x5BF9;&#x8BE5;&#x5BF9;&#x8C61;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#x7684;&#x65F6;&#x5019;&#x76F8;&#x5F53;&#x4E8E;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;String&#x5BF9;&#x8C61;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x628A;&#x6307;&#x9488;&#x6307;&#x5411;&#x65B0;&#x7684;&#x5BF9;&#x8C61;&#x3002;&#x6240;&#x4EE5;&#x5982;&#x679C;&#x9700;&#x8981;&#x7ECF;&#x5E38;&#x6539;&#x53D8;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x4E0D;&#x8981;&#x7528;String&#x3002;StringBuilder&#x662F;&#x975E;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x7684;&#x3002; String &#x5B57;&#x7B26;&#x4E32;&#x5E38;&#x91CF; StringBuffer &#x5B57;&#x7B26;&#x4E32;&#x53D8;&#x91CF;&#xFF08;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#xFF09; StringBuilder &#x5B57;&#x7B26;&#x4E32;&#x53D8;&#x91CF;&#xFF08;&#x975E;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;) Ref: String&#x3001;StringBuilder&#x3001;StringBuffer &#x7528;&#x6CD5;&#x6BD4;&#x8F83; &#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x662F;&#x4EC0;&#x4E48; &#x5141;&#x8BB8;&#x88AB;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x540C;&#x65F6;&#x6267;&#x884C;&#x7684;&#x4EE3;&#x7801;&#x79F0;&#x4F5C;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x7684;&#x4EE3;&#x7801;, &#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x540C;&#x65F6;&#x83B7;&#x53D6;&#x540C;&#x4E00;&#x4E2A;&#x8D44;&#x6E90;&#x3002; Ref: Java&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x548C;&#x975E;&#x7EBF;&#x7A0B;&#x5B89;&#x5168; &#x4E3A;&#x4EC0;&#x4E48;string.length()&#x540E;&#x9762;&#x6709;&#x62EC;&#x53F7;&#xFF0C;&#x800C;int[]&#x8C03;&#x7528;length&#x4E0D;&#x9700;&#x8981;&#x62EC;&#x53F7; &#x9700;&#x8981;&#x52A0;(&#xFF09;&#x7684;&#x662F;&#x65B9;&#x6CD5;&#xFF08;&#x6216;&#x8005;&#x53EB;&#x51FD;&#x6570;&#xFF09;&#xFF0C;&#x4E0D;&#x52A0;() &#x76F4;&#x63A5;&#x7528;&#x540D;&#x5B57;&#x5C31;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x7ED3;&#x679C;&#x7684;&#x53EB;&#x5C5E;&#x6027;&#xFF1B;&#x65B9;&#x6CD5;&#x662F;&#x5BF9;&#x672A;&#x77E5;&#x7684;&#x4E1C;&#x897F;&#x53BB;&#x6267;&#x884C;&#x6C42;&#x7ED3;&#x679C;&#xFF0C;&#x5C5E;&#x6027;&#x662F;&#x5BF9;&#x5DF2;&#x77E5;&#x7684;&#x4E1C;&#x897F;&#x8BFB;&#x53D6;&#x51FA;&#x6765;&#x3002; List&#x4E0E;ArrayList&#x7684;&#x533A;&#x522B; &#x770B;&#x7684;&#x61F5;&#x61F5;&#x61C2;&#x61C2;&#xFF0C;&#x4EE5;&#x540E;&#x660E;&#x767D;&#x4E86;&#x518D;&#x8865;&#x5145;&#x5427;&#x3002;&#x5148;&#x505A;&#x5B8C;&#x4ECA;&#x5929;&#x7684;&#x9898;&#x3002; Ref: List&#x4E0E;ArrayList&#x7684;&#x533A;&#x522B; java&#x4F5C;&#x7528;&#x57DF;public, private, protected &#x53CA;&#x4E0D;&#x5199;&#x65F6;&#x7684;&#x533A;&#x522B; &#x5728;&#x8BF4;&#x660E;&#x8FD9;&#x56DB;&#x4E2A;&#x5173;&#x952E;&#x5B57;&#x4E4B;&#x524D;&#xFF0C;&#x6211;&#x60F3;&#x5C31;class&#x4E4B;&#x95F4;&#x7684;&#x5173;&#x7CFB;&#x505A;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x5B9A;&#x4E49;&#xFF0C;&#x5BF9;&#x4E8E;&#x7EE7;&#x627F;&#x81EA;&#x5DF1;&#x7684;class&#xFF0C;base class&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x4ED6;&#x4EEC;&#x90FD;&#x662F;&#x81EA;&#x5DF1;&#x7684;&#x5B50;&#x5973;&#xFF0C;&#x800C;&#x5BF9;&#x4E8E;&#x548C;&#x81EA;&#x5DF1;&#x4E00;&#x4E2A;&#x76EE;&#x5F55;&#x4E0B;&#x7684;classes&#xFF0C;&#x8BA4;&#x4E3A;&#x90FD;&#x662F;&#x81EA;&#x5DF1;&#x7684;&#x670B;&#x53CB;&#x3002; public&#xFF1A;public&#x8868;&#x660E;&#x8BE5;&#x6570;&#x636E;&#x6210;&#x5458;&#x3001;&#x6210;&#x5458;&#x51FD;&#x6570;&#x662F;&#x5BF9;&#x6240;&#x6709;&#x7528;&#x6237;&#x5F00;&#x653E;&#x7684;&#xFF0C;&#x6240;&#x6709;&#x7528;&#x6237;&#x90FD;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x8FDB;&#x884C;&#x8C03;&#x7528; private&#xFF1A;private&#x8868;&#x793A;&#x79C1;&#x6709;&#xFF0C;&#x79C1;&#x6709;&#x7684;&#x610F;&#x601D;&#x5C31;&#x662F;&#x9664;&#x4E86;class&#x81EA;&#x5DF1;&#x4E4B;&#x5916;&#xFF0C;&#x4EFB;&#x4F55;&#x4EBA;&#x90FD;&#x4E0D;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#xFF0C;&#x79C1;&#x6709;&#x8D22;&#x4EA7;&#x795E;&#x5723;&#x4E0D;&#x53EF;&#x4FB5;&#x72AF;&#x561B;&#xFF0C;&#x5373;&#x4FBF;&#x662F;&#x5B50;&#x5973;&#xFF0C;&#x670B;&#x53CB;&#xFF0C;&#x90FD;&#x4E0D;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x3002; protected&#xFF1A;protected&#x5BF9;&#x4E8E;&#x5B50;&#x5973;&#x3001;&#x670B;&#x53CB;&#x6765;&#x8BF4;&#xFF0C;&#x5C31;&#x662F;public&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x81EA;&#x7531;&#x4F7F;&#x7528;&#xFF0C;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x9650;&#x5236;&#xFF0C;&#x800C;&#x5BF9;&#x4E8E;&#x5176;&#x4ED6;&#x7684;&#x5916;&#x90E8;class&#xFF0C;protected&#x5C31;&#x53D8;&#x6210;private&#x3002; &#x4F5C;&#x7528;&#x57DF; &#x5F53;&#x524D;&#x7C7B; &#x540C;&#x4E00;package &#x5B50;&#x5B59;&#x7C7B; &#x5176;&#x4ED6;package public &#x2714;&#xFE0F; &#x2714;&#xFE0F; &#x2714;&#xFE0F; &#x2714;&#xFE0F; protected &#x2714;&#xFE0F; &#x2714;&#xFE0F; &#x2714;&#xFE0F; &#x2716;&#xFE0F; friendly &#x2714;&#xFE0F; &#x2714;&#xFE0F; &#x2716;&#xFE0F; &#x2716;&#xFE0F; private &#x2714;&#xFE0F; &#x2716;&#xFE0F; &#x2716;&#xFE0F; &#x2716;&#xFE0F; &#x4E0D;&#x5199;&#x65F6;&#x9ED8;&#x8BA4;&#x4E3A;friendly Ref: java&#x4F5C;&#x7528;&#x57DF;public ,private ,protected &#x53CA;&#x4E0D;&#x5199;&#x65F6;&#x7684;&#x533A;&#x522B; LeetCode - 38, 228 (1 Easy, 1 Medium, 0 Hard) 38. Count and Say - Easy 123456789101112131415161718192021222324252627class Solution { public String countAndSay(int n) { String result = &quot;1&quot;; for (int row = 2; row &lt;= n; row++){ // base case StringBuilder sb = new StringBuilder(); int cnt = 1; // general case for(int i=1; i &lt; result.length(); i++){ if(result.charAt(i-1) == result.charAt(i)){ cnt ++; }else{ sb.append(cnt); sb.append(result.charAt(i-1)); cnt=1; } } sb.append(cnt); sb.append(result.charAt(result.length()-1)); result = sb.toString(); } return result; }} 228. Summary Ranges - Medium 123456789101112131415161718192021222324252627282930class Solution { public List&lt;String&gt; summaryRanges(int[] nums) { if(nums.length == 0){ return new ArrayList&lt;&gt;(); } // base case List&lt;String&gt; result = new ArrayList&lt;&gt;(); int start = nums[0]; for(int i=1; i &lt; nums.length; i++){ if(nums[i-1] + 1 &lt; nums[i]){ result.add(group(start, nums[i-1])); start = nums[i]; } } // g -&gt; f result.add(group(start, nums[nums.length - 1])); return result; } private String group (int start, int end){ if (start == end){ return start+&quot;&quot;; // int -&gt; string }else{ return start + &quot;-&gt;&quot; + end; } }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>StringBuilder</tag>
        <tag>String</tag>
        <tag>StringBuffer</tag>
        <tag>线程安全</tag>
        <tag>属性与方法</tag>
        <tag>List和ArrayList</tag>
        <tag>作用域</tag>
        <tag>38</tag>
        <tag>228</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Summary_LeetCode]]></title>
    <url>%2F2019%2F03%2F10%2FSummary-LeetCode%2F</url>
    <content type="text"><![CDATA[22/1003, 16 days (3 Easy, 15 Medium, 4 Hard) &#x9E21;&#x6C64;&#xFF1A; &#x6BCF;&#x5929;&#x82B1;&#x8D39;&#x65F6;&#x95F4;&#xFF1A; &#x6728;&#x6709;&#x57FA;&#x7840;&#x600E;&#x4E48;&#x529E;&#xFF1F; &#x70E6;&#x8E81;&#x4E86;&#x600E;&#x4E48;&#x529E;&#xFF1F; &#x1F4AA; Day 1: 26, 27, 80 (2 Easy, 1 Medium, 0 Hard) Day 2: 38, 228 (1 Easy, 1 Medium, 0 Hard) Day 3: 163 (0 Easy, 1 Medium, 0 Hard) Day 4: 151 (0 Easy, 1 Medium, 0 Hard) Day 5: 205, 299 (1 Easy, 1 Medium, 0 Hard) Day 6: 36 (0 Easy, 1 Medium, 0 Hard) Day 7: 554 (0 Easy, 1 Medium, 0 Hard) Day 8: 781 (0 Easy, 1 Medium, 0 Hard) Day 9: 356 (0 Easy, 1 Medium, 0 Hard) Day 10: &#x72B6;&#x6001;&#x4E0D;&#x597D;&#xFF0C;&#x7279;&#x522B;&#x4E4F;&#xFF0C;&#x53EA;&#x590D;&#x4E60;&#x4E86;&#xFF0C;&#x6CA1;&#x505A;&#x65B0;&#x9898; Day 11: 735 1&#xFE0F;&#x20E3; (0 Easy, 1 Medium, 0 Hard) Day 12: &#x4F11;&#x606F; Day 13: &#x4F11;&#x606F; Day 14: 636 1&#xFE0F;&#x20E3;, 71 1&#xFE0F;&#x20E3;, 385 1&#xFE0F;&#x20E3;(0 Easy, 3 Medium, 0 Hard) Day 15: 353 1&#xFE0F;&#x20E3; (0 Easy, 1 Medium, 0 Hard) Day 16: 239, 729, 295 (0 Easy, 1 Medium, 2 Hard) Day 17: 23, 358 (0 Easy, 0 Medium, 2 Hard) &#x1F447; &#x2714;&#xFE0F; pass &#x2757;&#xFE0F; need further review &#x2712;&#xFE0F; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 &#x2757;&#xFE0F;23 24 25 &#x2714;&#xFE0F; 26 &#x2714;&#xFE0F; 27 28 29 30 31 32 33 34 35 &#x2757;&#xFE0F;36 37 &#x2757;&#xFE0F;38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 &#x2757;&#xFE0F;71 72 73 74 75 76 77 78 79 &#x2714;&#xFE0F; 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 &#x2757;&#xFE0F; 151 152 153 154 155 156 157 158 159 160 161 162 &#x2757;&#xFE0F;163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 &#x2757;&#xFE0F; 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 &#x2757;&#xFE0F;228 229 230 231 232 233 234 235 236 237 238 &#x2757;&#xFE0F;239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 &#x2757;&#xFE0F;295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 &#x2757;&#xFE0F;356 357 &#x2757;&#xFE0F;358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 &#x2757;&#xFE0F;385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 &#x2757;&#xFE0F;554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 &#x2757;&#xFE0F;636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 &#x2757;&#xFE0F;729 730 731 732 733 734 &#x2757;&#xFE0F;735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 &#x2757;&#xFE0F;781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 1, Day 1, 3/10/2019]]></title>
    <url>%2F2019%2F03%2F10%2FDay-01%2F</url>
    <content type="text"><![CDATA[&#x4F60;&#x5230;&#x5E95;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x80FD;&#x8F6C;&#x884C;&#x6210;&#x529F;&#xFF1F; LeetCode - 26, 27, 80 (2 Easy, 1 Medium, 0 Hard) 26. Remove Duplicates from Sorted Array - Easy 1234567891011121314151617class Solution { public int removeDuplicates(int[] nums) { if(nums.length == 0){ return 0; } int end = 0; for (int i = 1; i &lt; nums.length; i++){ if (nums[end] != nums[i]){ end ++; nums[end] = nums[i]; } } return end+1; }} 27. Remove Element - Easy 1234567891011121314151617class Solution { public int removeElement(int[] nums, int val) { if(nums.length == 0){ return 0; } int end = 0; //&#x8FD8;&#x53EF;&#x4EE5;&#x5047;&#x60F3;&#x4E00;&#x4E2A;-1&#x4F4D;element&#xFF0C;&#x8FD9;&#x6837;end=-1&#xFF0C;&#x4E0B;&#x9762;&#x5148;end++&#x518D;&#x8D4B;&#x503C; for (int i = 0; i &lt; nums.length; i++){ if(nums[i] != val){ nums[end] = nums[i]; end++; } } return end; }} 80. Remove Duplicates from Sorted Array II - Medium &#x6211;&#x7684; 1234567891011121314151617181920212223242526class Solution { public int removeDuplicates(int[] nums) { if(nums.length == 0){ return 0; } int end = 0; int count = 1; for (int i = 1; i &lt; nums.length; i++){ if (count == 1){ if (nums[i] == nums[end]){ count++; } end++; nums[end] = nums[i]; }else{ if(nums[i] != nums[end]){ end ++; nums[end] = nums[i]; count = 1; } } } return end+1; }} &#x8001;&#x5E08;&#x7684; 12345678910111213141516class Solution { public int removeDuplicates(int[] nums) { if (nums.length &lt;= 2){ return nums.length; } int end = 1; for (int i = 2; i &lt; nums.length; i ++){ if(nums[end-1] != nums[i]){ end ++; nums[end] = nums[i]; } } return end+1; }} &#x660E;&#x5929;&#x5B66;StringBuilder document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>26</tag>
        <tag>27</tag>
        <tag>80</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[买房策略]]></title>
    <url>%2F2018%2F09%2F14%2F%E4%B9%B0%E6%88%BF%E7%AD%96%E7%95%A5%2F</url>
    <content type="text"><![CDATA[9/14/2018: &#x5F53;&#x4E0B;&#x7684;&#x7B56;&#x7565;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5E0C;&#x671B;&#x4EE5;&#x540E;&#x53EF;&#x4EE5;&#x8D8A;&#x6765;&#x8D8A;&#x5B8C;&#x5584;&#x3002; list price &gt; budget hot home: don&apos;t need to have a tour not hot home: wait &#x1F44A; list price &lt; budget hot home: hurry not hot home: lowball Updated: &#x6700;&#x540E;&#x4E70;&#x5230;&#x4E86;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#x6709;&#x4E9B;&#x504F;&#x8FDC;&#x4F46;&#x662F;&#x6709;&#x5B66;&#x533A;&#x7684;&#x623F;&#x5B50;&#x3002;&#x56E0;&#x4E3A;&#x623F;&#x4E1C;&#x4E00;&#x76F4;&#x4E0D;&#x613F;&#x610F;&#x964D;&#x4EF7;&#xFF0C;&#x623F;&#x5B50;list&#x4E86;&#x5F88;&#x4E45;&#x6CA1;&#x6709;&#x5356;&#x51FA;&#x53BB;&#x3002;&#x5F53;list price&#x518D;&#x6B21;&#x4E0B;&#x8C03;&#x65F6;&#xFF0C;&#x6211;&#x7ACB;&#x523B;&#x7EA6;&#x4E86;agent&#x53BB;&#x770B;&#xFF0C;&#x5546;&#x91CF;&#x8FC7;&#x540E;&#x51B3;&#x5B9A;&#x4E0B;&#x4E2A;offer&#x3002;&#x51E0;&#x6B21;&#x8BA8;&#x4EF7;&#x8FD8;&#x4EF7;&#x4E4B;&#x540E;&#x62FF;&#x4E0B;&#x4E86;&#x623F;&#x5B50;&#x3002;&#x505A;loan&#x7684;&#x8FC7;&#x7A0B;&#x6BD4;&#x8F83;&#x6076;&#x5FC3;&#xFF0C;&#x5BC4;&#x5E0C;&#x671B;&#x4E8E;&#x4E4B;&#x540E;&#x7684; refinance&#x5427;&#x3002;&#x65E0;&#x8BBA;&#x5982;&#x4F55;&#xFF0C;&#x4E70;&#x5230;&#x4E86;&#x5C31;&#x5F00;&#x5F00;&#x5FC3;&#x5FC3;&#x7684;enjoy&#x5427;&#xFF01; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>House</category>
      </categories>
      <tags>
        <tag>House</tag>
        <tag>Strategy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[My first post]]></title>
    <url>%2F2018%2F09%2F13%2FMy-first-post%2F</url>
    <content type="text"><![CDATA[&#x6700;&#x8FD1;&#x5728;&#x770B;&#x521B;&#x4E16;&#x7EAA;&#xFF0C;&#x5F88;&#x662F;&#x559C;&#x6B22;&#x6587;&#x5F6A;&#xFF0C;&#x4EE5;&#x4ED6;&#x7684;&#x540D;&#x5B57;&#x521B;&#x5EFA;&#x4E2A;blog&#xFF0C;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B;&#x6211;&#x81EA;&#x5DF1;&#x7684;&#x751F;&#x6D3B;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
</search>
