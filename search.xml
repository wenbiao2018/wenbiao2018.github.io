<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[8052019]]></title>
    <url>%2F2019%2F08%2F05%2F8052019%2F</url>
    <content type="text"><![CDATA[LeetCode 26 12345678910111213141516class Solution { public int removeDuplicates(int[] nums) { if(nums.length == 0){ return 0; } int end = 0; for(int num:nums){ if(num != nums[end]){ end++; nums[end] = num; } } return end+1; }} 80 1234567891011121314151617class Solution { public int removeDuplicates(int[] nums) { if(nums.length &lt;= 2){ return nums.length; } int end = 1; for(int i=2; i&lt;nums.length; i++){ int num = nums[i]; if(num != nums[end-1]){ end++; nums[end] = num; } } return end+1; }} 198 123456789101112131415161718class Solution { public int rob(int[] nums) { if(nums.length == 0){ return 0; } int pre2 = 0; int pre1 = 0; for(int num:nums){ int cur = Math.max(pre2+num, pre1); pre2 = pre1; pre1 = cur; } return pre1; }} 276 1234567891011121314151617181920212223242526class Solution { public int numWays(int n, int k) { int result = 0; if(n&lt;=0){ return result; } int pre_same = k; int pre_diff = k*(k-1); if(n == 1){ return k; }else if(n == 2){ return k*k; } while(n&gt;2){ int cur_diff = pre_same*(k-1) + pre_diff*(k-1); int cur_same = pre_diff; pre_same = cur_same; pre_diff = cur_diff; n--; } return pre_same + pre_diff; }} 132 &#x548C;&#x8001;&#x5E08;&#x4E00;&#x6837; 1234567891011121314151617181920212223242526272829303132class Solution { public int minCut(String s) { int[] result = new int[s.length()]; for(int i=1; i&lt;s.length(); i++){ if(isPal(s, 0, i)){ continue; } result[i] = Integer.MAX_VALUE; for(int j=0; j&lt;i; j++){ if(isPal(s, j+1, i)){ result[i] = Math.min(result[j] + 1, result[i]); } } } return result[s.length()-1]; } private boolean isPal(String s, int start, int end){ while(start &lt;= end){ if(s.charAt(start) != s.charAt(end)){ return false; } start++; end--; } return true; }} &#x6211;&#x81EA;&#x5DF1;&#x7A0D;&#x5FAE;&#x6709;&#x70B9;&#x9EBB;&#x70E6;&#x7684;&#x65B9;&#x6CD5; 123456789101112131415161718192021222324252627282930313233343536373839404142class Solution { public int minCut(String s) { int[] result = new int[s.length()]; if(s.length() &lt;= 1){ return 0; } result[0] = 0; for(int i=1; i&lt;s.length(); i++){ int cur_result = Integer.MAX_VALUE; for(int j=0; j&lt;i; j++){ if(ifPalindrome(s.substring(j, i+1))){ if(j&gt;0){ cur_result = Math.min(result[j-1]+1, cur_result); }else{ cur_result = Math.min(0, cur_result); } } } result[i] = Math.min(result[i-1]+1, cur_result); } return result[s.length()-1]; } public boolean ifPalindrome(String subS){ int start = 0; int end = subS.length()-1; while(start &lt; end){ if(subS.charAt(start) != subS.charAt(end)){ return false; } start++; end--; } return true; } } document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>26</tag>
        <tag>80</tag>
        <tag>198</tag>
        <tag>276</tag>
        <tag>132</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[8022019]]></title>
    <url>%2F2019%2F08%2F03%2F8022019%2F</url>
    <content type="text"><![CDATA[document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>27</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Planning for 2nd Half of 2019]]></title>
    <url>%2F2019%2F08%2F02%2FPlanning-for-2nd-Half-of-2019%2F</url>
    <content type="text"><![CDATA[&#x53C8;&#x662F;&#x8BF4;&#x6765;&#x60ED;&#x6127;&#xFF0C;&#x8DDD;&#x79BB;&#x4E0A;&#x6B21;&#x60F3;&#x5F00;&#x59CB;Round 2&#x5DF2;&#x7ECF;&#x53C8;&#x4E00;&#x4E2A;&#x6708;&#x4E86;&#xFF0C;&#x4E00;&#x70B9;&#x6CA1;&#x6709;&#x8BB0;&#x5F55;&#x3002;&#x6700;&#x8FD1;&#x5728;&#x8FDB;&#x884C;&#x6B63;&#x5FF5;&#x4FEE;&#x884C;&#xFF0C;&#x60F3;refresh&#x4E00;&#x4E0B;&#x81EA;&#x5DF1;&#xFF0C;&#x5728;&#x6B64;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B;&#x4E0B;&#x534A;&#x5E74;&#x8BA1;&#x5212;&#x3002; 2019 Goal: &#x8DF3;&#x69FD; -&gt; &#x8FDB;&#x5165;FLAG/Paypal/Ebay 8&#x6708;: &#x5237;200&#x9053;&#x9898; -&gt; &#x5956;&#x52B1;&#x81EA;&#x5DF1;lunolife mattress - update on 9/5: &#x5237;&#x4E86;100&#xFF0C;&#x4E70;&#x4E86;mattress 9&#x6708;: &#x6539;&#x7B80;&#x5386;&#xFF0C;&#x6295;&#x7B80;&#x5386; 10&#x6708;&#x5F00;&#x59CB;&#x9762;&#x8BD5; &#x89E3;&#x9898;&#x65B9;&#x6CD5; - &#x6570;&#x5B66;&#x5F52;&#x7EB3;&#x6CD5; DP DAG - BFS &amp; DFS &#x9700;&#x8981;&#x6478;&#x719F;&#x6A21;&#x677F; double linked list graph with circle - 210, 802, 269, &#x5237;&#x9898;&#x8FDB;&#x5EA6; 1. 8&#x6708; 8/5 - 8/11: 8/5: 27, 26, 80, 198, 276, 132, 283, 905, 520, 70, - 10 8/6: 717, 96, 91, 554, 265, 139, - 6 8/7: 609, - 1 8/8: 697, 288, 781, 356, 791, 387, - 6 8/9: 49, 438, - 2 8/10: 36, 249, 916, 748, 239, - 5 8/11: 480, 915, 295, 373, 739, 703, - 6 8&#x6708;&#x7B2C;&#x4E00;&#x5468; - 10+6+1+6+2+5+6 = 36 8/12 - 8/18: 8/12: 973, 846, 378, 668, 768, - 5 8/13: 915, 739, 239, 155, 353, - 5 8/14: 496, 503, 1063, 111, 104, 938, 1026, - 7 8/16: 156, 124, 337, 663, - 4 8/17: 333, 543, 814, 250, 549, - 5 8&#x6708;&#x7B2C;&#x4E8C;&#x5468; - 5+5+7+4+5 = 26 8/19 - 8/25: 8/19: 403, - 1 8/20: 656, 329, 457, 198, 954, - 5 8/21: 128, 1027, 337, 111, 38, 228, 163, 151, - 8 8/22: 68, 104, 1026, 443, 1060, 124, 71, - 7 8/24: 838, 636, 385, - 3 8/24: (redo-838, 636, 385;) 394, 722, - 2 8&#x6708;&#x7B2C;&#x4E09;&#x5468; - 1+5+8+7+3+2 = 26 8/26 - 9/1: 8/26: 592, 227, 224, 145, - 4 8/27: 501, - 1 8/30: 114, 1038, 590, 508, 430, 426, 210, - 7 8&#x6708;&#x5171; - 36+26+26+12 = 100 2. 9&#x6708;&#x7684;&#x8BA1;&#x5212;&#x8981;&#x6539;&#x4E00;&#x4E0B;&#x4E86; --&gt; &#x8DDF;&#x7740;ying&#x54E5;&#x505A;&#x9879;&#x76EE;&#xFF0C;&#x7EE7;&#x7EED;&#x5237;&#x9898; 9/2 - 9/8: 9/5: 802, 9/6: 139, 9/8: 269, 132, 9/18: 975, 451, 179, 56, 506 3. 10&#x6708;&#x7684;&#x8BA1;&#x5212;&#x8981;&#x6539;&#x4E00;&#x4E0B;&#x4E86; --&gt; &#x8DDF;&#x7740;ying&#x54E5;&#x505A;&#x9879;&#x76EE;&#xFF0C;&#x7EE7;&#x7EED;&#x5237;&#x9898; -- &#x60ED;&#x6127;&#x554A; 10/7 - 10/13 10/8: 259 10/18: 611, 881, 10/25: 16, 4. 11&#x6708; --&gt; &#x6BCF;&#x5929;at least 6&#x9053; 11/4 - 11/10 11/4: 435, 630, 853, 11/7: 1024 11/8: 826, 452, 539, 455, 23, 632 11/10: 253, 244, 1094, 988, 257, 129, 113, 797, 140, 131, 39, 1096, 238, 42, 84, 85, 316, 764, 907, 901, 1081, 402, 3, 340, 209, 713, 992, 643, 76, 763, 485, 221, 87, 562, 152, 3, 340, - 34 209, 76, 30, 134, 32, 560, 525, 304, 437, 325, 930, 523, 974, 108, 105, 1008, 22, 654, 980, 52, 254, 1091, 79, 37, 139, 78, 46, 247, 131, 91, 205, 299, 1023, 524, 244, 23, 986, 624, 208, 648, 139, 1032, 211, 676, 677, 212, 72, 10, 712, 44, 516, 1143, 115, 392, 727, 1035, 792, 946, 102, 199, 117, 863, 366, 103, 107, 513, 545, 854, 127, 72, 752, 433, 322, 417, 200, 827, 721, 695, 1020, 1034, 737, 827, 924, 934, 542, 286, 334, 367, 34, 1011, 374, 744, 875, 284, 281, 251, 604, 900, 173, 297, 449, 825 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <tags>
        <tag>201908</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Round 2 - Day 1 - 6/17/2019]]></title>
    <url>%2F2019%2F06%2F17%2FRound-2-Day-1%2F</url>
    <content type="text"><![CDATA[&#x4E00;&#x4E2A;&#x6708;&#x8FC7;&#x7684;&#x597D;&#x5FEB;&#x3002; &#x8BF4;&#x6765;&#x60ED;&#x6127;&#xFF0C;&#x6700;&#x8FD1;&#x53D1;&#x751F;&#x4E86;&#x597D;&#x591A;&#x4E8B;&#x60C5;&#xFF0C;&#x803D;&#x8BEF;&#x4E86;&#x5237;&#x9898;&#x8FDB;&#x7A0B;&#x3002;&#x670B;&#x53CB;&#x6765;&#x73A9;&#xFF0C;&#x88AB;&#x8FFD;&#x5C3E;&#x6691;&#x5047;&#x5F00;&#x5B66;&#xFF0C;&#x5237;&#x9898;&#x73ED;&#x5F00;&#x5B66;&#xFF0C;&#xFF0C;&#x4E70;&#x8F66;&#x3002; &#x73B0;&#x5728;&#x60F3;&#x6765;&#xFF0C;&#x81EA;&#x5236;&#x529B;&#x5DF2;&#x7ECF;&#x6BD4;&#x5E74;&#x8F7B;&#x65F6;&#x5019;&#x597D;&#x5F88;&#x591A;&#x4E86;&#x3002;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5404;&#x79CD;&#x610F;&#x5916;&#x60C5;&#x51B5;&#xFF0C;&#x662F;&#x53EF;&#x4EE5;&#x6309;&#x8BA1;&#x5212;&#x8FDB;&#x884C;&#x7684;&#x3002;&#x4E4B;&#x540E;&#x8981;&#x8BAD;&#x7EC3;&#x7684;&#x5C31;&#x662F;&#xFF0C;&#x9047;&#x5230;&#x8BA1;&#x5212;&#x4E4B;&#x5916;&#x7684;&#x65F6;&#x5019;&#x8981;&#x5982;&#x4F55;&#x8C03;&#x6574;&#x5FC3;&#x6001;&#xFF0C;&#x5982;&#x679C;&#x4FDD;&#x6301;&#x751F;&#x6D3B;&#x8282;&#x594F;&#x4E0D;&#x53D8;&#x3002; Binary Tree Traversal &#x6811;&#x7684;&#x4E09;&#x79CD;DFS&#x904D;&#x5386;&#xFF0C;&#x662F;&#x6307;&#x6309;&#x7167;&#x6839;&#x8282;&#x70B9;(&#x81EA;&#x5DF1;)&#x88AB;&#x8BBF;&#x95EE;&#x7684;&#x987A;&#x5E8F; Pre-Order&#xFF1A; &#x5148;&#x8BBF;&#x95EE;&#x6839;&#x8282;&#x70B9;&#xFF0C;&#x518D;&#x8BBF;&#x95EE;&#x5176;&#x5DE6;&#x53F3;&#x5B50;&#x6811;&#x3002;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;subtree&#xFF0C;&#x540C;&#x6837;&#x9002;&#x7528;&#x3002; In-Order&#xFF1A; &#x5148;&#x8BBF;&#x95EE;&#x5176;&#x5DE6;&#xFF0C;&#x518D;&#x4E2D;&#x95F4;&#xFF0C;&#x518D;&#x53F3;&#x5B50;&#x6811;&#x3002;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;subtree&#xFF0C;&#x540C;&#x6837;&#x9002;&#x7528;&#x3002; Post-Order&#xFF1A; &#x5148;&#x8BBF;&#x95EE;&#x5176;&#x5DE6;&#x53F3;&#x5B50;&#x6811;&#xFF0C;&#x518D;&#x4E2D;&#x95F4;&#x3002;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;subtree&#xFF0C;&#x540C;&#x6837;&#x9002;&#x7528;&#x3002; Ref: Binary Tree Traversal (Pre-order, In-order, Post-order) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>Binary Tree Traversal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 11, Day 74, 5/22/2019]]></title>
    <url>%2F2019%2F05%2F22%2FDay-74%2F</url>
    <content type="text"><![CDATA[LeetCode 265. Paint House 2 123456789101112131415161718192021222324252627282930313233343536373839404142class Solution { public int minCostII(int[][] costs) { if(costs.length == 0){ return 0; } int n = costs.length; int k = costs[0].length; PriorityQueue&lt;Node&gt; preHeap = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o1._cost, o2._cost)); for(int j=0; j&lt;k; j++){ preHeap.add(new Node(costs[0][j], j)); } for(int i=1; i&lt;n; i++){ Node minNode1 = preHeap.poll(); Node minNode2 = preHeap.poll(); preHeap.clear(); for(int j=0; j&lt;k; j++){ if(minNode1._index == j){ preHeap.add(new Node(costs[i][j] + minNode2._cost, j)); }else{ preHeap.add(new Node(costs[i][j] + minNode1._cost, j)); } } } return preHeap.peek()._cost; } private class Node{ int _cost; int _index; public Node(int cost, int index){ _cost = cost; _index = index; } }} 139 12345678910111213141516171819class Solution { public boolean wordBreak(String s, List&lt;String&gt; wordDict) { //boolean[] startP = new boolean[s.length()]; if(s.length() == 0){ return false; } List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); list.add(0); for(int i=0; i&lt;s.length(); i++){ for(int j=list.size()-1; j&gt;=0; j--){ if(wordDict.contains(s.substring(list.get(j), i+1))){ list.add(i+1); break; } } } return list.contains(s.length()); }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>265</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Day 73]]></title>
    <url>%2F2019%2F05%2F22%2FDay-73%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Day 72]]></title>
    <url>%2F2019%2F05%2F22%2FDay-72%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Day 71]]></title>
    <url>%2F2019%2F05%2F22%2FDay-71%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Day 70]]></title>
    <url>%2F2019%2F05%2F22%2FDay-70%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Day 69]]></title>
    <url>%2F2019%2F05%2F22%2FDay-69%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Day 68]]></title>
    <url>%2F2019%2F05%2F22%2FDay-68%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Day 67]]></title>
    <url>%2F2019%2F05%2F22%2FDay-67%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Day 66]]></title>
    <url>%2F2019%2F05%2F22%2FDay-66%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 10, Day 65, 5/13/2019]]></title>
    <url>%2F2019%2F05%2F13%2FDay-65%2F</url>
    <content type="text"><![CDATA[&#x52A0;&#x6CB9;&#x52A0;&#x6CB9;&#xFF01; LeetCode - (0 Easy, 1 Medium, 1 Hard) 85. Maximal Rectangle - Hard 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253class Solution { public int maximalRectangle(char[][] matrix) { int rowN = matrix.length; if(rowN == 0){ return 0; } int colN = matrix[0].length; int[] hist = new int[colN]; int result = 0; for(int i=0; i&lt;rowN; i++){ for(int j=0; j&lt;colN; j++){ if(matrix[i][j] == &apos;1&apos;){ hist[j]++; }else{ hist[j] = 0; } } result = Math.max(result, largestRectangle(hist)); } return result; } public int largestRectangle(int[] hist){ int n = hist.length; int[] left = new int[n]; int[] right = new int[n]; for(int i=0; i&lt;n; i++){ left[i] = i; while(left[i]-1 &gt;=0 &amp;&amp; hist[left[i]-1] &gt;= hist[i]){ left[i] = left[i]-1; } } for(int i=n-1; i&gt;=0; i--){ right[i] = i; while(right[i]+1 &lt; n &amp;&amp; hist[right[i]+1] &gt;= hist[i]){ right[i] = right[i]+1; } } int result = 0; for(int i=0; i&lt;n; i++){ result = Math.max(result, hist[i]*(right[i]-left[i]+1)); } return result; } } 304. Range Sum Query 2D - Immutable - Medium 123456789101112131415161718192021222324252627282930313233343536373839404142434445class NumMatrix { private int[][] sum; public NumMatrix(int[][] matrix) { int rowN = matrix.length; if(rowN == 0){ return; } int colN = matrix[0].length; sum = new int[rowN][colN]; for(int i=0; i&lt;rowN; i++){ for(int j=0; j&lt;colN; j++){ if(i==0 &amp;&amp; j==0){ sum[i][j] = matrix[i][j]; }else if(i==0){ sum[i][j] = sum[i][j-1] + matrix[i][j]; }else if(j==0){ sum[i][j] = sum[i-1][j] + matrix[i][j]; }else{ sum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + matrix[i][j]; } } } } public int sumRegion(int row1, int col1, int row2, int col2) { if(row1 == 0 &amp;&amp; col1 == 0){ return sum[row2][col2]; }else if(row1 == 0){ return sum[row2][col2] - sum[row2][col1-1]; }else if(col1 == 0){ return sum[row2][col2] - sum[row1-1][col2]; }else{ return sum[row2][col2] - sum[row1-1][col2] - sum[row2][col1-1] + sum[row1-1][col1-1]; } }}/** * Your NumMatrix object will be instantiated and called as such: * NumMatrix obj = new NumMatrix(matrix); * int param_1 = obj.sumRegion(row1,col1,row2,col2); */ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>85</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 9, Day 64, 5/12/2019]]></title>
    <url>%2F2019%2F05%2F12%2FDay-64%2F</url>
    <content type="text"><![CDATA[XR&#x8BF4;XY&#x65E0;&#x8BBA;&#x6BCF;&#x5929;&#x51E0;&#x70B9;&#x56DE;&#x5BB6;&#x90FD;&#x4F1A;&#x5237;&#x4E24;&#x9053;&#x9898;&#xFF0C;&#x5411;&#x4ED6;&#x5B66;&#x4E60;&#xFF01; LeetCode 84. Largest Rectangle in Histogram &#x590D;&#x6742;&#x5EA6;&#x6709;&#x70B9;&#x9AD8;&#xFF0C;&#x4F46;&#x662F;&#x4E00;&#x904D;&#x8FC7;&#x3002; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263class Solution { public int largestRectangleArea(int[] heights) { TreeMap&lt;Integer, List&lt;Integer&gt;&gt; map = new TreeMap&lt;&gt;(); for(int i=0; i&lt;heights.length; i++){ int cur = heights[i]; List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); if(map.containsKey(cur)){ list = map.get(cur); //set.add(i); } list.add(i); map.put(cur, list); } Iterator&lt;Map.Entry&lt;Integer, List&lt;Integer&gt;&gt;&gt; iter = map.entrySet().iterator(); int result = 0; if(!iter.hasNext()){ return result; } Map.Entry&lt;Integer, List&lt;Integer&gt;&gt; curE = iter.next(); int curH = curE.getKey(); List&lt;Integer&gt; curS = curE.getValue(); int length = heights.length; result = curH*length; TreeSet&lt;Integer&gt; miniHeap = new TreeSet&lt;&gt;(); for(int i=0; i&lt;curS.size();i++){ miniHeap.add(curS.get(i)); } while(iter.hasNext()){ curE = iter.next(); curH = curE.getKey(); curS = curE.getValue(); //System.out.println(&quot;miniHeap: &quot; + miniHeap); for(int i=0;i&lt;curS.size();i++){ int curI = curS.get(i); int floor = 0; int ceiling = heights.length-1; if(miniHeap.floor(curI) != null){ floor = miniHeap.floor(curI)+1; } if(miniHeap.ceiling(curI) != null){ ceiling = miniHeap.ceiling(curI)-1; } result = Math.max(result, curH*(ceiling-floor+1)); } miniHeap.addAll(curS); } return result; }} &#x8001;&#x5E08;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5176;&#x5B9E;&#x8DDF;&#x524D;&#x4E24;&#x5929;&#x7684;&#x9898;&#x7C7B;&#x4F3C;&#xFF0C;&#x8FD8;&#x662F;&#x8981;&#x505A;&#x5230;&#x4E3E;&#x4E00;&#x53CD;&#x4E09;&#x624D;&#x884C;&#x554A;&#x3002; 123456789101112131415161718192021222324252627282930class Solution { public int largestRectangleArea(int[] heights) { int result = 0; final int n = heights.length; int[] left = new int[n]; int[] right = new int[n]; for(int i=0; i&lt;n; i++){ left[i] = i; while(left[i] - 1 &gt;= 0 &amp;&amp; heights[left[i] - 1] &gt;= heights[i]){ left[i] = left[left[i] - 1]; } } for(int i=n-1; i&gt;=0; i--){ right[i] = i; while(right[i] + 1 &lt; n &amp;&amp; heights[right[i] + 1] &gt;= heights[i]){ right[i] = right[right[i] + 1]; } } for(int i=0; i&lt;n; i++){ result = Math.max(result, heights[i]*(right[i]-left[i]+1)); } return result; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>84</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 9, Day 63, 5/11/2019]]></title>
    <url>%2F2019%2F05%2F12%2FDay-63%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 9, Day 62, 5/10/2019]]></title>
    <url>%2F2019%2F05%2F12%2FDay-62%2F</url>
    <content type="text"><![CDATA[&#x8F66;total loss&#x4E86; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 9, Day 61, 5/9/2019]]></title>
    <url>%2F2019%2F05%2F12%2FDay-61%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 9, Day 60, 5/8/2019]]></title>
    <url>%2F2019%2F05%2F12%2FDay-60%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 9, Day 59, 5/7/2019]]></title>
    <url>%2F2019%2F05%2F12%2FDay-59%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F;&#xFF0C;&#x61F5;&#x903C;&#x4E86;&#x4E00;&#x5929;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 9, Day 58, 5/6/2019]]></title>
    <url>%2F2019%2F05%2F06%2FDay-58%2F</url>
    <content type="text"><![CDATA[&#x7EC8;&#x4E8E;&#x53C8;&#x53EF;&#x4EE5;&#x9759;&#x4E0B;&#x5FC3;&#x6765;&#x505A;&#x9898;&#x4E86;&#xFF0C;&#x8FD9;&#x611F;&#x89C9;&#x771F;&#x597D;&#x3002; &#x54CE;&#xFF0C;&#x4EBA;&#x751F;&#x554A;&#xFF0C;&#x5F00;&#x5F00;&#x5FC3;&#x5FC3;&#x7684;&#x5237;&#x4E86;&#x4E24;&#x9053;&#x9898;&#x4E4B;&#x540E;&#x56DE;&#x5BB6;&#xFF0C;&#x8C01;&#x77E5;&#x9053;&#x5728;&#x56DE;&#x5BB6;&#x7684;&#x8DEF;&#x4E0A;&#x7ADF;&#x7136;&#x88AB;&#x8FFD;&#x5C3E;&#x4E86; - edited on 5/12/2019 LeetCode - (0 Easy, 1 Medium, 1 Hard) 42. Trapping Rain Water - Hard 1234567891011121314151617181920212223242526272829class Solution { public int trap(int[] height) { int len = height.length; if(len &lt;= 2 ){ return 0; } int[] lH = new int[len]; int[] rH = new int[len]; lH[0] = height[0]; rH[len-1] = height[len-1]; for(int i=1; i&lt;height.length; i++){ lH[i] = Math.max(lH[i-1], height[i]); rH[len-1-i] = Math.max(rH[len-i], height[len-i-1]); } int result = 0; for(int i = 0; i &lt; len; i++){ result += Math.min(lH[i], rH[i]) - height[i]; } return result; }} 11. Container With Most Water - Medium &#x5408;&#x7406;&#x6027;&#x89E3;&#x91CA;&#xFF1A;&#x5F53;&#x5DE6;&#x7AEF;&#x7EBF;&#x6BB5;L&#x5C0F;&#x4E8E;&#x53F3;&#x7AEF;&#x7EBF;&#x6BB5;R&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x628A;L&#x53F3;&#x79FB;&#xFF0C;&#x8FD9;&#x65F6;&#x820D;&#x5F03;&#x7684;&#x662F;L&#x4E0E;&#x53F3;&#x7AEF;&#x5176;&#x4ED6;&#x7EBF;&#x6BB5;&#xFF08;R-1, R-2, ...&#xFF09;&#x7EC4;&#x6210;&#x7684;&#x6728;&#x6876;&#xFF0C;&#x8FD9;&#x4E9B;&#x6728;&#x6876;&#x662F;&#x6CA1;&#x5FC5;&#x8981;&#x5224;&#x65AD;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x4E9B;&#x6728;&#x6876;&#x7684;&#x5BB9;&#x79EF;&#x80AF;&#x5B9A;&#x90FD;&#x6CA1;&#x6709;L&#x548C;R&#x7EC4;&#x6210;&#x7684;&#x6728;&#x6876;&#x5BB9;&#x79EF;&#x5927;&#x3002; 1234567891011121314151617181920212223class Solution { public int maxArea(int[] height) { if(height.length &lt; 2){ return 0; } int start = 0; int end = height.length -1; int result = Integer.MIN_VALUE; while(start != end){ result = Math.max((end-start)*Math.min(height[start], height[end]), result); if(height[start] &lt;= height[end]){ start++; }else{ end--; } } return result; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>42</tag>
        <tag>11</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 8, Day 57, 5/5/2019]]></title>
    <url>%2F2019%2F05%2F06%2FDay-57%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F;&#x4E86;&#x4E00;&#x5468;&#x4E86; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 8, Day 56, 5/4/2019]]></title>
    <url>%2F2019%2F05%2F06%2FDay-56%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 8, Day 55, 5/3/2019]]></title>
    <url>%2F2019%2F05%2F06%2FDay-55%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 8, Day 54, 5/2/2019]]></title>
    <url>%2F2019%2F05%2F06%2FDay-54%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 8, Day 53, 5/1/2019]]></title>
    <url>%2F2019%2F05%2F01%2FDay-53%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 8, Day 52, 4/30/2019]]></title>
    <url>%2F2019%2F05%2F01%2FDay-52%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 8, Day 51, 4/29/2019]]></title>
    <url>%2F2019%2F05%2F01%2FDay-51%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 7, Day 50, 4/28/2019]]></title>
    <url>%2F2019%2F05%2F01%2FDay-50%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 7, Day 49, 4/27/2019]]></title>
    <url>%2F2019%2F05%2F01%2FDay-49%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 7, Day 48, 4/26/2019]]></title>
    <url>%2F2019%2F05%2F01%2FDay-48%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 7, Day 47, 4/25/2019]]></title>
    <url>%2F2019%2F04%2F25%2FDay-47%2F</url>
    <content type="text"><![CDATA[&#x5F88;&#x597D;&#xFF0C;&#x5F88;&#x597D;&#xFF0C;&#x7EC8;&#x4E8E;&#x53C8;&#x8FDE;&#x7EED;&#x4E24;&#x5929;&#x6765;&#x505A;&#x9898;&#x4E86;&#x3002;&#x4ECA;&#x65E9;&#x8FD8;&#x53BB;&#x6E38;&#x6CF3;&#x4E86;&#xFF0C;&#x867D;&#x7136;&#x624D;&#x6709;&#x4E86;&#x4E09;&#x5708;&#xFF0C;&#x4F46;&#x662F;&#x4E5F;&#x6BD4;&#x4E0D;&#x53BB;&#x597D;&#x3002;&#x4F60;&#x8BF4;&#x662F;&#x4E0D;&#x662F;&#x3002; LeetCode - (0 Easy, 3 Medium, 0 Hard) 325. Maximum Size Subarray Sum Equals k - Medium &#x4E00;&#x6B21;&#x8FC7;&#xFF01; 123456789101112131415161718192021222324class Solution { public int maxSubArrayLen(int[] nums, int k) { Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); int result = 0; int sum = 0; for(int i = 0; i&lt;nums.length; i++){ sum += nums[i]; if(sum == k){ result = Math.max(result, i+1); } if(map.containsKey(sum-k)){ result = Math.max(result, i-map.get(sum-k)); } if(!map.containsKey(sum)){ map.put(sum, i); } } return result; }} 523. Continuous Subarray Sum - Medium - 1st 58 mins &#x4E00;&#x5F00;&#x59CB;&#x7684;&#x601D;&#x8DEF;&#x662F;&#x6B63;&#x786E;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x56E0;&#x4E3A;&#x597D;&#x591A;corner case&#x9519;&#x4E86;&#xFF0C;&#x88AB;&#x8FEB;&#x52A0;&#x4E86;&#x597D;&#x591A;&#x6761;&#x4EF6;&#x8BED;&#x53E5;&#xFF0C;&#x5176;&#x5B9E;&#x8FD9;&#x6837;&#x662F;&#x4E0D;&#x5BF9;&#x7684;&#xFF0C;&#x5E94;&#x8BE5;general&#x7684;&#x5199;&#x3002; 123456789101112131415161718192021222324252627class Solution { public boolean checkSubarraySum(int[] nums, int k) { Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); int sum = 0; for(int i=0; i&lt;nums.length; i++){ int num = nums[i]; sum += num; if(k!=0){ sum %= k; } if(map.containsKey(sum) &amp;&amp; (i-map.get(sum)) &gt; 1){ return true; }else if(!map.containsKey(sum)){ map.put(sum, i); } if(sum == 0 &amp;&amp; i &gt; 0){ return true; } } return false; }} 525. Contiguous Array - Medium &#x4E00;&#x6B21;&#x8FC7; 1234567891011121314151617181920212223class Solution { public int findMaxLength(int[] nums) { //count the difference between 0 and 1 Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); int diff = 0; int result = 0; for(int i=0; i&lt;nums.length; i++){ diff = nums[i] == 0? diff+1:diff-1; if(diff == 0){ result = Math.max(result, i+1); } if(map.containsKey(diff)){ result = Math.max(result, i-map.get(diff)); }else{ map.put(diff, i); } } return result; }} 42. Trapping Rain Water - Hard &#x5F04;&#x4E86;&#x4E00;&#x665A;&#x4E0A;&#xFF0C;&#x81EA;&#x5DF1;&#x7684;&#x65B9;&#x6CD5;&#x8FD8;&#x662F;&#x9519;&#x7684;&#xFF0C;&#x660E;&#x5929;&#x518D;&#x7167;&#x7740;&#x8001;&#x5E08;&#x7684;&#x505A;&#x4E00;&#x904D;&#xFF01; 123456789101112131415161718192021222324252627282930313233343536373839404142434445class Solution { public int trap(int[] height) { //&#x5982;&#x679C;&#x4E00;&#x76F4;&#x662F;&#x4E0B;&#x964D; - 0 //&#x5982;&#x679C;&#x4E00;&#x76F4;&#x4E0A;&#x5347; - 0 //&#x5982;&#x679C;&#x4E00;&#x51FA;&#x6765;&#x5C31;&#x4E0B;&#x964D;&#xFF0C;&#x6700;&#x540E;&#x624D;&#x4E0A;&#x5347; - &#xFF1F; //&#x5982;&#x679C;&#x4E00;&#x51FA;&#x6765;&#x5C31;&#x4E0A;&#x5347; - covered int decP = height.length-1; boolean inc = false; //boolean dec = false; int result = 0; if(height.length &lt; 2){ return 0; } for(int i=height.length-1; i&gt;0; i--){ if(height[i] &lt; height[i-1]){//&#x5F00;&#x59CB;&#x4E0A;&#x5347; inc = true; }else if(height[i] &gt; height[i-1]){//&#x5F00;&#x59CB;&#x4E0B;&#x964D; if(inc){//&#x5982;&#x679C;&#x4E4B;&#x524D;&#x6709;&#x8FC7;&#x4E0A;&#x5347; //System.out.println(i); //System.out.println(result); int min = Math.min(height[i], height[decP]); //int max = Math.max(height[i], height[decP]); for(int j = i; j &lt;=decP; j++){ result -= Math.min(height[j], min); } result += min; result += min*(decP-i); decP = i; inc = false; } } } if(height[0] &gt; height[1]){ int min = Math.min(height[0], height[decP]); //int max = Math.max(height[0], height[decP]); for(int j = 0; j &lt;=decP; j++){ result -= Math.min(height[j], min); } result += min; result += min*decP; } return result; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>325</tag>
        <tag>523</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 7, Day 46, 4/24/2019]]></title>
    <url>%2F2019%2F04%2F24%2FDay-46%2F</url>
    <content type="text"><![CDATA[&#x52A0;&#x6CB9;&#x52A0;&#x6CB9;&#xFF01; LeetCode - (1 Easy, 1 Medium, 0 Hard) 53. Maximum Subarray - Easy Easy&#x7684;&#x9898;&#x76EE;&#x8FD8;&#x662F;&#x60F3;&#x4E86;&#x8001;&#x534A;&#x5929;&#xFF0C;&#x5F88;&#x7ECF;&#x5178;&#x7684;&#x7B97;&#x6CD5;&#x554A; 123456789101112131415161718class Solution { public int maxSubArray(int[] nums) { //int[] result = new int[nums.length]; int cur = 0; int pre = 0; int finalResult = Integer.MIN_VALUE; for(int i=0; i&lt;nums.length; i++){ cur = pre&gt;0?pre + nums[i]:nums[i]; pre = cur; finalResult = Math.max(pre, finalResult); } return finalResult; }} 152. Maximum Product Subarray - Medium &#x4E00;&#x5F00;&#x59CB;&#x60F3;&#x5BF9;&#x4E86;&#xFF0C;&#x7ED3;&#x679C;&#x8D8A;&#x60F3;&#x8D8A;&#x504F;&#xFF0C;&#x8111;&#x5B50;&#x77ED;&#x8DEF;&#x4E86; 12345678910111213141516171819202122class Solution { public int maxProduct(int[] nums) { int cMin = 1; int cMax = 1; int pMin = 1; int pMax = 1; int result = Integer.MIN_VALUE; for(int num:nums){ pMin = cMin; pMax = cMax; cMin = Math.min(num, Math.min(num*pMin, num*pMax)); cMax = Math.max(num, Math.max(num*pMin, num*pMax)); result = Math.max(result, cMax); } return result; }} 560. Subarray Sum Equals K O(n^2)&#x4E86;&#x611F;&#x89C9; 1234567891011121314151617class Solution { public int subarraySum(int[] nums, int k) { int[] sums = new int[nums.length]; int cnt = 0; for(int i=0; i&lt;nums.length; i++){ for(int j=0; j&lt;=i; j++){ sums[j] += nums[i]; if(sums[j]==k){ cnt++; } } } return cnt; }} &#x7167;&#x7740;&#x8001;&#x5E08;&#x7684;&#x601D;&#x8DEF;&#x6765;&#x4E86;&#x4E00;&#x904D; 12345678910111213141516171819202122232425262728class Solution { public int subarraySum(int[] nums, int k) { Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); int sum = 0; int cnt = 0; for(int num:nums){ sum += num; if(map.containsKey(sum-k)){ cnt += map.get(sum-k); } if(map.containsKey(sum)){ map.put(sum, map.get(sum)+1); }else{ map.put(sum, 1); } } if(map.containsKey(k)){ cnt += map.get(k); } return cnt; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>53</tag>
        <tag>152</tag>
        <tag>560</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 7, Day 45, 4/23/2019]]></title>
    <url>%2F2019%2F04%2F24%2FDay-45%2F</url>
    <content type="text"><![CDATA[&#x641E;&#x4E86;&#x4E00;&#x5929;FN&#x7684;&#x4E8B;&#x60C5;&#xFF0C;&#x597D;&#x5728;&#x90FD;&#x641E;&#x5B9A;&#x4E86;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 7, Day 44, 4/22/2019]]></title>
    <url>%2F2019%2F04%2F22%2FDay-44%2F</url>
    <content type="text"><![CDATA[&#x4ECA;&#x5929;&#x4E03;&#x70B9;&#x591A;&#x5C31;&#x8D77;&#x4E86;&#xFF0C;&#x73B0;&#x5728;&#x5341;&#x4E00;&#x70B9;&#x8FD8;&#x6CA1;&#x6709;&#x8EBA;&#x4E0B;&#xFF0C;&#x597D;&#x957F;&#x7684;&#x4E00;&#x5929;&#x3002; LeetCode - (0 Easy, 2 Medium, 0 Hard) 209. Minimum Size Subarray Sum - Medium &#x597D;&#x4E45;&#x6CA1;&#x505A;&#x9898;&#x4E86;&#xFF0C;&#x4E00;&#x5F00;&#x59CB;&#x8111;&#x5B50;&#x77ED;&#x8DEF;&#x4E86; 12345678910111213141516171819202122232425class Solution { public int minSubArrayLen(int s, int[] nums) { if(nums.length == 0){ return 0; } int start = 0; int sum = 0; int result = Integer.MAX_VALUE; for(int i=0; i &lt; nums.length; i++){ sum += nums[i]; while(sum &gt;= s){ result = Math.min(result, i-start+1); sum -= nums[start]; start++; } } if(start == 0 &amp;&amp; sum &lt; s){ return 0; } return result; }} 713. Subarray Product Less Than K - Medium 1234567891011121314151617181920212223242526class Solution { public int numSubarrayProductLessThanK(int[] nums, int k) { long pro = 1; long result = 0; int dup = 0; int start = 0; for(int i=0; i&lt;nums.length; i++){ pro *= nums[i]; if(pro &gt;= k){ result += (i-start+1)*0.5*(i-start); while(i&gt;= start &amp;&amp; pro &gt;= k){ pro /= nums[start]; start++; } result -= (i-start+1)*0.5*(i-start); } } if(pro &lt; k){ result += (nums.length-start+1)*0.5*(nums.length-start); } return (int)(result); }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>209</tag>
        <tag>713</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 6, Day 43, 4/21/2019]]></title>
    <url>%2F2019%2F04%2F21%2FDay-43%2F</url>
    <content type="text"><![CDATA[&#x4E00;&#x5B9A;&#x8981;&#x591A;&#x601D;&#x8003;&#xFF0C;&#x6211;&#x73B0;&#x5728;&#x6709;&#x4E00;&#x4E9B;&#x601D;&#x8003;&#x60F0;&#x6027;&#x3002;&#x4E0D;&#x613F;&#x610F;&#x82B1;&#x65F6;&#x95F4;&#x601D;&#x8003;&#xFF0C;&#x56DE;&#x60F3;&#x7740;&#x4E4B;&#x540E;&#x518D;&#x8BF4;&#xFF0C;&#x9664;&#x975E;&#x6CA1;&#x6709;&#x6E34;&#x671B;&#xFF0C;&#x4E0D;&#x7136;&#x65E9;&#x601D;&#x8003;&#x65E9;&#x53D7;&#x76CA;&#x3002; int&#x6EA2;&#x51FA; &#x4EE3;&#x7801;&#xFF1A; 1234int a = 2147483647;System.out.println(a);int b = a + 1;System.out.println(b); &#x7ED3;&#x679C;&#xFF1A; 122147483647-2147483648 Reason: int&#x7C7B;&#x578B;&#x4E8C;&#x8FDB;&#x5236;&#x5B58;&#x50A8;&#x7684;&#x7B2C;&#x4E00;&#x4F4D;&#x4E3A;&#x7B26;&#x53F7;&#x4F4D;&#xFF0C;0&#x8868;&#x793A;&#x6B63;&#x6570;&#xFF0C;1&#x8868;&#x793A;&#x8D1F;&#x6570;&#xFF0C;2147483647&#x8FD9;&#x4E2A;&#x6570;&#x5B57;&#x7684;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x8868;&#x8FBE;&#x4E3A;01111111111111111111111111111111,&#x52A0;1&#x4EE5;&#x540E;&#x7684;&#x503C;&#x4E3A;10000000000000000000000000000000,&#x800C;10000000000000000000000000000000&#x8868;&#x793A;&#x7684;&#x662F;-2147483648&#x8FD9;&#x4E2A;&#x6570;&#x5B57;. Ref:Java&#x6574;&#x5F62;&#x6EA2;&#x51FA;&#x5904;&#x7406;&#x673A;&#x5236; Java substring() &#x65B9;&#x6CD5; substring(int beginIndex) or substring(int beginIndex, int endIndex) &#x65B9;&#x6CD5;&#x8FD4;&#x56DE;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x5B50;&#x5B57;&#x7B26;&#x4E32;&#x3002; beginIndex -- &#x8D77;&#x59CB;&#x7D22;&#x5F15;&#xFF08;&#x5305;&#x62EC;&#xFF09;, &#x7D22;&#x5F15;&#x4ECE; 0 &#x5F00;&#x59CB;&#x3002; endIndex -- &#x7ED3;&#x675F;&#x7D22;&#x5F15;&#xFF08;&#x4E0D;&#x5305;&#x62EC;&#xFF09;&#x3002; Ref: Java substring() &#x65B9;&#x6CD5; IndexOutOfBoundsException - if the beginIndex is negative, or endIndex is larger than the length of this String object, or beginIndex is larger than endIndex. substring(length) will return an empty string Ref: substring(length) &#x5355;&#x5F15;&#x53F7;&#xFF0C;&#x53CC;&#x5F15;&#x53F7; &#x5355;&#x5F15;&#x53F7;&#x5F15;&#x7684;&#x6570;&#x636E; &#x662F;char&#x7C7B;&#x578B;&#x7684;; &#x53CC;&#x5F15;&#x53F7;&#x5F15;&#x7684;&#x6570;&#x636E; &#x662F;String&#x7C7B;&#x578B;&#x7684; &#x6570;&#x636E;&#x7ED3;&#x6784; Stack Stack&lt;String&gt; stack = new Stack&lt;&gt;(); &#x5148;&#x8FDB;&#x540E;&#x51FA; &#x52A0;&#x5728;&#x5C3E;: push() &#x5220;&#x5728;&#x5C3E;: pop() &#x770B;&#x5728;&#x5C3E;: peek() Queue Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;(); &#x5148;&#x8FDB;&#x5148;&#x51FA; &#x52A0;&#x5728;&#x5C3E;: add() &#x5220;&#x5728;&#x5934;: remove() &#x770B;&#x5728;&#x5934;: peek() Deque &#x53CC;&#x5411;&#x961F;&#x5217; &#x52A0;&#x5728;&#x5934;: addFirst() &#x52A0;&#x5728;&#x5C3E;: addLast() &#x5220;&#x5728;&#x5934;: removeFirst() &#x5220;&#x5728;&#x5C3E;: removeLast() &#x770B;&#x5728;&#x5934;: peekFirst() &#x770B;&#x5728;&#x5C3E;: peekLast() HashSet &#x52A0;&#x5143;&#x7D20;: add(e) &#x5220;&#x5143;&#x7D20;: remove(e) &#x67E5;&#x5143;&#x7D20;: contains(k) HashMap &#x52A0;&#x5143;&#x7D20;: put(k, v) &#x5220;&#x5143;&#x7D20;: remove(k) &#x67E5;&#x5143;&#x7D20;: containsKey(k) &#x901A;&#x8FC7;A&#x627E;B: get(k) StringBuilder .append() &#x94FE;&#x8868; 12345678class ListNode { ListNode next; int val; ListNode(int x){ val = x; next = null; }} Ref: &#x94FE;&#x8868;&#x603B;&#x7ED3; int[], boolean[], char[] &#x9ED8;&#x8BA4;&#x503C; int[] -&gt; 0 boolean[] -&gt; false char[] -&gt; null (??? == 0) &#x5173;&#x4E8E;equals&#x548C;== &#xFF08;1&#xFF09;&#x5BF9;&#x4E8E;==&#xFF0C;&#x5982;&#x679C;&#x4F5C;&#x7528;&#x4E8E;&#x57FA;&#x672C;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF;&#xFF08;byte,short,char,int,long,float,double,boolean &#xFF09;&#xFF0C;&#x5219;&#x76F4;&#x63A5;&#x6BD4;&#x8F83;&#x5176;&#x5B58;&#x50A8;&#x7684;&quot;&#x503C;&quot;&#x662F;&#x5426;&#x76F8;&#x7B49;&#xFF1B;&#x5982;&#x679C;&#x4F5C;&#x7528;&#x4E8E;&#x5F15;&#x7528;&#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF;&#xFF08;String&#xFF09;&#xFF0C;&#x5219;&#x6BD4;&#x8F83;&#x7684;&#x662F;&#x6240;&#x6307;&#x5411;&#x7684;&#x5BF9;&#x8C61;&#x7684;&#x5730;&#x5740;&#xFF08;&#x5373;&#x662F;&#x5426;&#x6307;&#x5411;&#x540C;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#xFF09;&#x3002; &#xFF08;2&#xFF09;equals&#x65B9;&#x6CD5;&#x662F;&#x57FA;&#x7C7B;Object&#x4E2D;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x56E0;&#x6B64;&#x5BF9;&#x4E8E;&#x6240;&#x6709;&#x7684;&#x7EE7;&#x627F;&#x4E8E;Object&#x7684;&#x7C7B;&#x90FD;&#x4F1A;&#x6709;&#x8BE5;&#x65B9;&#x6CD5;&#x3002;&#x5728;Object&#x7C7B;&#x4E2D;&#xFF0C;equals&#x65B9;&#x6CD5;&#x662F;&#x7528;&#x6765;&#x6BD4;&#x8F83;&#x4E24;&#x4E2A;&#x5BF9;&#x8C61;&#x7684;&#x5F15;&#x7528;&#x662F;&#x5426;&#x76F8;&#x7B49;&#xFF0C;&#x5373;&#x662F;&#x5426;&#x6307;&#x5411;&#x540C;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x3002; &#xFF08;3&#xFF09;&#x5BF9;&#x4E8E;equals&#x65B9;&#x6CD5;&#xFF0C;&#x6CE8;&#x610F;&#xFF1A;equals&#x65B9;&#x6CD5;&#x4E0D;&#x80FD;&#x4F5C;&#x7528;&#x4E8E;&#x57FA;&#x672C;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF;&#x3002;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5BF9;equals&#x65B9;&#x6CD5;&#x8FDB;&#x884C;&#x91CD;&#x5199;&#xFF0C;&#x5219;&#x6BD4;&#x8F83;&#x7684;&#x662F;&#x5F15;&#x7528;&#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF;&#x6240;&#x6307;&#x5411;&#x7684;&#x5BF9;&#x8C61;&#x7684;&#x5730;&#x5740;&#xFF1B;&#x800C;String&#x7C7B;&#x5BF9;equals&#x65B9;&#x6CD5;&#x8FDB;&#x884C;&#x4E86;&#x91CD;&#x5199;&#xFF0C;&#x7528;&#x6765;&#x6BD4;&#x8F83;&#x6307;&#x5411;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x5BF9;&#x8C61;&#x6240;&#x5B58;&#x50A8;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x76F8;&#x7B49;&#x3002;&#x5176;&#x4ED6;&#x7684;&#x4E00;&#x4E9B;&#x7C7B;&#x8BF8;&#x5982;Double&#xFF0C;Date&#xFF0C;Integer&#x7B49;&#xFF0C;&#x90FD;&#x5BF9;equals&#x65B9;&#x6CD5;&#x8FDB;&#x884C;&#x4E86;&#x91CD;&#x5199;&#x7528;&#x6765;&#x6BD4;&#x8F83;&#x6307;&#x5411;&#x7684;&#x5BF9;&#x8C61;&#x6240;&#x5B58;&#x50A8;&#x7684;&#x5185;&#x5BB9;&#x662F;&#x5426;&#x76F8;&#x7B49;&#x3002; Ref: java&#x4E2D;String&#x548C;char Iterator Object next()&#xFF1A;&#x8FD4;&#x56DE;&#x8FED;&#x4EE3;&#x5668;&#x521A;&#x8D8A;&#x8FC7;&#x7684;&#x5143;&#x7D20;&#x7684;&#x5F15;&#x7528;&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x662F; Object&#xFF0C;&#x9700;&#x8981;&#x5F3A;&#x5236;&#x8F6C;&#x6362;&#x6210;&#x81EA;&#x5DF1;&#x9700;&#x8981;&#x7684;&#x7C7B;&#x578B; boolean hasNext()&#xFF1A;&#x5224;&#x65AD;&#x5BB9;&#x5668;&#x5185;&#x662F;&#x5426;&#x8FD8;&#x6709;&#x53EF;&#x4F9B;&#x8BBF;&#x95EE;&#x7684;&#x5143;&#x7D20; void remove()&#xFF1A;&#x5220;&#x9664;&#x8FED;&#x4EE3;&#x5668;&#x521A;&#x8D8A;&#x8FC7;&#x7684;&#x5143;&#x7D20; Ref: Iterator &#x6CDB;&#x578B; Ref: &#x6CDB;&#x578B; TreeMap TreeMap&#x7684;Map.Entry&#x6709;floorEntry()&#x548C;ceilingEntry()&#x65B9;&#x6CD5;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x8BE5;entry&#x8FD4;&#x56DE;null &#x91CD;&#x5199;Comparator 123456789Comparator&lt;Map.Entry&lt;String, Integer&gt;&gt; comparator = new Comparator(){ @Override public int compare(Object o1, Object o2){ Map.Entry&lt;String, Integer&gt; s1 = (Map.Entry&lt;String, Integer&gt;)(o1); Map.Entry&lt;String, Integer&gt; s2 = (Map.Entry&lt;String, Integer&gt;)(o2); return Integer.compare(s1.getValue(), s2.getValue()) != 0 ? Integer.compare(s1.getValue(), s2.getValue()) : s2.getKey().compareTo(s1.getKey()); } };//&#x8FD9;&#x662F;&#x4E00;&#x884C;&#x8BED;&#x53E5; new comparator document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 6, Day 42, 4/20/2019]]></title>
    <url>%2F2019%2F04%2F21%2FDay-42%2F</url>
    <content type="text"><![CDATA[&#x73A9;&#x4E86;VR document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 6, Day 41, 4/19/2019]]></title>
    <url>%2F2019%2F04%2F21%2FDay-41%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 6, Day 40, 4/18/2019]]></title>
    <url>%2F2019%2F04%2F21%2FDay-40%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 6, Day 39, 4/17/2019]]></title>
    <url>%2F2019%2F04%2F17%2FDay-39%2F</url>
    <content type="text"><![CDATA[&#x5728;Costco&#x53EF;&#x4EE5;&#x4E70;&#x90A3;&#x79CD;&#x55B7;&#x7684;&#x8FC7;&#x654F;&#x836F;&#xFF0C;&#x7B49;&#x4E70;&#x4E00;&#x4E0B;&#x3002; &#x6211;&#x5728;&#x60F3;&#xFF0C;&#x4ECA;&#x5E74;&#x6211;&#x7ED9;&#x81EA;&#x5DF1;&#x9001;&#x4E2A;&#x4EC0;&#x4E48;&#x793C;&#x7269;&#x5462;&#xFF1F;&#x751F;&#x65E5;&#x524D;&#x628A;&#x6811;&#x7684;&#x9898;&#x90FD;&#x505A;&#x5B8C;&#x6574;&#x7406;&#x5B8C;&#x5427;&#x3002;&#x53EF;&#x4EE5;&#x7ED9;&#x81EA;&#x5DF1;&#x4E70;&#x4E2A;apple watch&#x3002; &#x5237;&#x7684;&#x8FD8;&#x662F;&#x592A;&#x6162;&#x4E86;&#xFF0C;&#x7ECF;&#x5E38;&#x4E00;&#x5468;&#x4F11;&#x606F;&#x4E24;&#x5929;&#xFF0C;&#x4F60;&#x8FD8;&#x53CC;&#x4F11;&#x554A;&#x4F60;&#x3002; &#x603B;&#x7ED3; &#x58F0;&#x660E;&#x6570;&#x7EC4;&#x65F6;&#x4E0D;&#x80FD;&#x6307;&#x5B9A;&#x5176;&#x957F;&#x5EA6;&#xFF0C;&#x56E0;&#x4E3A;&#x6570;&#x7EC4;&#x662F;&#x4E00;&#x79CD;&#x5F15;&#x7528;&#x578B;&#x53D8;&#x91CF;&#xFF0C;&#x6240;&#x4EE5;&#x58F0;&#x660E;&#x65F6;&#x4EC5;&#x4EC5;&#x8868;&#x793A;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;&#x5F15;&#x7528;&#x53D8;&#x91CF;&#xFF0C;&#x8FD8;&#x672A;&#x6307;&#x5411;&#x4EFB;&#x4F55;&#x6709;&#x6548;&#x5185;&#x5B58;&#x3002; &#x521B;&#x5EFA;&#x6570;&#x7EC4;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5982;&#x679C;&#x5728;&#x521B;&#x5EFA;&#x7684;&#x540C;&#x65F6;&#x4E0D;&#x521D;&#x59CB;&#x5316;&#x6570;&#x7EC4;&#x5219;&#x5FC5;&#x987B;&#x6307;&#x5B9A;&#x5927;&#x5C0F; new int[3]; &#x521B;&#x5EFA;&#x6570;&#x7EC4;&#x7684;&#x65F6;&#x5019;&#x5982;&#x679C;&#x4E0D;&#x6307;&#x5B9A;&#x5927;&#x5C0F;&#x5219;&#x5FC5;&#x987B;&#x5728;&#x521B;&#x5EFA;&#x7684;&#x540C;&#x65F6;&#x521D;&#x59CB;&#x5316;&#x6570;&#x7EC4;&#x3002; new int[]{0, 1, 2} String&#x7C7B;&#x578B;&#x7684;&#x5BF9;&#x8C61;&#x4E0D;&#x53EF;&#x53D8;&#xFF0C;&#x5728;&#x6BCF;&#x6B21;&#x5BF9;&#x8BE5;&#x5BF9;&#x8C61;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#x7684;&#x65F6;&#x5019;&#x76F8;&#x5F53;&#x4E8E;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;String&#x5BF9;&#x8C61;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x628A;&#x6307;&#x9488;&#x6307;&#x5411;&#x65B0;&#x7684;&#x5BF9;&#x8C61;&#x3002;&#x6240;&#x4EE5;&#x5982;&#x679C;&#x9700;&#x8981;&#x7ECF;&#x5E38;&#x6539;&#x53D8;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x4E0D;&#x8981;&#x7528;String, &#x7528;StringBuilder&#x3002; StringBuilder sb &#x6DFB;&#x52A0; 1B &#x8981;&#x5148;append(1)&#x518D;append(B) ArrayList&#x7C7B;, List&#x7C7B; 12345678910ArrayList list = new ArrayList();//&#x65B0;&#x589E;&#x6570;&#x636E; list.Add(&quot;acrs&quot;); list.Add(123);//&#x4FEE;&#x6539;&#x6570;&#x636E; list[2] = 345; //&#x4FEE;&#x6539;&#x7D22;&#x5F15;&#x4F4D;&#x7F6E;&#x4E3A;2&#x7684;&#x503C;,&#x5C06;&#x503C;&#x4FEE;&#x6539;&#x4E3A;345;//&#x79FB;&#x9664;&#x6570;&#x636E; list.RemoveAt(2); //&#x79FB;&#x9664;&#x7D22;&#x5F15;&#x4E3A;2&#x7684;&#x6570;&#x636E;//&#x63D2;&#x5165;&#x6570;&#x636E; list.Insert(0, &quot;hello world&quot;); //&#x63D2;&#x5165;&#x7D22;&#x5F15;&#x4F4D;&#x7F6E;&#x4E3A;0,&#x6570;&#x503C;&#x4E3A;&quot;hello world&quot; ArrayList&#x5141;&#x8BB8;&#x63D2;&#x5165;&#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x6570;&#x636E;&#xFF08;&#x4EE3;&#x7801;&#x7B2C;&#x4E00;&#x884C;&#x6CA1;&#x6709;&#x8BF4;&#x660E;&#x8981;&#x63D2;&#x5165;&#x4EC0;&#x4E48;&#x7C7B;&#x578B;&#x6570;&#x636E;&#xFF09;&#x3002;ArrayList&#x4F1A;&#x628A;&#x6240;&#x6709;&#x63D2;&#x5165;&#x5176;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x90FD;&#x5F53;&#x4F5C;&#x4E3A;object&#x7C7B;&#x578B;&#x6765;&#x5904;&#x7406;&#x3002;&#x8FD9;&#x6837;&#xFF0C;&#x5728;&#x6211;&#x4EEC;&#x4F7F;&#x7528;ArrayList&#x4E2D;&#x7684;&#x6570;&#x636E;&#x6765;&#x5904;&#x7406;&#x95EE;&#x9898;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5F88;&#x53EF;&#x80FD;&#x4F1A;&#x62A5;&#x7C7B;&#x578B;&#x4E0D;&#x5339;&#x914D;&#x7684;&#x9519;&#x8BEF;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;ArrayList&#x4E0D;&#x662F;&#x7C7B;&#x578B;&#x5B89;&#x5168;&#x7684;&#x3002;&#x65E2;&#x4F7F;&#x6211;&#x4EEC;&#x4FDD;&#x8BC1;&#x5728;&#x63D2;&#x5165;&#x6570;&#x636E;&#x7684;&#x65F6;&#x5019;&#x90FD;&#x5F88;&#x5C0F;&#x5FC3;&#xFF0C;&#x90FD;&#x6709;&#x63D2;&#x5165;&#x4E86;&#x540C;&#x4E00;&#x7C7B;&#x578B;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x4F46;&#x5728;&#x4F7F;&#x7528;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x9700;&#x8981;&#x5C06;&#x5B83;&#x4EEC;&#x8F6C;&#x5316;&#x4E3A;&#x5BF9;&#x5E94;&#x7684;&#x539F;&#x7C7B;&#x578B;&#x6765;&#x5904;&#x7406;&#x3002;&#x8FD9;&#x5C31;&#x5B58;&#x5728;&#x4E86;&#x88C5;&#x7BB1;&#x4E0E;&#x62C6;&#x7BB1;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x4F1A;&#x5E26;&#x6765;&#x5F88;&#x5927;&#x7684;&#x6027;&#x80FD;&#x635F;&#x8017;&#x3002; 1List&lt;int&gt; list = new ArrayList&lt;&gt;(); //&#x6B63;&#x786E;,&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;;&#x8FD9;&#x53E5;&#x521B;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;ArrayList&#x7684;&#x5BF9;&#x8C61;&#x540E;&#x628A;&#x8D4B;&#x503C;&#x7ED9;&#x4E86;List&#x3002;&#x6B64;&#x65F6;&#x5B83;&#x662F;&#x4E00;&#x4E2A;List&#x5BF9;&#x8C61;&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#x4F1A;&#x51FA;&#x73B0;&#x6709;&#x4E9B;ArrayList&#x6709;&#x4F46;&#x662F;List&#x6CA1;&#x6709;&#x7684;&#x5C5E;&#x6027;&#x548C;&#x65B9;&#x6CD5;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;List&#x5BF9;&#x8C61;&#x5C31;&#x4E0D;&#x80FD;&#x518D;&#x7528;&#x4E86; &#x4E3A;&#x4EC0;&#x4E48;&#x4E00;&#x822C;&#x90FD;&#x4F7F;&#x7528; List list = new ArrayList() ,&#x800C;&#x4E0D;&#x7528; ArrayList alist = new ArrayList()&#x5462;&#xFF1F; &#x95EE;&#x9898;&#x5C31;&#x5728;&#x4E8E;List&#x6709;&#x591A;&#x4E2A;&#x5B9E;&#x73B0;&#x7C7B;&#xFF0C;&#x73B0;&#x5728;&#x4F60;&#x7528;&#x7684;&#x662F;ArrayList&#xFF0C;&#x4E5F;&#x8BB8;&#x54EA;&#x4E00;&#x5929;&#x4F60;&#x9700;&#x8981;&#x6362;&#x6210;&#x5176;&#x5B83;&#x7684;&#x5B9E;&#x73B0;&#x7C7B;&#xFF0C;&#x5982; LinkedList&#x6216;&#x8005;Vector&#x7B49;&#x7B49;&#xFF0C;&#x8FD9;&#x65F6;&#x4F60;&#x53EA;&#x8981;&#x6539;&#x53D8;&#x8FD9;&#x4E00;&#x884C;&#x5C31;&#x884C;&#x4E86;&#xFF1A;List list = new LinkedList(); &#x5176;&#x5B83;&#x4F7F;&#x7528;&#x4E86;list&#x5730;&#x65B9;&#x7684;&#x4EE3;&#x7801;&#x6839;&#x672C;&#x4E0D;&#x9700;&#x8981;&#x6539;&#x52A8;&#x3002;&#x5047;&#x8BBE;&#x4F60;&#x5F00;&#x59CB;&#x7528; ArrayList alist = new ArrayList(), &#x8FD9;&#x4E0B;&#x4F60;&#x6709;&#x7684;&#x6539;&#x4E86;&#xFF0C;&#x7279;&#x522B;&#x662F;&#x5982;&#x679C;&#x4F60;&#x4F7F;&#x7528;&#x4E86; ArrayList&#x7279;&#x6709;&#x7684;&#x65B9;&#x6CD5;&#x548C;&#x5C5E;&#x6027; Ref: document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 6, Day 38, 4/16/2019]]></title>
    <url>%2F2019%2F04%2F17%2FDay-38%2F</url>
    <content type="text"><![CDATA[&#x6700;&#x8FD1;&#x8FC7;&#x654F;&#x4E25;&#x91CD;&#xFF0C;&#x7136;&#x540E;&#x5403;&#x4E86;&#x8FC7;&#x654F;&#x836F;&#x592A;&#x96BE;&#x53D7;&#x4E86;&#xFF0C;&#x6BCF;&#x5929;&#x56F0;&#x554A;&#x56F0;&#x554A;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 6, Day 37, 4/15/2019]]></title>
    <url>%2F2019%2F04%2F17%2FDay-37%2F</url>
    <content type="text"><![CDATA[&#x4F5C;&#x4E3A;&#x5237;&#x9898;&#x4E00;&#x4E2A;&#x6708;&#x7684;&#x5956;&#x52B1;&#xFF0C;&#x7ED9;&#x81EA;&#x5DF1;&#x4E70;&#x4E86;&#x4E2A;AirPods&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 5, Day 36, 4/14/2019]]></title>
    <url>%2F2019%2F04%2F14%2FDay-36%2F</url>
    <content type="text"><![CDATA[LeetCode &#x590D;&#x4E60; 244. Shortest Word Distance 2 1234567891011121314151617181920212223242526272829303132333435363738394041424344class WordDistance { Map&lt;String, List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;(); public WordDistance(String[] words) { for(int i=0; i&lt;words.length; i++){ String word = words[i]; List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); if(map.containsKey(word)){ list = map.get(word); } list.add(i); map.put(word, list); } } public int shortest(String word1, String word2) { TreeSet&lt;Integer&gt; minHeap = new TreeSet&lt;&gt;(); for(int i:map.get(word2)){ minHeap.add(i); } int result=Integer.MAX_VALUE; for(int i:map.get(word1)){ //int floor = minHeap.floor(i); int cannot be null //int ceiling = minHeap.ceiling(i); if(minHeap.floor(i) != null){ result = Math.min(result, i - minHeap.floor(i)); } if(minHeap.ceiling(i) != null){ result = Math.min(result, minHeap.ceiling(i) - i); } } return result; }}/** * Your WordDistance object will be instantiated and called as such: * WordDistance obj = new WordDistance(words); * int param_1 = obj.shortest(word1,word2); */ 253. Meeting Rooms 2 12345678910111213141516171819202122232425262728293031323334353637383940/** * Definition for an interval. * public class Interval { * int start; * int end; * Interval() { start = 0; end = 0; } * Interval(int s, int e) { start = s; end = e; } * } */class Solution { public int minMeetingRooms(Interval[] intervals) { // 1st ProrityQueue, order by start, &#x4EE5;&#x5C0F;&#x5230;&#x5927; // 2nd ProrityQueue, order by end, &#x4EE5;&#x5C0F;&#x5230;&#x5927; PriorityQueue&lt;Interval&gt; miniHeap1 = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o1.start, o2.start)); PriorityQueue&lt;Interval&gt; miniHeap2 = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o1.end, o2.end)); for(Interval i:intervals){ miniHeap1.add(i); } while(!miniHeap1.isEmpty()){ Interval i = miniHeap1.poll(); if(miniHeap2.isEmpty()){ miniHeap2.add(i); }else{ if(miniHeap2.peek().end &lt;= i.start){ miniHeap2.remove(); } miniHeap2.add(i); } } return miniHeap2.size(); }} 340. Longest Substring with At Most K Distinct Characters 1234567891011121314151617181920212223242526272829303132333435class Solution { public int lengthOfLongestSubstringKDistinct(String s, int k) { if(s.length() &lt;= k){ return s.length(); } int[] freq = new int[256]; int cnt = 0; int start = 0; int result = 0; for(int i=0; i&lt;s.length(); i++){ char c = s.charAt(i); if(freq[c] == 0){//&#x5982;&#x679C;&#x6CA1;&#x6709; cnt++; } freq[c]++; if(cnt &gt; k){ result = Math.max(result, i-start); while(start &lt; s.length() &amp;&amp; cnt &gt; k){ freq[s.charAt(start)]--; if(freq[s.charAt(start)] == 0){ cnt--; } start++; } } } if(start != s.length()){ result = Math.max(result, s.length()-start); } return result; }} 632. Smallest Range 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475class Solution { public int[] smallestRange(List&lt;List&lt;Integer&gt;&gt; nums) { int k = nums.size(); Queue&lt;Integer&gt; qN = new LinkedList&lt;&gt;(); Queue&lt;Integer&gt; qI = new LinkedList&lt;&gt;(); int[] freq = new int[k]; int[] gI = new int[k]; int cnt = 0; long[] result = {Integer.MIN_VALUE, Integer.MAX_VALUE}; //&#x5FC5;&#x987B;&#x8BBE;&#x6210;long&#xFF0C;&#x4E0D;&#x7136;&#x4E0D;&#x80FD;Integer.MAX_VALUE - Integer.MIN_VALUE PriorityQueue&lt;Num&gt; miniHeap = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o1.num, o2.num)); for(int i=0; i&lt;nums.size(); i++){//initial Num cur = new Num(nums.get(i).get(0), i); miniHeap.add(cur); } while(!miniHeap.isEmpty()){ Num cur = miniHeap.remove(); int curNum = cur.num; int curIndex = cur.index; qN.add(curNum); qI.add(curIndex); gI[curIndex]++; //System.out.println(&quot;cnt: &quot;+cnt); if(freq[curIndex] == 0){ cnt++; } freq[curIndex]++; if(cnt == k){ while(freq[qI.peek()] &gt; 1 ){ freq[qI.remove()]--; qN.remove(); } //System.out.println(&quot;curNum: &quot; + curNum); //System.out.println(&quot;qN.peek(): &quot; + qN.peek()); //System.out.println(&quot;result[1]: &quot; + result[1]); //System.out.println(&quot;result[0]: &quot; + result[0]); //long test = result[1] - result[0]; //System.out.println(test); if(curNum - qN.peek() &lt; result[1] - result[0]){ //System.out.println(&quot;true&quot;); result[0] = qN.peek(); result[1] = curNum; } freq[qI.peek()]--; qN.remove(); qI.remove(); cnt--; } //System.out.println(cur.index); //System.out.println(gI[cur.index]); if(gI[curIndex] &lt; nums.get(curIndex).size()){ miniHeap.add(new Num(nums.get(curIndex).get(gI[curIndex]), cur.index)); } } return new int[]{(int)result[0], (int)result[1]}; } private class Num { int num; int index; public Num(int n, int i){ num = n; index = i; } }} 692. Top K Frequent Words &#x4E3A;&#x4EC0;&#x4E48;&#x4E0D;&#x80FD;&#x7528;TreeMap&#x76F4;&#x63A5;&#x6392;&#x5E8F; 12345678910111213141516171819202122232425262728293031323334353637383940414243class Solution { public List&lt;String&gt; topKFrequent(String[] words, int k) { if(words.length == 0){ return new ArrayList&lt;&gt;(); } Comparator&lt;Map.Entry&lt;String, Integer&gt;&gt; comparator = new Comparator(){ @Override public int compare(Object o1, Object o2){ Map.Entry&lt;String, Integer&gt; m1 = (Map.Entry&lt;String, Integer&gt;)o1; Map.Entry&lt;String, Integer&gt; m2 = (Map.Entry&lt;String, Integer&gt;)o2; return m1.getValue() != m2.getValue() ? Integer.compare(m2.getValue(), m1.getValue()) : m1.getKey().compareTo(m2.getKey()); } }; PriorityQueue&lt;Map.Entry&lt;String, Integer&gt;&gt; miniHeap = new PriorityQueue&lt;&gt;(comparator); Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;(); for(String word:words){ if(map.containsKey(word)){ map.put(word, map.get(word)+1); }else{ map.put(word, 1); } } Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; itr = map.entrySet().iterator(); while(itr.hasNext()){ miniHeap.add(itr.next()); } List&lt;String&gt; result = new ArrayList&lt;&gt;(); int cnt = k; while(cnt &gt; 0){ result.add(miniHeap.poll().getKey()); cnt--; } return result; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>692</tag>
        <tag>253</tag>
        <tag>244</tag>
        <tag>340</tag>
        <tag>632</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 5, Day 35, 4/13/2019]]></title>
    <url>%2F2019%2F04%2F14%2FDay-35%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 5, Day 34, 4/12/2019]]></title>
    <url>%2F2019%2F04%2F14%2FDay-34%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 5, Day 33, 4/11/2019]]></title>
    <url>%2F2019%2F04%2F11%2FDay-33%2F</url>
    <content type="text"><![CDATA[&#x9012;&#x5F52; &#x60F3;&#x8981;&#x7528;&#x9012;&#x5F52;&#x5FC5;&#x987B;&#x77E5;&#x9053;&#x4E24;&#x4E2A;&#x6761;&#x4EF6;&#xFF1A; &#x9012;&#x5F52;&#x51FA;&#x53E3;(&#x7EC8;&#x6B62;&#x9012;&#x5F52;&#x7684;&#x6761;&#x4EF6;) &#x9012;&#x5F52;&#x8868;&#x8FBE;&#x5F0F;(&#x89C4;&#x5F8B;) Ref: &#x9012;&#x5F52;&#x5C31;&#x8FD9;&#x4E48;&#x7B80;&#x5355; &#x5728;java&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;&#x4F7F;&#x7528;&#x9012;&#x5F52;&#x8C03;&#x7528;&#x65F6;&#xFF0C;&#x5982;&#x679C;&#x8FC7;&#x591A;&#x7684;&#x8C03;&#x7528;&#x5BB9;&#x6613;&#x9020;&#x6210;java.lang.StackOverflowError&#x5373;&#x6808;&#x6EA2;&#x51FA;&#x548C;&#x7A0B;&#x5E8F;&#x6267;&#x884C;&#x8FC7;&#x6162;&#x3002;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x6F5C;&#x5728;Bug&#x548C;&#x5F71;&#x54CD;&#x7A0B;&#x5E8F;&#x6267;&#x884C;&#x6548;&#x7387;&#x95EE;&#x9898;&#xFF0C;&#x9700;&#x8981;&#x8C28;&#x614E;&#x4F7F;&#x7528;&#x3002; &#x6839;&#x672C;&#x539F;&#x56E0;&#x662F;&#x8FD9;&#x6837;&#x7684;,&#x5BF9;&#x4E8E;&#x6BCF;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;,&#x90FD;&#x6709;&#x4E00;&#x4E2A;java&#x6808; ,&#x5F53;&#x6709;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x88AB;&#x8C03;&#x7528;&#x7684;&#x65F6;&#x5019;,&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E9B;&#x8DDF;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x76F8;&#x5173;&#x7684;&#x4FE1;&#x606F;,&#x5982;&#x65B9;&#x6CD5;&#x540D;&#xFF0C;&#x53C2;&#x6570;&#xFF0C;&#x4E2D;&#x95F4;&#x53D8;&#x91CF;&#x7B49;&#x7B49;,&#x8FD9;&#x4E9B;&#x53EB;&#x505A;&#x6808;&#x5E27; ,&#x5F53;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x6267;&#x884C;&#x5B8C;&#x6BD5; &#x8FD9;&#x4E2A;&#x6808;&#x5E27;&#x624D;&#x4F1A;&#x4ECE;&#x6808;&#x9876;pop&#x6389; &#x4F60;&#x9012;&#x5F52;&#x7684;&#x8BDD; &#x4F1A;&#x4E00;&#x76F4;&#x5411;&#x6808;&#x91CC;push&#x6808;&#x5E27; &#x800C;&#x8FD9;&#x4E2A;java&#x6808;&#x662F;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x957F;&#x5EA6;&#x6216;&#x6DF1;&#x5EA6;&#x7684;,&#x5F53;&#x6808;&#x6EE1;&#x4E86;,&#x65E0;&#x6CD5;&#x518D;&#x8FDB;&#x884C;push&#x7684;&#x65F6;&#x5019; &#x5C31;&#x51FA;&#x73B0;&#x4F60;&#x4E0A;&#x9762;&#x7684;&#x5F02;&#x5E38;&#x4E86;,&#x89E3;&#x51B3;&#x529E;&#x6CD5;&#x7684;&#x8BDD; &#x5C31;&#x4E0D;&#x8981;&#x7528;&#x9012;&#x5F52;&#x64CD;&#x4F5C; &#x6539;&#x7528;for &#x800C;&#x4E14;&#x5E73;&#x65F6;&#x4E5F;&#x4E0D;&#x5EFA;&#x8BAE;&#x7528;&#x9012;&#x5F52;&#x7684;,&#x6548;&#x7387;&#x592A;&#x4F4E;&#x4E86; . &#x6808;&#x6EA2;&#x51FA;&#x4E86;&#xFF0C;JVM&#x4F9D;&#x7136;&#x662F;&#x91C7;&#x7528;&#x6808;&#x5F0F;&#x7684;&#x865A;&#x62DF;&#x673A;&#xFF0C;&#x8FD9;&#x4E2A;&#x548C;C&#x548C;Pascal&#x90FD;&#x662F;&#x4E00;&#x6837;&#x7684;&#x3002;&#x51FD;&#x6570;&#x7684;&#x8C03;&#x7528;&#x8FC7;&#x7A0B;&#x90FD;&#x4F53;&#x73B0;&#x5728;&#x5806;&#x6808;&#x548C;&#x9000;&#x6808;&#x4E0A;&#x4E86;&#x3002;&#x4F60;&#x8C03;&#x7528;&#x6784;&#x9020;&#x51FD;&#x6570;&#x7684;&#x201C;&#x5C42;&#x201D;&#x592A;&#x591A;&#x4E86;&#xFF0C;&#x4EE5;&#x81F4;&#x4E8E;&#x628A;&#x6808;&#x533A;&#x6EA2;&#x51FA;&#x4E86;&#x3002; &#x901A;&#x5E38;&#x6765;&#x8BB2;&#xFF0C;&#x4E00;&#x822C;&#x6808;&#x533A;&#x8FDC;&#x8FDC;&#x5C0F;&#x4E8E;&#x5806;&#x533A;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x8FC7;&#x7A0B;&#x5F80;&#x5F80;&#x4E0D;&#x4F1A;&#x591A;&#x4E8E;&#x4E0A;&#x5343;&#x5C42;&#xFF0C;&#x800C;&#x5373;&#x4FBF;&#x6BCF;&#x4E2A;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x9700;&#x8981;1K&#x7684;&#x7A7A;&#x95F4;(&#x8FD9;&#x4E2A;&#x5927;&#x7EA6;&#x76F8;&#x5F53;&#x4E8E;&#x5728;&#x4E00;&#x4E2A;C&#x51FD;&#x6570;&#x5185;&#x58F0;&#x660E;&#x4E86;256&#x4E2A;int&#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF;)&#xFF0C;&#x90A3;&#x4E48;&#x6808;&#x533A;&#x4E5F;&#x4E0D;&#x8FC7;&#x662F;&#x9700;&#x8981;1MB&#x7684;&#x7A7A;&#x95F4;&#x3002;&#x901A;&#x5E38;&#x6808;&#x7684;&#x5927;&#x5C0F;&#x662F;1&#xFF0D;2MB&#x7684;&#x3002;&#x901A;&#x5E38;&#x9012;&#x5F52;&#x4E5F;&#x4E0D;&#x8981;&#x9012;&#x5F52;&#x7684;&#x5C42;&#x6B21;&#x8FC7;&#x591A;&#xFF0C;&#x5F88;&#x5BB9;&#x6613;&#x6EA2;&#x51FA;. Ref: &#x614E;&#x7528;Java&#x9012;&#x5F52;&#x8C03;&#x7528; LeetCode &#x590D;&#x4E60; 50. Pow(x, n) &#x4E0D;&#x80FD;&#x7528;stack&#x505A;&#xFF0C;1.00000&#xFF0C;-2147483648&#x4F1A;&#x9020;&#x6210;MLE &#x4E2D;&#x95F4;&#x5FC5;&#x987B;&#x8BBE;&#x4E2A;&#x4E2D;&#x95F4;&#x53D8;&#x91CF;temp&#xFF0C;&#x4E0D;&#x7136;&#x4F1A;stackoverflow&#xFF0C;&#x4F1A;&#x4E0D;&#x4F1A;&#x662F;&#x56E0;&#x4E3A;&#x5982;&#x679C;&#x76F4;&#x63A5;&#x8C03;&#x7528;&#xFF0C;&#x6BCF;&#x4E00;&#x8F6E;&#x76F8;&#x5F53;&#x4E8E;&#x8C03;&#x7528;&#x4E24;&#x6B21;&#x8FD9;&#x6837;&#x5C31;&#x4F1A;&#x5F88;&#x591A; 12345678910111213141516171819202122232425262728293031323334class Solution { public double myPow(double x, int n) { // if current pow is even, &#x4F20;&#x5165; 0 else &#x4F20;&#x5165; 1 // if current pow == 1, &#x5F00;&#x59CB;&#x4ECE;stack&#x62FF;&#x51FA; if(x == 0.0){ return 0; } if(n == 0){ return 1; }else{ return newPow(x, n); } } private double newPow(double x, long n){ if(n&lt;0){ return 1.0/newPow(x, -1*n); } if(n != 1){ double temp = newPow(x, n/2); if(n%2 == 1){ //System.out.println(n/2); return temp*temp*x; }else{ //System.out.println(n/2); return temp*temp; } } return x; }} 56. Merge Intervals &#x8FD8;&#x884C; &#x4E24;&#x904D;&#x8FC7; 1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * Definition for an interval. * public class Interval { * int start; * int end; * Interval() { start = 0; end = 0; } * Interval(int s, int e) { start = s; end = e; } * } */class Solution { public List&lt;Interval&gt; merge(List&lt;Interval&gt; intervals) { PriorityQueue&lt;Interval&gt; minHeap = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o1.start, o2.start)); //Stack&lt;Interval&gt; stack = new Stack&lt;&gt;(); List&lt;Interval&gt; result = new ArrayList&lt;&gt;(); if(intervals.size() == 0){ return result; } for(Interval i:intervals){ minHeap.add(i); } Interval pre = new Interval(); if(!minHeap.isEmpty()){ pre = minHeap.poll(); } while(!minHeap.isEmpty()){ Interval cur = minHeap.peek(); if(pre.end &gt;= cur.start){ minHeap.remove(); //minHeap.add(new Interval(pre.start, cur.end)); pre = new Interval(pre.start, Math.max(cur.end, pre.end)); }else{ result.add(pre); pre = minHeap.remove(); } } result.add(pre); return result; }} 76. Minimum Window Substring &#x6BD4;&#x4E0A;&#x6B21;&#x5F3A;&#xFF0C;&#x4E09;&#x904D;&#x5C31;&#x8FC7;&#x4E86;&#xFF0C;&#x4E00;&#x5B9A;&#x8981;&#x65F6;&#x65F6;&#x523B;&#x523B;&#x8003;&#x8651;&#x8D8A;&#x754C;&#x7684;&#x4E8B;&#x60C5; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556class Solution { public String minWindow(String s, String t) { //&#x628A;T&#x8FC7;&#x4E00;&#x904D;&#xFF0C;&#x627E;&#x5230;&#x90FD;&#x6709;&#x54EA;&#x4E9B;&#x5B57;&#x6BCD;&#xFF0C;&#x5E76;&#x4E14;&#x6BCF;&#x4E2A;&#x5B57;&#x6BCD;&#x51FA;&#x73B0;&#x51E0;&#x6B21; //&#x628A;S&#x8FC7;&#x4E00;&#x904D; //&#x5982;&#x679C;&#x5F53;&#x524D;&#x5B57;&#x6BCD;&#x51FA;&#x73B0;&#x5728;T&#x4E2D;&#xFF0C;freq++,&#x5982;&#x679C;&#x6CA1;&#x8FBE;&#x5230;T&#x4E2D;&#x7684;freq&#xFF0C;cnt-- //freqS[s[start]] &gt; freqT[s[start]],&#x5220;&#x9664;&#x5B57;&#x6BCD; //&#x5982;&#x679C;cnt==0&#xFF0C;&#x53D6;&#x51FA;substring String result = s; if(t.length() == 0){ return &quot;&quot;; } boolean[] map = new boolean[256]; int[] freqT = new int[256]; int[] freqS = new int[256]; int cnt = t.length(); int start = 0; //&#x628A;T&#x8FC7;&#x4E00;&#x904D;&#xFF0C;&#x627E;&#x5230;&#x90FD;&#x6709;&#x54EA;&#x4E9B;&#x5B57;&#x6BCD;&#xFF0C;&#x5E76;&#x4E14;&#x6BCF;&#x4E2A;&#x5B57;&#x6BCD;&#x51FA;&#x73B0;&#x51E0;&#x6B21; for(int i=0; i&lt;t.length(); i++){ char c = t.charAt(i); map[c] = true; freqT[c]++; } //&#x628A;S&#x8FC7;&#x4E00;&#x904D; for(int i=0; i&lt;s.length(); i++){ char cur = s.charAt(i); //&#x5982;&#x679C;&#x5F53;&#x524D;&#x5B57;&#x6BCD;&#x51FA;&#x73B0;&#x5728;T&#x4E2D;&#xFF0C;freq++,&#x5982;&#x679C;&#x6CA1;&#x8FBE;&#x5230;T&#x4E2D;&#x7684;freq&#xFF0C;cnt-- if(map[cur]){ freqS[cur]++; if(freqS[cur] &lt;= freqT[cur]){ cnt--; } } //freqS[s[start]] &gt; freqT[s[start]],&#x5220;&#x9664;&#x5B57;&#x6BCD; while(start &lt; s.length() &amp;&amp; (freqS[s.charAt(start)] &gt; freqT[s.charAt(start)] || !map[s.charAt(start)])){//&#x5982;&#x679C;start&#x4E0A;&#x7684;&#x70B9;&#x4E00;&#x76F4;&#x4E0D;&#x5728;t&#x4E2D;&#xFF0C;&#x4E00;&#x76F4;&#x5220;&#x4E00;&#x76F4;&#x5220;&#x4F1A;&#x51FA;&#x73B0;&#x8D8A;&#x754C; freqS[s.charAt(start)]--; start++; //System.out.println(start); } //&#x5982;&#x679C;cnt==0&#xFF0C;&#x53D6;&#x51FA;substring if(cnt == 0 &amp;&amp; result.length()&gt;i+1-start){ result = s.substring(start, i+1); } } if(cnt &gt; 0 &amp;&amp; result == s){ return &quot;&quot;; } return result; }} 179. Largest Number &#x5199;&#x7684;&#x6BD4;&#x8001;&#x5E08;&#x505A;&#x7684;&#x9EBB;&#x70E6;&#xFF0C;&#x4E0D;&#x8FC7;&#x5FEB;&#x4E86;&#x4E00;&#x4E9B; 123456789101112131415161718192021222324252627282930313233343536373839404142class Solution { public String largestNumber(int[] nums) { //&#x957F;&#x5EA6;&#x76F8;&#x7B49;&#xFF0C;&#x6BD4;&#x8F83;&#x5927;&#x5C0F; //&#x957F;&#x5EA6;&#x4E0D;&#x7B49;&#xFF0C;&#x6BD4;&#x8F83;s1s2&#x548C;s2s1 //String result = &quot;&quot;; Comparator&lt;Integer&gt; comparator = new Comparator(){ @Override public int compare(Object o1, Object o2){ String s1 = String.valueOf(o1); String s2 = String.valueOf(o2); if(s1.length() == s2.length()){ return s2.compareTo(s1); }else{ String c1 = s1 + s2; String c2 = s2 + s1; return c2.compareTo(c1); } } }; PriorityQueue&lt;Integer&gt; minHeap = new PriorityQueue&lt;&gt;(comparator); for(int num:nums){ minHeap.add(num); } StringBuilder sb = new StringBuilder(); while(!minHeap.isEmpty()){ sb.append(minHeap.poll()); } String result = sb.toString(); if(result.equals(&quot;&quot;) || result.charAt(0) == &apos;0&apos;){ return &quot;0&quot;; } return sb.toString(); }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>56</tag>
        <tag>179</tag>
        <tag>50</tag>
        <tag>76</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 5, Day 32, 4/10/2019]]></title>
    <url>%2F2019%2F04%2F10%2FDay-32%2F</url>
    <content type="text"><![CDATA[LeetCode - (0 Easy, 0 Medium, 1 Hard) &#x65B0;&#x9898; 239. Sliding Window Maximum - Hard &#x4F7F;&#x7528;deque&#xFF0C;&#x4E0D;&#x662F;&#x65B0;&#x9898;&#xFF0C;&#x53EA;&#x662F;&#x6362;&#x4E86;&#x4E00;&#x79CD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x3002; 123456789101112131415161718192021222324252627282930313233343536373839class Solution { public int[] maxSlidingWindow(int[] nums, int k) { if(nums.length == 0){ return new int[]{}; } int[] result = new int[nums.length - k + 1]; Deque&lt;Integer&gt; deque = new LinkedList&lt;&gt;(); for(int i=0; i&lt;nums.length; i++){ while(!deque.isEmpty() &amp;&amp; nums[deque.getLast()] &lt; nums[i]){ deque.removeLast(); } //&#x6DFB;&#x52A0;&#x81EA;&#x5DF1; deque.add(i); //&#x628A;&#x5DE6;&#x9762;k&#x4EE5;&#x5916;&#x7684;&#x6570;&#x5220;&#x6389; if(deque.getFirst() == i-k){ deque.removeFirst(); } // &#x5220;&#x6389;&#x524D;&#x9762;&#x6BD4;&#x81EA;&#x5DF1;&#x5C0F;&#x7684;&#x6570; while(!deque.isEmpty() &amp;&amp; nums[deque.getFirst()] &lt; nums[i]){ deque.removeFirst(); } if(i-k+1&gt;=0){ result[i-k+1] = nums[deque.getFirst()]; } } return result; }} &#x590D;&#x4E60; 853. Car Fleet 123456789101112131415161718192021222324252627282930313233class Solution { public int carFleet(int t, int[] p, int[] s) { if(p.length == 0){ return 0; } TreeMap&lt;Integer, Double&gt; map = new TreeMap&lt;&gt;((o1, o2) -&gt; Integer.compare(o2, o1));//TreeMap &#x4EE5;key&#x964D;&#x5E8F;&#x6392;&#x5217;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5199; for(int i=0; i&lt;p.length; i++){ double time = (double)(1.0*(t-p[i])/s[i]); map.put(p[i], time); } Iterator&lt;Map.Entry&lt;Integer, Double&gt;&gt; itr = map.entrySet().iterator(); double preT = itr.next().getValue(); //double gTime = preT; int result = 1; while(itr.hasNext()){ //System.out.println(itr.next()); double curT = itr.next().getValue(); if(curT &gt; preT){ result++; preT = curT; } } return result; }} 3. Longest Substring Without Repeating Characters 123456789101112131415161718192021222324252627282930313233class Solution { public int lengthOfLongestSubstring(String s) { int start = 0; int result = 0; boolean[] map = new boolean[256]; for(int i=0; i&lt;s.length(); i++){ //System.out.println(&quot;i: &quot; + i); //System.out.println(&quot;start: &quot; + start); //System.out.println(map[s.charAt(i)]); if(map[s.charAt(i)]){//&#x5DF2;&#x7ECF;&#x6709;&#x4E86; if(result &lt; i-start){ result = i-start; } while(s.charAt(start) != s.charAt(i)){ map[s.charAt(start)] = false; start++; } start++; } map[s.charAt(i)] = true; } if(result == 0 || result &lt; s.length() - start){ result = s.length() - start; } return result; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>239</tag>
        <tag>853</tag>
        <tag>3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 5, Day 31, 4/9/2019]]></title>
    <url>%2F2019%2F04%2F09%2FDay-31%2F</url>
    <content type="text"><![CDATA[LeetCode - (0 Easy, 1 Medium, 2 Hard) 76. Minimum Window Substring - Hard &#x4E0D;&#x77E5;&#x9053;&#x8BE5;&#x8BF4;&#x96BE;&#x8FD8;&#x662F;&#x4E0D;&#x96BE;&#xFF0C;&#x4E00;&#x5F00;&#x59CB;&#x5C31;&#x6709;&#x601D;&#x8DEF;&#x4F46;&#x662F;&#x6709;&#x70B9;&#x6B6A; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253class Solution { public String minWindow(String s, String t) { String result = &quot;&quot;; int[] freq = new int[256]; int[] map = new int[256]; int start = 0; int cnt = 0; for(int i=0; i&lt;t.length(); i++){ map[t.charAt(i)]++; } for(int i=0; i&lt;s.length();i++){//&#x53BB;&#x9664;&#x4E00;&#x5F00;&#x59CB;&#x7684;&#x6CA1;&#x7528;&#x5B57;&#x6BCD; char c=s.charAt(i); if(map[c] != 0){ start = i; break; } } for(int i=start; i&lt;s.length();i++){ char c = s.charAt(i); if(map[c] == 0){//&#x5982;&#x679C;&#x4E0D;&#x5728;t&#x4E2D; continue; } //&#x5728;t&#x4E2D; if(freq[c] &lt; map[c]){//substring&#x8FD8;&#x6CA1;&#x6709;&#x51FA;&#x73B0;&#x591F;&#x8FD9;&#x4E2A;&#x5B57;&#x6BCD; cnt++; } freq[c]++; if(cnt &gt;= t.length()){ //&#x7B2C;&#x4E00;&#x6B21;&#x7ED9;result&#x8D4B;&#x503C; &#x6216; &#x65B0;&#x7684;&#x6BD4;&#x65E7;&#x7684;&#x77ED; if(result.length() == 0 || i+1-start &lt; result.length()){ result = s.substring(start, i+1); } //&#x5982;&#x679C;start&#x5904;&#x7684;&#x5B57;&#x6BCD;&#x591A;&#x4F59;&#x5C31;&#x51CF;&#x6389; while(freq[s.charAt(start)] &gt; map[s.charAt(start)] || map[s.charAt(start)] == 0){ freq[s.charAt(start)]--; start++; if(map[s.charAt(start)] &gt; 0 &amp;&amp; i+1-start &lt; result.length()){ result = s.substring(start, i+1);//&#x5982;&#x679C;T&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x5B57;&#x6BCD;&#x90FD;&#x5728;&#x7684;&#x8BDD; } } } } return result; }} 632. Smallest Range - Hard TLE&#x4E86; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354class Solution { public int[] smallestRange(List&lt;List&lt;Integer&gt;&gt; nums) { //&#x628A;&#x6240;&#x6709;&#x7684;&#x6570;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#xFF0C;&#x4F46;&#x662F;&#x9644;&#x5E26;&#x6807;&#x8BB0;&#x5C5E;&#x4E8E;&#x54EA;&#x4E2A;list //start index = 0, end index = k, &#x628A;&#x4E2D;&#x95F4;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;group num&#x8FC7;&#x4E00;&#x904D;&#xFF0C;&#x770B;&#x7F3A;&#x4E0D;&#x7F3A;&#xFF0C;&#x5982;&#x679C;&#x7F3A;&#xFF0C;end++&#xFF0C;&#x76F4;&#x5230;&#x90FD;&#x4E0D;&#x7F3A;&#xFF0C;start++,start&#x548C;end&#x90FD;&#x5C5E;&#x4E8E;list&#x624D;&#x4F1A;&#x6700;&#x5C0F; int[] result = new int[2]; //result[0] = Integer.MIN_VALUE; //result[1] = Integer.MAX_VALUE; //&#x628A;&#x6240;&#x6709;&#x7684;&#x6570;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#xFF0C;&#x9644;&#x5E26;&#x6807;&#x8BB0;&#x5C5E;&#x4E8E;&#x54EA;&#x4E2A;list List&lt;List&lt;Integer&gt;&gt; full = new ArrayList&lt;&gt;(); PriorityQueue&lt;List&lt;Integer&gt;&gt; minHeap = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o1.get(0), o2.get(0))); for(int i=0; i&lt;nums.size(); i++){ List&lt;Integer&gt; subList = nums.get(i); for(int j=0; j&lt;subList.size(); j++){ List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); list.add(subList.get(j)); list.add(i); minHeap.add(list); } } while(!minHeap.isEmpty()){ full.add(minHeap.poll()); } //start index = 0, end index = k, &#x628A;&#x4E2D;&#x95F4;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;group num&#x8FC7;&#x4E00;&#x904D;&#xFF0C;&#x770B;&#x7F3A;&#x4E0D;&#x7F3A;&#xFF0C;&#x5982;&#x679C;&#x7F3A;&#xFF0C;end++&#xFF0C;&#x76F4;&#x5230;&#x90FD;&#x4E0D;&#x7F3A;&#xFF0C;start++ int k = nums.size(); int end = 0; for(int i=0; i&lt;full.size(); i++){ boolean[] can = new boolean[k]; int cnt = 0; for(int j = i; j&lt;full.size(); j++){ int group = full.get(j).get(1); if(!can[group]){//&#x65B0;&#x7684;group cnt++; can[group]=true; } if(cnt == k){//&#x6240;&#x6709;group&#x90FD;&#x6709;&#x4E86;&#xFF0C;start++&#xFF0C;result&#x53EF;&#x4EE5;&#x6539;&#x4E86; if((full.get(j).get(0) - full.get(i).get(0) &lt; result[1] - result[0]) || (result[0] ==0 &amp;&amp; result[1] ==0)){ result[0] = full.get(i).get(0); result[1] = full.get(j).get(0); } break; } } } return result; }} &#x53EF;&#x4EE5;&#x8DD1;&#x8FC7;&#x7684; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859class Solution { public int[] smallestRange(List&lt;List&lt;Integer&gt;&gt; nums) { long[] result = new long[]{Integer.MIN_VALUE, Integer.MAX_VALUE}; PriorityQueue&lt;List&lt;Integer&gt;&gt; minHeap = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o1.get(0), o2.get(0))); //&#x5F80;minHeap&#x91CC;&#x52A0;&#x5165;&#x6BCF;&#x4E2A;group&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;minHeap&#x91CC;&#x6709;&#x6BCF;&#x4E2A;group&#x4E2D;&#x7684;&#x6570;&#x5B57; for(int i=0; i&lt;nums.size(); i++){ List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); list.add(nums.get(i).get(0)); list.add(i); minHeap.add(list); nums.get(i).remove(0); } int cnt = 0; Queue&lt;Integer&gt; qV = new LinkedList&lt;&gt;(); Queue&lt;Integer&gt; qG = new LinkedList&lt;&gt;(); int[] freq = new int[nums.size()]; while(!minHeap.isEmpty()){ //System.out.println(minHeap.peek()); List&lt;Integer&gt; cur = minHeap.poll(); int v = cur.get(0); int g = cur.get(1); qV.add(v); qG.add(g); if(freq[g] == 0){ cnt++; } freq[g]++; if(cnt == nums.size()){ while(!qG.isEmpty()){ if(freq[qG.peek()] &gt; 1){ freq[qG.peek()]--; qG.remove(); qV.remove(); }else{ break; } } if(v - qV.peek() &lt; result[1] - result[0]){ result[0] = qV.peek(); result[1] = v; } } //&#x628A;&#x540C;&#x4E00;&#x4E2A;group&#x4E2D;&#x7684;&#x4E0B;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x52A0;&#x7D27;minHeap if(!nums.get(g).isEmpty()){ List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); list.add(nums.get(g).get(0)); list.add(g); minHeap.add(list); nums.get(g).remove(0); } } return new int[]{(int)result[0], (int)result[1]}; }} &#x521B;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;&#x65B0;&#x7684;class&#xFF0C;&#x5FEB;&#x4E86;&#x4E00;&#x4E22;&#x4E22; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162class Solution { public int[] smallestRange(List&lt;List&lt;Integer&gt;&gt; nums) { long[] result = new long[]{Integer.MIN_VALUE, Integer.MAX_VALUE}; PriorityQueue&lt;Pos&gt; minHeap = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o1._v, o2._v)); //&#x5F80;minHeap&#x91CC;&#x52A0;&#x5165;&#x6BCF;&#x4E2A;group&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;minHeap&#x91CC;&#x6709;&#x6BCF;&#x4E2A;group&#x4E2D;&#x7684;&#x6570;&#x5B57; for(int i=0; i&lt;nums.size(); i++){ minHeap.add(new Pos(nums.get(i).get(0), i)); nums.get(i).remove(0); } int cnt = 0; Queue&lt;Integer&gt; qV = new LinkedList&lt;&gt;(); Queue&lt;Integer&gt; qG = new LinkedList&lt;&gt;(); int[] freq = new int[nums.size()]; while(!minHeap.isEmpty()){ //System.out.println(minHeap.peek()); Pos cur = minHeap.poll(); int v = cur._v; int g = cur._g; qV.add(v); qG.add(g); if(freq[g] == 0){ cnt++; } freq[g]++; if(cnt == nums.size()){ while(!qG.isEmpty()){ if(freq[qG.peek()] &gt; 1){ freq[qG.peek()]--; qG.remove(); qV.remove(); }else{ break; } } if(v - qV.peek() &lt; result[1] - result[0]){ result[0] = qV.peek(); result[1] = v; } } //&#x628A;&#x540C;&#x4E00;&#x4E2A;group&#x4E2D;&#x7684;&#x4E0B;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x52A0;&#x7D27;minHeap if(!nums.get(g).isEmpty()){ minHeap.add(new Pos(nums.get(g).get(0), g)); nums.get(g).remove(0); } } return new int[]{(int)result[0], (int)result[1]}; } private class Pos{ int _v; int _g; public Pos(int value, int group){ _v = value; _g = group; } }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>76</tag>
        <tag>632</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 5, Day 30, 4/8/2019]]></title>
    <url>%2F2019%2F04%2F08%2FDay-30%2F</url>
    <content type="text"><![CDATA[30&#x5929;&#x4E86;&#xFF0C;&#x4ECA;&#x5929;&#x5F88;&#x56F0;&#xFF0C;&#x56E0;&#x4E3A;&#x4E03;&#x70B9;&#x534A;&#x5C31;&#x4E0A;&#x73ED;&#x4E86;&#xFF0C;&#x4E94;&#x70B9;&#x4E0B;&#x73ED;&#x6765;&#x56FE;&#x4E66;&#x9986;&#x52A0;&#x6CB9;&#xFF01; LeetCode - (0 Easy, 2 Medium, 1 Hard) 244. Shortest Word Distance 2 - Medium &#x4E00;&#x628A;&#x8FC7;&#xFF0C;&#x60F3;&#x4E0D;&#x5230;&#x554A;&#x60F3;&#x4E0D;&#x5230; 12345678910111213141516171819202122232425262728293031323334353637383940414243class WordDistance { Map&lt;String, TreeSet&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;(); public WordDistance(String[] words) { for(int i=0; i&lt;words.length; i++){ if(!map.containsKey(words[i])){ TreeSet&lt;Integer&gt; bst = new TreeSet&lt;&gt;(); bst.add(i); map.put(words[i], bst); }else{ TreeSet&lt;Integer&gt; bst = map.get(words[i]); bst.add(i); map.put(words[i], bst); } } } public int shortest(String word1, String word2) { TreeSet&lt;Integer&gt; set1 = map.get(word1); TreeSet&lt;Integer&gt; set2 = map.get(word2); int min = Integer.MAX_VALUE; Iterator itr = set1.iterator(); while(itr.hasNext()){ int cur = (int)(itr.next()); if(set2.ceiling(cur) != null){ min = Math.min(min, set2.ceiling(cur)-cur); } if(set2.floor(cur) != null){ min = Math.min(min, cur-set2.floor(cur)); } } return min; }}/** * Your WordDistance object will be instantiated and called as such: * WordDistance obj = new WordDistance(words); * int param_1 = obj.shortest(word1,word2); */ 3. Longest Substring Without Repeating Characters - Medium &#x5DEE;&#x70B9;&#x4E00;&#x6B21;&#x5C31;&#x8FC7;&#x4E86;&#xFF0C;&#x7ED3;&#x679C;&#x603B;&#x4E0D;&#x52A8;&#x624B;&#x753B;&#x4E00;&#x753B;&#xFF0C;&#x8D8A;&#x60F3;&#x8D8A;&#x504F; 1234567891011121314151617181920212223242526272829303132class Solution { public int lengthOfLongestSubstring(String s) { if(s.length() == 0){ //System.out.println(&quot;test&quot;); return 0; } Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;(); //System.out.println(s.length()); int start = 0; int result = 1; for(int i=0; i&lt;s.length(); i++){ char c = s.charAt(i); if(!map.containsKey(c)){ map.put(c, i); }else{ result = Math.max(result, i-start); int pre = map.get(c); while(pre&gt;=start){ map.remove(start); start++; } //start = map.get(c) + 1; map.put(c, i); } } result = Math.max(result, s.length()-start); return result; }} 340. Longest Substring with At Most K Distinct Characters - Hard &#x4E00;&#x6B21;&#x8FC7;&#xFF0C;&#x592A;&#x7D27;&#x5F20;&#x4E86;&#xFF0C;&#x8FD8;&#x662F;&#x8981;&#x52A8;&#x7B14;&#x753B;&#x753B;&#x554A; 1234567891011121314151617181920212223242526272829303132333435class Solution { public int lengthOfLongestSubstringKDistinct(String s, int k) { if(s.length() == 0){ return 0; } int start = 0; int cnt = 0; int result = 0; int[] map = new int[256]; for(int i=0; i&lt;s.length(); i++){ char c = s.charAt(i); if(map[c] != 0){//&#x5B58;&#x5728; map[c]++; }else{//&#x4E0D;&#x5B58;&#x5728; cnt++; map[c]++; if(cnt &gt; k){ result = Math.max(i-start,result); while(cnt &gt; k){ map[s.charAt(start)]--; if(map[s.charAt(start)] == 0){ cnt--; } start++; } } } } result = Math.max(result, s.length()-start); return result; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>244</tag>
        <tag>3</tag>
        <tag>340</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 4, Day 29, 4/7/2019]]></title>
    <url>%2F2019%2F04%2F07%2FDay-29%2F</url>
    <content type="text"><![CDATA[LeetCode - (0 Easy, 1 Medium, 0 Hard) 50.Pow(x, n) - Medium 123456789101112131415161718192021222324252627282930313233343536class Solution { //double _result = 1.0; public double myPow(double x, int n) { if(x == 0){ return 0; }else{ if(n == 0){ return 1; } return newPow(x, n); } } private double newPow(double x, long n){ if(n&lt;0){ return 1/newPow(x, -1*n); } if(n/2 &gt; 0){ double temp = 1.0; if(n%2 == 0){ temp = newPow(x, n/2); return temp*temp; }else{ temp = newPow(x, n/2); return temp*temp*x; } //return temp*temp; }else{ return x; } }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>50</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 4, Day 28, 4/6/2019]]></title>
    <url>%2F2019%2F04%2F07%2FDay-28%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F;&#x4F11;&#x606F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 4, Day 27, 4/5/2019]]></title>
    <url>%2F2019%2F04%2F07%2FDay-27%2F</url>
    <content type="text"><![CDATA[&#x4F11;&#x606F;&#x4F11;&#x606F;&#xFF0C;&#x770B;&#x4E86;&#x5BC6;&#x5BA4;&#x9003;&#x8131;&#xFF0C;&#x6768;&#x5E42;&#x771F;&#x597D;&#x770B;&#x554A;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 4, Day 26, 4/4/2019]]></title>
    <url>%2F2019%2F04%2F04%2FDay-26%2F</url>
    <content type="text"><![CDATA[Collections.sort() &#x9996;&#x5148;&#x8981;&#x77E5;&#x9053;&#x4E24;&#x4E2A;&#x7C7B;:java.util.Arrays&#x548C;java.util.Collections(&#x6CE8;&#x610F;&#x548C;Collection&#x7684;&#x533A;&#x522B;)&#x3002;Collection&#x662F;&#x96C6;&#x5408;&#x6846;&#x67B6;&#x7684;&#x9876;&#x5C42;&#x63A5;&#x53E3;&#xFF0C;&#x800C;Collections&#x662F;&#x5305;&#x542B;&#x4E86;&#x8BB8;&#x591A;&#x9759;&#x6001;&#x65B9;&#x6CD5;&#x3002;&#x6211;&#x4EEC;&#x4F7F;&#x7528;Arrays&#x5BF9;&#x6570;&#x7EC4;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x4F7F;&#x7528;Collections&#x5BF9;&#x7ED3;&#x5408;&#x6846;&#x67B6;&#x5BB9;&#x5668;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x5982;ArraysList,LinkedList&#x7B49;&#x3002; Ref: Collections.sort() &amp;&amp; Arrays.sort() Ref: Java&#x4E2D;Collections.sort()&#x6392;&#x5E8F;&#x8BE6;&#x89E3; LeetCode - (0 Easy, 4 Medium, 0 Hard) 56. Merge Intervals - Medium 1234567891011121314151617181920212223242526272829/** * Definition for an interval. * public class Interval { * int start; * int end; * Interval() { start = 0; end = 0; } * Interval(int s, int e) { start = s; end = e; } * } */class Solution { public List&lt;Interval&gt; merge(List&lt;Interval&gt; intervals) { Collections.sort(intervals, (o1, o2) -&gt; {return Integer.compare(o1.start, o2.start);}); List&lt;Interval&gt; result = new ArrayList&lt;&gt;(); for(int i=0; i&lt;intervals.size(); i++){ if(!result.isEmpty() &amp;&amp; intervals.get(i).start &lt;= result.get(result.size()-1).end){ result.get(result.size()-1).end = Math.max(result.get(result.size()-1).end, intervals.get(i).end); }else{ result.add(intervals.get(i)); } } return result; }} 179. Largest Number - Medium 12345678910111213141516171819class Solution { public String largestNumber(int[] nums) { List&lt;String&gt; list = new ArrayList&lt;&gt;(); for(int num:nums){ list.add(num+&quot;&quot;); } Collections.sort(list, (o1, o2) -&gt; (o2+o1).compareTo(o1+o2)); StringBuilder sb = new StringBuilder(); for(String str:list){ sb.append(str); } return sb.toString().charAt(0) == &apos;0&apos; ? &quot;0&quot;: sb.toString(); }} 853. Car Fleet - Medium 12345678910111213141516171819202122232425262728293031323334353637class Solution { public int carFleet(int t, int[] p, int[] s) { if(p.length == 0){ return 0; } TreeMap&lt;Integer, Integer&gt; map = new TreeMap&lt;&gt;((o1, o2) -&gt; Integer.compare(o2, o1)); for(int i=0; i&lt;p.length; i++){ map.put(p[i], s[i]); } int result = 1; Set&lt;Integer&gt; keys = map.keySet(); Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; iter = map.entrySet().iterator(); Map.Entry&lt;Integer, Integer&gt; pre = iter.next(); int preKey = pre.getKey(); int preValue = pre.getValue(); //System.out.print(key0); while(iter.hasNext()){ Map.Entry&lt;Integer, Integer&gt; cur = iter.next(); int curKey = cur.getKey(); int curValue = cur.getValue(); if((t-curKey)*1.0/curValue &lt;= (t-preKey)*1.0/preValue){ continue; }else{ result++; preKey = curKey; preValue = curValue; } } return result; }} 253. Meeting Rooms 2 - Medium 12345678910111213141516171819202122232425262728/** * Definition for an interval. * public class Interval { * int start; * int end; * Interval() { start = 0; end = 0; } * Interval(int s, int e) { start = s; end = e; } * } */class Solution { public int minMeetingRooms(Interval[] intervals) { Arrays.sort(intervals, (o1, o2) -&gt; Integer.compare(o1.start, o2.start)); //&#x4E3A;&#x4EC0;&#x4E48;Collections.sort(intervals, (o1, o2) -&gt; {return Integer.compare(o1.start, o2.start);}); &#x4E0D;&#x884C; PriorityQueue&lt;Integer&gt; minHeap = new PriorityQueue&lt;&gt;(); for(Interval i: intervals){ if(!minHeap.isEmpty() &amp;&amp; minHeap.peek() &lt;= i.start){ minHeap.poll(); } minHeap.add(i.end); } return minHeap.size(); } } document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>56</tag>
        <tag>179</tag>
        <tag>853</tag>
        <tag>253</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 4, Day 25, 4/3/2019]]></title>
    <url>%2F2019%2F04%2F04%2FDay-25%2F</url>
    <content type="text"><![CDATA[&#x548C;X&#x804A;&#x5929; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 4, Day 24, 4/2/2019]]></title>
    <url>%2F2019%2F04%2F02%2FDay-24%2F</url>
    <content type="text"><![CDATA[LeetCode - (0 Easy, 1 Medium, 0 Hard) &#x590D;&#x4E60;&#xFF0C;&#x505A;&#x719F;&#x4E86;&#x4E4B;&#x540E;&#x4E0D;&#x5230;&#x4E00;&#x5C0F;&#x65F6;&#xFF0C;&#x4E24;&#x9053;Medium&#x4E00;&#x9053;Hard&#x3002;&#x5230;&#x6B64;&#x523B;&#x4E3A;&#x6B62;&#xFF0C;&#x6240;&#x6709;&#x505A;&#x8FC7;&#x7684;&#x9898;&#x90FD;&#x590D;&#x4E60;&#x4E86;&#x4E00;&#x904D;&#xFF08;&#x4E0A;&#x5468;&#x7684;&#x4EFB;&#x52A1;)&#x3002; &#x590D;&#x4E60; 295. Find Median from Data Stream 12345678910111213141516171819202122232425262728293031323334353637383940414243444546class MedianFinder { PriorityQueue&lt;Integer&gt; sHeap = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o2, o1)); PriorityQueue&lt;Integer&gt; lHeap = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o1, o2)); /** initialize your data structure here. */ public MedianFinder() { } public void addNum(int num) { if(sHeap.isEmpty()){ sHeap.add(num); }else{ if(num &gt; sHeap.peek()){ lHeap.add(num); }else{ sHeap.add(num); } } //System.out.println(sHeap.size()); //System.out.println(lHeap.size()); if(sHeap.size() == lHeap.size() - 1){ sHeap.add(lHeap.poll()); }else if(sHeap.size() == lHeap.size() + 2){ lHeap.add(sHeap.poll()); } } public double findMedian() { if(sHeap.size() == lHeap.size()){ return (double)((sHeap.peek() + lHeap.peek())/2.0); }else{ return (double)(sHeap.peek()); } }}/** * Your MedianFinder object will be instantiated and called as such: * MedianFinder obj = new MedianFinder(); * obj.addNum(num); * double param_2 = obj.findMedian(); */ 299. Bulls and Cows 12345678910111213141516171819202122232425262728class Solution { public String getHint(String s, String g) { int cntA = 0; int cntB = 0; int[] numS = new int[10]; int[] numG = new int[10]; for(int i=0; i &lt; s.length(); i++){ char cS = s.charAt(i); char cG = g.charAt(i); if(cS == cG){ cntA++; }else{ numS[cS - &apos;0&apos;]++; numG[cG - &apos;0&apos;]++; } } for(int i=0; i &lt; 10; i++){ cntB += Math.min(numS[i], numG[i]); } return cntA + &quot;A&quot; + cntB + &quot;B&quot;; }} 729. My Calendar 1 123456789101112131415161718192021222324252627282930class MyCalendar { TreeMap&lt;Integer, Integer&gt; bst = new TreeMap&lt;&gt;((o1, o2)-&gt;Integer.compare(o1, o2)); public MyCalendar() { } public boolean book(int start, int end) { Map.Entry&lt;Integer, Integer&gt; floor = bst.floorEntry(start); if(floor != null &amp;&amp; floor.getValue() &gt; start){ return false; } Map.Entry&lt;Integer, Integer&gt; ceiling = bst.ceilingEntry(start); if(ceiling != null &amp;&amp; end &gt; ceiling.getKey()){ return false; } bst.put(start, end); return true; }}/** * Your MyCalendar object will be instantiated and called as such: * MyCalendar obj = new MyCalendar(); * boolean param_1 = obj.book(start,end); */ &#x65B0;&#x9898; 692. Top K Frequent Words 123456789101112131415161718192021222324252627282930313233343536373839404142class Solution { public List&lt;String&gt; topKFrequent(String[] words, int k) { Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;(); for(String word : words){ map.put(word, map.containsKey(word)?map.get(word)+1:1); } Comparator&lt;Map.Entry&lt;String, Integer&gt;&gt; comparator = new Comparator(){ @Override public int compare(Object o1, Object o2){ Map.Entry&lt;String, Integer&gt; s1 = (Map.Entry&lt;String, Integer&gt;)(o1); Map.Entry&lt;String, Integer&gt; s2 = (Map.Entry&lt;String, Integer&gt;)(o2); return Integer.compare(s1.getValue(), s2.getValue()) != 0 ? Integer.compare(s1.getValue(), s2.getValue()) : s2.getKey().compareTo(s1.getKey()); } };//&#x8FD9;&#x662F;&#x4E00;&#x884C;&#x8BED;&#x53E5; new comparator PriorityQueue&lt;Map.Entry&lt;String, Integer&gt;&gt; minHeap = new PriorityQueue&lt;&gt;(comparator); for(Map.Entry&lt;String, Integer&gt; entry:map.entrySet()){ if(minHeap.size() &lt; k){ minHeap.add(entry); }else{ int compareR = comparator.compare(entry, minHeap.peek()); if(compareR &gt; 0 ){ minHeap.poll(); minHeap.add(entry); } } } List&lt;String&gt; result = new LinkedList&lt;&gt;(); while(!minHeap.isEmpty()){ result.add(0, minHeap.poll().getKey());//void add(int index, Object element): This method inserts an element at a specified index in the list. It shifts the element currently at that position (if any) and any subsequent elements to the right (will add one to their indices). } return result; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>299</tag>
        <tag>729</tag>
        <tag>295</tag>
        <tag>692</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 4, Day 23, 4/1/2019]]></title>
    <url>%2F2019%2F04%2F01%2FDay-23%2F</url>
    <content type="text"><![CDATA[&#x4ECA;&#x5929;&#x96BE;&#x53D7;&#xFF0C;&#x4E0B;&#x5348;&#x4E09;&#x70B9;&#x5C31;&#x6765;&#x5BB6;&#x7761;&#x89C9;&#x4E86;&#x3002;&#x73B0;&#x5728;&#x4E5D;&#x70B9;&#xFF0C;&#x51C6;&#x5907;&#x5F00;&#x59CB;&#x505A;&#x9898;&#x5566;&#xFF01; LeetCode &#x590D;&#x4E60; 205. Isomorphic Strings 12345678910111213141516171819202122232425262728class Solution { public boolean isIsomorphic(String s, String t) { if(s.length() == 0){ return true; } return isHalfIsomorphic(s, t) &amp;&amp; isHalfIsomorphic(t, s); } private boolean isHalfIsomorphic(String s, String t){ char[] word = new char[256]; for(int i=0; i&lt;s.length(); i++){ char curS = s.charAt(i); char curT = t.charAt(i); if(word[curS] == 0){ word[curS] = curT; }else{ if(word[curS] != curT){ return false; } } } return true; }} 228. Summary Ranges 12345678910111213141516171819202122232425262728class Solution { public List&lt;String&gt; summaryRanges(int[] nums) { if(nums.length == 0){ return new ArrayList&lt;&gt;(); } int start = 0; List&lt;String&gt; list = new ArrayList&lt;&gt;(); for(int i=1; i&lt;nums.length; i++){ if(nums[i] != nums[i-1] + 1){ list.add(group(nums[start], nums[i-1])); start = i; } } list.add(group(nums[start], nums[nums.length-1])); return list; } private String group(int start, int end){ if(start == end){ return start + &quot;&quot;; }else{ return start + &quot;-&gt;&quot; + end; } }} 239. Sliding Window Maximum 123456789101112131415161718192021222324class Solution { public int[] maxSlidingWindow(int[] nums, int k) { if(nums.length == 0){ return new int[0]; } int[] result = new int[nums.length - k + 1]; PriorityQueue&lt;Integer&gt; minHeap = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o2, o1)); for(int i=0; i&lt;k; i++){ minHeap.add(nums[i]); } for(int i=0; i&lt;nums.length-k+1; i++){ result[i] = minHeap.peek(); minHeap.remove(nums[i]); if(i != nums.length -k){ minHeap.add(nums[i+k]); } } return result; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>228</tag>
        <tag>205</tag>
        <tag>239</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 3, Day 22, 3/31/2019]]></title>
    <url>%2F2019%2F04%2F01%2FDay-22%2F</url>
    <content type="text"><![CDATA[&#x8BF7;&#x4E86;lindy&#x6765;&#x5BB6;&#x91CC;&#x5403;&#x996D;&#xFF0C;&#x4ECA;&#x5929;&#x4E0D;&#x662F;&#x5F88;&#x8212;&#x670D;&#xFF0C;&#x508D;&#x665A;&#x7761;&#x4E86;&#x4E00;&#x89C9;&#x7136;&#x540E;&#x53BB;&#x62D4;&#x4E86;&#x8349;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 3, Day 21, 3/30/2019]]></title>
    <url>%2F2019%2F03%2F31%2FDay-21%2F</url>
    <content type="text"><![CDATA[LeetCode &#x590D;&#x4E60; 163. Missing Ranges 12345678910111213141516171819202122232425262728293031323334353637class Solution { public List&lt;String&gt; findMissingRanges(int[] nums, int lower, int upper) { List&lt;String&gt; result = new ArrayList&lt;&gt;(); if(nums.length == 0){ result.add(combine(lower, upper)); return result; } int start = 0; if(nums[0] &gt; lower){ result.add(combine(lower, nums[0]-1)); } for(int i = 1; i &lt; nums.length; i++){ if(nums[i] != nums[i-1] + 1 &amp;&amp; nums[i] != nums[i-1]){ result.add(combine(nums[start]+1, nums[i]-1)); } start++; } if(nums[start] &lt; upper){ result.add(combine(nums[start]+1, upper)); } return result; } private String combine(int start, int end){ if(start == end){ return start +&quot;&quot;; }else{ return start + &quot;-&gt;&quot; + end; } }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>163</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 3, Day 20, 3/29/2019]]></title>
    <url>%2F2019%2F03%2F29%2FDay-20%2F</url>
    <content type="text"><![CDATA[&#x770B;&#x4E86;&#x4E00;&#x767D;&#x5929;&#x300A;&#x5927;&#x8BDD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x300B;&#x4E66;&#x5199;&#x7684;&#x771F;&#x597D;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x662F;&#x4E00;&#x5929;&#x4E24;&#x5929;&#x80FD;&#x770B;&#x5B8C;&#x7684;&#x3002;&#x6211;&#x592A;&#x5FC3;&#x6025;&#x4E86;&#xFF0C;&#x51C6;&#x5907;&#x8C03;&#x6574;&#x6218;&#x7565;&#xFF0C;&#x8FD8;&#x662F;&#x8981;&#x7EE7;&#x7EED;&#x5237;&#x9898;&#xFF0C;&#x7136;&#x540E;&#x6BCF;&#x5929;&#x770B;&#x70B9;&#x8FD9;&#x4E2A;&#x4E66;&#x3002;&#x603B;&#x5171;&#x4E5D;&#x7AE0;&#xFF0C;&#x524D;&#x4E24;&#x7AE0;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x4E00;&#x5929;&#x770B;&#x5B8C;&#x3002;&#x5176;&#x4F59;&#x7684;&#x4E89;&#x53D6;&#x6BCF;&#x5929;&#x4E00;&#x7AE0;&#x6216;&#x8005;&#x4E24;&#x5929;&#x4E00;&#x7AE0;&#x3002; &#x4ECA;&#x5929;&#x505A;&#x70B9;&#x65E7;&#x9898;&#xFF0C;&#x590D;&#x4E60;&#x590D;&#x4E60;&#xFF0C;&#x7136;&#x540E;&#x597D;&#x597D;&#x4F11;&#x606F;&#x4F11;&#x606F;&#x3002;&#x7CBE;&#x795E;&#x4E0D;&#x597D;&#x662F;&#x4E0D;&#x80FD;&#x597D;&#x597D;&#x5B66;&#x4E60;&#x7684;&#x3002; LeetCode &#x590D;&#x4E60; 23. Merge k Sorted Lists 1234567891011121314151617181920212223242526272829303132333435363738/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */class Solution { public ListNode mergeKLists(ListNode[] lists) { PriorityQueue&lt;ListNode&gt; queue = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o1.val, o2.val)); ListNode fake = new ListNode(99); ListNode cur = fake; for(ListNode list:lists){ if(list != null){ queue.add(list); } } while(!queue.isEmpty()){ ListNode node = queue.poll(); cur.next = node; cur = node; if(cur.next != null){ queue.add(cur.next); } } return fake.next; }} 36. Valid Sudoku 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455class Solution { public boolean isValidSudoku(char[][] board) { // row for(int i=0; i&lt;9; i++){ int[] nums = new int[9]; for(int j=0; j&lt;9; j++){ char num = board[i][j]; if(num &lt;= &apos;9&apos; &amp;&amp; num &gt;= &apos;1&apos;){ if(nums[num - &apos;1&apos;] == 0){ nums[num - &apos;1&apos;] = 1; }else{ return false; } } } } // col for(int i=0; i&lt;9; i++){ int[] nums = new int[9]; for(int j=0; j&lt;9; j++){ char num = board[j][i]; if(num &lt;= &apos;9&apos; &amp;&amp; num &gt;= &apos;1&apos;){ if(nums[num - &apos;1&apos;] == 0){ nums[num - &apos;1&apos;] = 1; }else{ return false; } } } } // small board for(int i=0; i&lt;3; i++){ for(int j=0; j&lt;3; j++){ int[] nums = new int[9]; for(int p=0; p&lt;3; p++){ for(int q=0; q&lt;3; q++){ char num = board[3*i+p][3*j+q]; if(num &lt;= &apos;9&apos; &amp;&amp; num &gt;= &apos;1&apos;){ if(nums[num - &apos;1&apos;] == 0){ nums[num - &apos;1&apos;] = 1; }else{ return false; } } } } } } return true; }} 38. Count and Say 12345678910111213141516171819202122232425262728class Solution { public String countAndSay(int n) { String result = &quot;1&quot;; for(int i = 2; i &lt;= n; i++){ int start = 0; StringBuilder sb = new StringBuilder(); int cnt = 1; for(int j=1; j&lt;result.length(); j++){ char c = result.charAt(start); if(result.charAt(j) != result.charAt(j-1)){ sb.append(cnt + &quot;&quot; + c); cnt = 1; start = j; }else{ cnt++; } } sb.append(cnt + &quot;&quot; + result.charAt(start));// sb.append(cnt+result.charAt(start))&#x4F1A;&#x51FA;&#x9519;&#xFF0C;&#x4F1A;&#x5148;&#x7528;&#x6570;&#x5B57;&#x5BB6;&#x5B57;&#x7B26;&#x5BF9;&#x5E94;&#x7684;&#x6570;&#x5B57;&#xFF1B;&#x53EF;&#x4EE5;append(cnt)first, then append(charAt(start)) result = sb.toString(); } return result; }} 80. Remove Duplicates from Sorted Array 2 12345678910111213141516class Solution { public int removeDuplicates(int[] nums) { if(nums.length &lt;= 2){ return nums.length; } int end = 1; for(int i = 2; i &lt; nums.length; i++){ if(nums[i] != nums[end-1]){ end++; nums[end] = nums[i]; } } return end+1; }} 151. Reverse Words in a String 123456789101112131415161718192021222324252627282930313233class Solution { public String reverseWords(String s) { if(s.length() == 0){ return &quot;&quot;; } Stack&lt;String&gt; stack = new Stack&lt;&gt;(); int start = 0; for(int i=1; i&lt;s.length(); i++){ if(s.charAt(i) == &apos; &apos;){ if(s.charAt(i-1) != &apos; &apos;){ String str = s.substring(start, i); stack.push(str); } start = i+1; } } if(s.charAt(s.length()-1) != &apos; &apos;){ stack.push(s.substring(start, s.length())); } StringBuilder sb = new StringBuilder(); while(!stack.isEmpty()){ sb.append(stack.pop() + &quot; &quot;); } return sb.toString().trim(); }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>80</tag>
        <tag>38</tag>
        <tag>151</tag>
        <tag>36</tag>
        <tag>23</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 3, Day 19, 3/28/2019]]></title>
    <url>%2F2019%2F03%2F29%2FDay-19%2F</url>
    <content type="text"><![CDATA[&#x60F3;&#x7CFB;&#x7EDF;&#x5B66;&#x4E60;&#x4E00;&#x4E0B;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x770B;&#x4E86;Head First Java&#xFF0C;&#x5E2E;&#x52A9;&#x4E0D;&#x5927;&#x3002;&#x627E;&#x5230;&#x4E00;&#x672C;&#x597D;&#x4E66;&#xFF0C;&#x300A;&#x5927;&#x8BDD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x300B;&#xFF0C;&#x665A;&#x4E0A;&#x770B;&#x7740;&#x770B;&#x7740;&#x7761;&#x7740;&#x4E86;&#x3002;&#x6700;&#x8FD1;&#x5F88;&#x4E4F;&#xFF0C;&#x8001;&#x4E86;&#x8001;&#x4E86;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 3, Day 18, 3/27/2019]]></title>
    <url>%2F2019%2F03%2F27%2FDay-18%2F</url>
    <content type="text"><![CDATA[LeetCode &#x590D;&#x4E60; 356. Linde Reflection 123456789101112131415161718192021222324252627282930313233343536373839404142434445class Solution { public boolean isReflected(int[][] points) { if(points.length == 0){ return true; } Map&lt;Integer, Set&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;(); for(int[] point : points){ int y = point[1]; int x = point[0]; if(map.containsKey(y)){ map.get(y).add(x); }else{ Set&lt;Integer&gt; set = new HashSet&lt;&gt;(); set.add(x); map.put(y, set); } } Set&lt;Integer&gt; set0 = map.get(points[0][1]); int max = Integer.MIN_VALUE; int min = Integer.MAX_VALUE; for(int i : set0){ max = Math.max(max, i); min = Math.min(min, i); } double mid = (min + max)/2.0; //System.out.println(&quot;mid: &quot;+ mid); for(Map.Entry&lt;Integer, Set&lt;Integer&gt;&gt; entry : map.entrySet()){ Set&lt;Integer&gt; set = entry.getValue(); for(int i:set){ //System.out.println(&quot;i: &quot; + i); int reflected = (int)(2*mid - i); if(!set.contains(reflected)){ return false; } } } return true; }} 781. Rabbits in Forest 123456789101112131415161718192021222324252627282930313233343536class Solution { public int numRabbits(int[] a) { if(a.length == 0){ return 0; } Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); for(int i : a){ int num = i+1; if(map.containsKey(num)){ map.put(num, map.get(num)+1);// &#x4E0D;&#x80FD;&#x76F4;&#x63A5;map.get(num)++ }else{ map.put(num, 1); } } int result = 0; for(Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()){ int num = entry.getKey(); int cnt = entry.getValue(); if(cnt &lt;= num){ result += num; }else{ if(cnt%num == 0){ result += cnt; }else{ result += num*(cnt/num + 1); } } } return result; }} 554. Brick Wall &#x597D;&#x597D;&#x7406;&#x89E3;iterator 123456789101112131415161718192021222324252627282930313233343536class Solution { public int leastBricks(List&lt;List&lt;Integer&gt;&gt; wall) { if(wall.size() == 0){ return 0; } Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); for(List&lt;Integer&gt; bricks : wall){ Iterator&lt;Integer&gt; itr = bricks.iterator(); int len = 0; while(itr.hasNext()){ len += itr.next(); if(!itr.hasNext()){ break; } if(map.containsKey(len)){ map.put(len, map.get(len)+1); }else{ map.put(len, 1); } } } int height = wall.size(); int min = height; for(Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()){ //System.out.println(&quot;key: &quot;+entry.getKey()); //System.out.println(&quot;value: &quot;+entry.getValue()); min = Math.min(min, height - entry.getValue()); } return min; }} &#x770B;&#x4E86;&#x65B0;&#x9898;&#xFF0C;692&#xFF0C;&#x53D1;&#x73B0;&#x73B0;&#x5728;&#x5BF9;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x77E5;&#x8BC6;&#x7684;&#x7F3A;&#x4E4F;&#x5DF2;&#x7ECF;&#x660E;&#x663E;&#x59A8;&#x788D;&#x6211;&#x7406;&#x89E3;&#x8001;&#x5E08;&#x7684;&#x7B54;&#x6848;&#x4E86;&#x3002;&#x4ECA;&#x665A;&#x4E0D;&#x505A;&#x65B0;&#x9898;&#x4E86;&#xFF0C;&#x6293;&#x7D27;&#x628A;head first java&#x8FC7;&#x4E00;&#x904D; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>554</tag>
        <tag>781</tag>
        <tag>356</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 3, Day 17, 3/26/2019]]></title>
    <url>%2F2019%2F03%2F26%2FDay-17%2F</url>
    <content type="text"><![CDATA[&#x72B6;&#x6001;&#x5F88;&#x5DEE;&#x8BF6;&#xFF0C;&#x590D;&#x4E60;&#x4E00;&#x9053;Medium&#x9898;&#x7ADF;&#x7136;&#x7528;&#x4E86;&#x4E00;&#x4E2A;&#x5C0F;&#x65F6;&#xFF0C;&#x903B;&#x8F91;&#x8FD8;&#x6A21;&#x68F1;&#x4E24;&#x53EF;&#x7684;&#x3002; LeetCode - 23, 358 (0 Easy, 0 Medium, 2 Hard) &#x590D;&#x4E60; 636. Exclusive Time of Functions &#x542D;&#x54E7;&#x505A;&#x4E86;&#x597D;&#x4E45; 1234567891011121314151617181920212223242526272829303132333435363738class Solution { public int[] exclusiveTime(int n, List&lt;String&gt; logs) { Node[] node = new Node[n]; Stack&lt;Node&gt; stack = new Stack&lt;&gt;(); int[] result = new int[n]; stack.push(new Node(99)); for(String log : logs){ String[] content = log.split(&quot;:&quot;); int id = Integer.valueOf(content[0]); int time = Integer.valueOf(content[2]); if(content[1].equals(&quot;start&quot;)){ node[id] = new Node(time); stack.push(node[id]); }else{ Node cur = stack.pop(); int timeUsed = time - cur._start + 1 - cur._consumedByOthers; stack.peek()._consumedByOthers += time - cur._start + 1; result[id] += timeUsed; } } return result; } private class Node{ int _start; int _consumedByOthers; public Node(int start){ _start = start; _consumedByOthers = 0; } }} 71. Simplify Path testcase 123456&quot;/home/&quot;&quot;/../&quot;&quot;/home//foo/&quot;&quot;/a/./b/../../c/&quot;&quot;/a/../../b/../c//.//&quot;&quot;/a//b////c/d//././/..&quot; code 12345678910111213141516171819202122232425262728293031323334353637383940414243class Solution { public String simplifyPath(String path) { int start = 1; Stack&lt;String&gt; stack = new Stack&lt;&gt;(); for(int i = 1; i &lt; path.length(); i++){ char cur = path.charAt(i); if(cur == &apos;/&apos; || i == path.length()-1){ String str = path.substring(start, i); if(i == path.length()-1 &amp;&amp; cur != &apos;/&apos;){ str = path.substring(start, i+1); //System.out.println(str); } if(str.equals(&quot;..&quot;) &amp;&amp; !stack.isEmpty()){ stack.pop(); }else if(!str.equals(&quot;.&quot;) &amp;&amp; !str.equals(&quot;..&quot;) &amp;&amp; !str.equals(&quot;&quot;)&amp;&amp;!str.equals(&quot;/&quot;)){ //System.out.println(&quot;start: &quot; + start); //System.out.println(&quot;i: &quot; + i); //System.out.println(str); stack.push(str); } start = i+1; } } if(start != path.length()){ String str = path.substring(start, path.length()); } StringBuilder sb = new StringBuilder(); if(!stack.isEmpty()){ for(String str: stack){ //System.out.println(str); sb.append(&quot;/&quot; + str); } }else{ return &quot;/&quot;; } return sb.toString(); }} 735. Asteroid Collision &#x5C1D;&#x8BD5;&#x5199;&#x5B8C;&#x4E4B;&#x540E;&#x8FC7;&#x6BCF;&#x4E00;&#x4E2A;testcase&#xFF0C;&#x5148;&#x67E5;&#x6F0F;&#x8865;&#x7F3A; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546class Solution { public int[] asteroidCollision(int[] a) { Stack&lt;Integer&gt; stack = new Stack&lt;&gt;(); if(a.length == 0){ return new int[0]; } for(int i = 0; i &lt; a.length; i++){ int cur = a[i]; if(stack.isEmpty()){ stack.push(cur); continue; } if(cur &gt; 0){ stack.push(a[i]); }else{ // a[i] &lt; 0 while(!stack.isEmpty() &amp;&amp; stack.peek() + cur &lt; 0 &amp;&amp; stack.peek() &gt; 0){ stack.pop(); } if(!stack.isEmpty() &amp;&amp; stack.peek() &lt; 0){ stack.push(cur); } if(stack.isEmpty()){ stack.push(cur); continue; } if(!stack.isEmpty() &amp;&amp; stack.peek() + cur == 0 ){ stack.pop(); } } } if(stack.isEmpty()){ return new int[0]; } int[] result = new int[stack.size()]; int i = 0; for(int num : stack){ result[i] = num; i++; } return result; }} &#x65B0;&#x9898; 23. Merge k Sorted Lists - Hard &#x94FE;&#x8868;&#x554A;&#x94FE;&#x8868; 12345678910111213141516171819202122232425262728293031323334353637/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */class Solution { public ListNode mergeKLists(ListNode[] lists) { PriorityQueue&lt;ListNode&gt; heep = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o1.val, o2.val)); ListNode fake = new ListNode(99); ListNode cur = fake; for(ListNode ln : lists){ if(ln != null){ heep.add(ln); } } while(!heep.isEmpty()){ ListNode node = heep.poll(); cur.next = node; cur = node; if(cur.next != null){ heep.add(cur.next); } } return fake.next; }} 358. Rearrange String k Distance Apart - Hard &#x505A;&#x4E0D;&#x52A8;&#x5566;&#x505A;&#x4E0D;&#x52A8;&#x5566; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556class Solution { public String rearrangeString(String s, int k) { if(k&lt;=0){ return s; } int[] freq = new int[26]; // &#x7B97;frequency for(int i = 0; i &lt; s.length(); i++){ freq[s.charAt(i) - &apos;a&apos;]++; } // &#x628A;&#x51FA;&#x73B0;&#x6B21;&#x6570;&#x591A;&#x7684;&#x653E;heap&#x5934;&#xFF0C;&#x5148;&#x6446;&#x51FA;&#x6765; PriorityQueue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(freq[o1], freq[o2]) != 0 ? Integer.compare(freq[o2], freq[o1]) : Integer.compare(o1, o2)); // &#x5148;&#x52A0;&#x4E00;&#x904D;&#x5B57;&#x6BCD; for(int i = 0; i &lt; 26; i++){ //System.out.println(i); if(freq[i] &gt; 0){ heap.add(i); //System.out.println(i); } } StringBuilder sb = new StringBuilder(); while(!heap.isEmpty()){ List&lt;Integer&gt; index = new ArrayList&lt;&gt;(); try{ for(int i=0; i &lt; k; i++){//&#x56E0;&#x4E3A;heap&#x91CC;&#x6BCF;&#x4E2A;&#x5B57;&#x6BCD;&#x53EA;&#x6709;&#x4E00;&#x904D;&#xFF0C;&#x5148;&#x52A0;&#x524D;k&#x4E2A;&#x5B57;&#x6BCD;&#xFF0C;&#x5F53;&#x5B57;&#x6BCD;&#x9891;&#x7387;&#x8FD8;&#x5927;&#x4E8E;0&#xFF0C;&#x628A;&#x5B57;&#x6BCD;&#x518D;&#x52A0;&#x56DE;heap int cur = heap.poll(); //&#x4E24;&#x5468;exception 1. &#x5B8C;&#x5168;&#x6CA1;&#x6709;&#x5B57;&#x6BCD;&#x9700;&#x8981;&#x52A0;&#x4E86; &#x90A3;&#x4E48;&#x8FD4;&#x56DE;sb&#x5C31;&#x884C; 2. &#x6709;&#x7684;&#x5B57;&#x6BCD;&#x5F53;&#x524D;&#x8F6E;&#x5DF2;&#x7ECF;&#x52A0;&#x8FC7;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x7684;&#x9891;&#x7387;&#x8FD8;&#x662F;&#x5927;&#x4E8E;0&#xFF0C; &#x8FD4;&#x56DE;&quot;&quot; sb.append((char)(cur + &apos;a&apos;)); //System.out.println(cur + &apos;a&apos;); freq[cur]--; if(freq[cur] &gt; 0){ index.add(cur); } } }catch (Exception e){ if(index.isEmpty()){ return sb.toString(); }else{ return &quot;&quot;; } } for(int i : index){ heap.add(i); } } return sb.toString(); }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>735</tag>
        <tag>636</tag>
        <tag>71</tag>
        <tag>23</tag>
        <tag>358</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode-ToDoList]]></title>
    <url>%2F2019%2F03%2F25%2FLeetCode-ToDoList%2F</url>
    <content type="text"><![CDATA[&#x1F4C6; &#x7B2C;&#x4E09;&#x5468;&#x8BA1;&#x5212;&#xFF1A; &#x590D;&#x4E60;&#x524D;&#x4E24;&#x5468;&#x5185;&#x5BB9;&#xFF08;17&#x9053;&#x65E7;&#x9898;&#xFF09; 353 &#x1F389; 636 &#x1F389; 71 &#x1F389; 385 &#x1F389; 735 &#x1F389; 356 &#x1F389; 781 &#x1F389; 554 &#x1F389; 36 &#x1F389; 205 &#x1F389; 151 &#x1F389; 163 &#x1F389; 38 &#x1F389; 228 &#x1F389; 26 &#x1F389; 27 &#x1F389; 80 &#x1F389; 17&#x9053;&#x65B0;&#x9898;&#xFF08;&#x4E00;&#x5929;&#x81F3;&#x5C11;3&#x9053;Medium&#x65B0;&#x9898;&#xFF0C;&#x4E24;&#x9053;Medium&#x65E7;&#x9898;&#xFF09; Sliding Window Maximum &#x1F389; My Calendar I &#x1F389; Find Median from Data Stream &#x1F389; Merge k Sorted Lists &#x1F389; Rearrange String k Distance Apart &#x1F389; Top K Frequent Words &#x1F389; Merge Intervals &#x1F389; Largest Number &#x1F389; Car Fleet &#x1F389; Meeting Rooms II &#x1F389; Pow(x, n) &#x1F389; Shortest Word Distance II &#x1F389; Longest Substring Without Repeating Characters &#x1F389; Longest Substring with At Most K Distinct Characters &#x1F389; Minimum Window Substring &#x1F389; Smallest Range &#x1F389; &#x1F4C6; &#x7B2C;&#x4E94;&#x5468;&#x8BA1;&#x5212;&#xFF1A;&#x7528;&#x4E86;&#x4E24;&#x5468;&#x534A;&#x7EC8;&#x4E8E;&#x628A;&#x7B2C;&#x4E09;&#x5468;&#x8BA1;&#x5212;&#x5B8C;&#x6210;&#x4E86;&#xFF0C;&#x518D;&#x5217;&#x4E2A;&#x7B2C;&#x4E94;&#x5468;&#x8BA1;&#x5212;&#x5427;&#xFF0C;&#x7136;&#x540E;&#x53EF;&#x4EE5;&#x5148;&#x628A;&#x4E4B;&#x524D;&#x7684;&#x590D;&#x4E60;&#x4E86; &#x590D;&#x4E60;&#x4E4B;&#x524D;&#x5185;&#x5BB9; &#x65B0;&#x9898; - &#x5982;&#x679C;&#x6709;&#x65E7;&#x9898;&#xFF0C;&#x770B;&#x770B;&#x7528;&#x6CA1;&#x7528;&#x5230;&#x65B0;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x73B0;&#x5728;&#x7684;&#x4EFB;&#x52A1;&#x4E3B;&#x8981;&#x662F;&#x628A;&#x6CA1;&#x89C1;&#x8FC7;&#x7684;&#x90FD;&#x5148;&#x89C1;&#x4E00;&#x904D; Minimum Size Subarray Sum &#x1F389; Subarray Product Less Than K &#x1F389; Maximum Subarray &#x1F389; Maximum Product Subarray &#x1F389; Subarray Sum Equals K &#x1F389; Maximum Size Subarray Sum Equals K &#x1F389; Continuous Subarray Sum &#x1F389; Contiguous Array &#x1F389; Trapping Rain Water &#x1F389; Container With Most Water &#x1F389; Largest Rectangle in Histogram &#x1F389; Maximal Rectangle &#x1F389; Range Sum Query 2D - Immutable &#x1F389; Shuffle an Array Sort Colors Kth Largest Element in an Array Guess Number Higher or Lower Valid Perfect Square Find First and Last Position of Element in Sorted Array Find K Closest Elements Longest Substring Without Repeating Characters Longest Substring with At Most K Distinct Characters Minimum Size Subarray Sum Minimum Window Substring gas station Longest Valid Parentheses document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>ToDo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 3, Day 16, 3/25/2019]]></title>
    <url>%2F2019%2F03%2F25%2FDay-16%2F</url>
    <content type="text"><![CDATA[&#x7B2C;&#x4E09;&#x5468;&#x7684;&#x7B2C;&#x4E00;&#x5929;&#xFF0C;&#x505A;&#x4E86;&#x4E24;&#x9053;Hard&#x4E00;&#x9053;Medium&#x5E76;&#x4E14;&#x590D;&#x4E60;&#x4E86;&#x4E24;&#x9053;&#x9898;&#x3002;&#x597D;&#x7684;&#x5F00;&#x59CB;&#x662F;&#x6210;&#x529F;&#x7684;&#x4E00;&#x534A;&#xFF01; LeetCode - 239, 729, 295 (0 Easy, 1 Medium, 2 Hard) &#x590D;&#x4E60; - 353 353. Design Snake Game 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374class SnakeGame { /** Initialize your data structure here. @param width - screen width @param height - screen height @param food - A list of food positions E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */ private Queue&lt;Integer&gt; _rowQueue = new LinkedList&lt;&gt;(); private Queue&lt;Integer&gt; _colQueue = new LinkedList&lt;&gt;(); private int[][] _food; private int _lastRow = 0; private int _lastCol = 0; private int _foodIndex = 0; private boolean[][] _broad; public SnakeGame(int width, int height, int[][] food) { _broad = new boolean[height][width]; _food = food; _rowQueue.add(_lastRow); _colQueue.add(_lastCol); } /** Moves the snake. @param direction - &apos;U&apos; = Up, &apos;L&apos; = Left, &apos;R&apos; = Right, &apos;D&apos; = Down @return The game&apos;s score after the move. Return -1 if game over. Game over when snake crosses the screen boundary or bites its body. */ public int move(String dir) { int nextRow = _lastRow; int nextCol = _lastCol; if(dir.equals(&quot;U&quot;)){ nextRow--; }else if(dir.equals(&quot;D&quot;)){ nextRow++; }else if(dir.equals(&quot;R&quot;)){ nextCol++; }else if(dir.equals(&quot;L&quot;)){ nextCol--; } if(nextRow == -1 || nextRow == _broad.length || nextCol == -1 || nextCol == _broad[0].length){ return -1; } //System.out.println(&quot;cur poistion: &quot;+ nextRow + &quot;, &quot; + nextCol); if(_foodIndex != _food.length &amp;&amp; nextRow == _food[_foodIndex][0] &amp;&amp; nextCol == _food[_foodIndex][1]){ _foodIndex++; }else{ _broad[_rowQueue.peek()][_colQueue.peek()] = false; _rowQueue.remove(); _colQueue.remove(); } if(_broad[nextRow][nextCol]){ return -1; } _rowQueue.add(nextRow); _colQueue.add(nextCol); _broad[nextRow][nextCol] = true; _lastRow = nextRow; _lastCol = nextCol; return _foodIndex; }}/** * Your SnakeGame object will be instantiated and called as such: * SnakeGame obj = new SnakeGame(width, height, food); * int param_1 = obj.move(direction); */ &#x65B0;&#x9898; 239. Sliding Window Maximum - hard 1234567891011121314151617181920212223242526272829class Solution { public int[] maxSlidingWindow(int[] nums, int k) { if(k&lt;0){ return new int[0]; } int[] result = new int[nums.length - k+1]; TreeSet&lt;Integer&gt; bstTree = new TreeSet&lt;&gt;((o1, o2) -&gt; Integer.compare(nums[o1], nums[o2]) != 0 ? Integer.compare(nums[o1], nums[o2]): Integer.compare(o1, o2));// :&#x540E;&#x9762;&#x662F;&#x5F53;nums[o1] == nums[o2]&#x65F6;&#x53D1;&#x751F;&#x7684;&#x6240;&#x4EE5;&#x91CC;&#x9762;&#x5199;(nums[o1], nums[o2]) &#x8FD8;&#x662F;&#x5199;(o1, o2)&#x65E0;&#x6240;&#x8C13; for(int i = 0; i &lt; nums.length; i++){ if(i &gt;= k){ bstTree.remove(i-k); } bstTree.add(i); //System.out.println(&quot;i: &quot; + i); //System.out.println(&quot;max: &quot; + bstTree.last()); if(i&gt;=k-1){ result[i-(k-1)] = nums[bstTree.last()]; } } return result; }} 729. My Calendar 1 - Medium TreeMap&#x7684;compare&#x662F;&#x6BD4;&#x8F83;key&#x503C;; Map.Entry&#x5DF2;&#x7ECF;&#x6709;&#x70B9;&#x5FD8;&#x4E86;&#x3002; 1234567891011121314151617181920212223242526272829class MyCalendar { TreeMap&lt;Integer, Integer&gt; bst = null; public MyCalendar() { bst = new TreeMap&lt;&gt;((o1, o2) -&gt; Integer.compare(o1, o2)); } public boolean book(int start, int end) { Map.Entry&lt;Integer, Integer&gt; smaller = bst.floorEntry(start); if(smaller != null &amp;&amp; start &lt; smaller.getValue()){ return false; } Map.Entry&lt;Integer, Integer&gt; larger = bst.ceilingEntry(start); if(larger != null &amp;&amp; end &gt; larger.getKey()){ return false; } bst.put(start, end); return true; }}/** * Your MyCalendar object will be instantiated and called as such: * MyCalendar obj = new MyCalendar(); * boolean param_1 = obj.book(start,end); */ 295. Find Median from Data Stream - Hard 123456789101112131415161718192021222324252627282930313233343536373839404142434445class MedianFinder { /** initialize your data structure here. */ private PriorityQueue&lt;Integer&gt; bstL = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o2, o1)); //&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x6392;&#xFF0C;poll&#x51FA;&#x6765;&#x6700;&#x5927;&#x7684; private PriorityQueue&lt;Integer&gt; bstS = new PriorityQueue&lt;&gt;((o1, o2) -&gt; Integer.compare(o1, o2));//&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#xFF0C;poll&#x51FA;&#x6765;&#x6700;&#x5C0F;&#x7684; public MedianFinder() { } public void addNum(int num) { if(!bstL.isEmpty() &amp;&amp; num &lt;= bstL.peek()){//&#x5982;&#x679C;&#x6BD4;bstL&#x7684;&#x6700;&#x5927;&#x5927;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x653E;&#x8FDB;&#x6765; bstL.add(num); }else{ bstS.add(num); } if(bstS.size() == bstL.size()+2){ bstL.add(bstS.poll()); }else if(bstS.size() == bstL.size()-1){ bstS.add(bstL.poll()); } } public double findMedian() { int sSize = bstS.size(); int lSize = bstL.size(); if(sSize == lSize){ return (double)(bstS.peek()+bstL.peek())/2.0; }else{ return (double)(bstS.peek()); } }}/** * Your MedianFinder object will be instantiated and called as such: * MedianFinder obj = new MedianFinder(); * obj.addNum(num); * double param_2 = obj.findMedian(); */ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>353</tag>
        <tag>239</tag>
        <tag>729</tag>
        <tag>295</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 2, Day 15, 3/24/2019]]></title>
    <url>%2F2019%2F03%2F24%2FDay-15%2F</url>
    <content type="text"><![CDATA[&#x7EC8;&#x4E8E;&#x628A;&#x7B2C;&#x4E00;&#x5468;&#x7684;&#x4EFB;&#x52A1;&#x5B8C;&#x6210;&#x4E86;&#xFF0C;&#x7528;&#x4E86;&#x4E24;&#x5468;&#x65F6;&#x95F4;&#x3002;&#x60ED;&#x6127;&#x60ED;&#x6127;&#x3002; X&#x5929;&#x5929;&#x540A;&#x7740;&#x8138;&#xFF0C;&#x50CF;&#x6B20;&#x5979;&#x94B1;&#x4F3C;&#x7684;&#x3002;&#x4E00;&#x4E2A;&#x4EBA;&#x4E3A;&#x4EC0;&#x4E48;&#x53EF;&#x4EE5;&#x5BF9;&#x522B;&#x4EBA;&#x8FD9;&#x4E48;&#x4E0D;&#x53CB;&#x597D;&#x3002; LeetCode - 353 (0 Easy, 1 Medium, 0 Hard) 353. Design Snake Game - Medium Code: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475class SnakeGame { /** Initialize your data structure here. @param width - screen width @param height - screen height @param food - A list of food positions E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */ private Queue&lt;Integer&gt; _rowQueue = new LinkedList&lt;&gt;(); private Queue&lt;Integer&gt; _colQueue = new LinkedList&lt;&gt;(); private boolean[][] _broad; private int _foodIndex = 0; private int[][] _food; private int _lastRow = 0; private int _lastCol = 0; public SnakeGame(int width, int height, int[][] food) { _broad = new boolean[height][width]; _food = food; _rowQueue.add(_lastRow); _colQueue.add(_lastCol); } /** Moves the snake. @param direction - &apos;U&apos; = Up, &apos;L&apos; = Left, &apos;R&apos; = Right, &apos;D&apos; = Down @return The game&apos;s score after the move. Return -1 if game over. Game over when snake crosses the screen boundary or bites its body. */ public int move(String dir) { int _nextRow = _lastRow; int _nextCol = _lastCol; if(dir.equals(&quot;U&quot;)){ _nextRow--; }else if(dir.equals(&quot;D&quot;)){ _nextRow++; }else if(dir.equals(&quot;L&quot;)){ _nextCol--; }else if(dir.equals(&quot;R&quot;)){ _nextCol++; } //System.out.println(&quot;cur position: &quot; + _nextRow + &quot;,&quot; + _nextCol); if(_nextRow == _broad.length || _nextRow == -1 || _nextCol == _broad[0].length || _nextCol == -1){ //System.out.println(_broad[_nextRow][_nextCol]); return -1; } if(_foodIndex != _food.length &amp;&amp; _nextRow == _food[_foodIndex][0] &amp;&amp; _nextCol == _food[_foodIndex][1]){//_foodIndex != _food.length&#x4E3A;&#x4E86;&#x907F;&#x514D;_food[_foodIndex]&#x8D8A;&#x754C; _foodIndex++; }else{ //System.out.println(&quot;cur peek: &quot; + _rowQueue.peek() +&quot;, &quot;+_colQueue.peek()); _broad[_rowQueue.peek()][_colQueue.peek()] = false; _rowQueue.remove(); _colQueue.remove(); } if(_broad[_nextRow][_nextCol]){ return -1;//&#x5224;&#x65AD;&#x5B8C;&#x86C7;&#x5177;&#x4F53;&#x5360;&#x7684;&#x4F4D;&#x7F6E;&#x4E4B;&#x540E;&#xFF08;&#x8981;&#x4E0D;&#x8981;&#x81EA;&#x8EAB;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x957F;&#x5EA6;&#xFF09;&#x518D;&#x770B;&#x4E0B;&#x4E00;&#x6B65;&#x80FD;&#x4E0D;&#x80FD;&#x78B0;&#x5230;&#x81EA;&#x5DF1; } _broad[_nextRow][_nextCol] = true; _rowQueue.add(_nextRow); _colQueue.add(_nextCol); _lastRow = _nextRow; _lastCol = _nextCol; return _foodIndex; }}/** * Your SnakeGame object will be instantiated and called as such: * SnakeGame obj = new SnakeGame(width, height, food); * int param_1 = obj.move(direction); */ Testcases: 12[&quot;SnakeGame&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;][[3,3,[[2,0],[0,0],[0,2],[2,2]]],[&quot;D&quot;],[&quot;D&quot;],[&quot;R&quot;],[&quot;U&quot;],[&quot;U&quot;],[&quot;L&quot;],[&quot;D&quot;],[&quot;R&quot;],[&quot;R&quot;],[&quot;U&quot;],[&quot;L&quot;],[&quot;D&quot;]] 12[&quot;SnakeGame&quot;,&quot;move&quot;,&quot;move&quot;][[2,2,[[0,1]]],[&quot;R&quot;],[&quot;D&quot;]] 12[&quot;SnakeGame&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;][[3,2,[[1,2],[0,1]]],[&quot;R&quot;],[&quot;D&quot;],[&quot;R&quot;],[&quot;U&quot;],[&quot;L&quot;],[&quot;U&quot;]] 12[&quot;SnakeGame&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;,&quot;move&quot;][[3,3,[[2,0],[0,0],[0,2],[0,1],[2,2],[0,1]]],[&quot;D&quot;],[&quot;D&quot;],[&quot;R&quot;],[&quot;U&quot;],[&quot;U&quot;],[&quot;L&quot;],[&quot;D&quot;],[&quot;R&quot;],[&quot;R&quot;],[&quot;U&quot;],[&quot;L&quot;],[&quot;L&quot;],[&quot;D&quot;],[&quot;R&quot;],[&quot;U&quot;]] document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>353</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 2, Day 14, 3/23/2019]]></title>
    <url>%2F2019%2F03%2F23%2FDay-14%2F</url>
    <content type="text"><![CDATA[&#x4E4B;&#x524D;&#x7684;&#x8BA1;&#x5212;&#x662F;&#x6BCF;&#x5468;&#x516D;&#x4F11;&#x606F;&#xFF0C;&#x9274;&#x4E8E;&#x524D;&#x4E24;&#x5929;&#x592A;&#x4E4F;&#x63D0;&#x524D;&#x4F11;&#x606F;&#xFF0C;&#x4ECA;&#x5929;&#x5F00;&#x59CB;&#x518D;&#x6B21;&#x505A;&#x9898;&#x3002; LeetCode - 636, 71, 385 (0 Easy, 3 Medium, 0 Hard) 636. Exclusive Time of Functions - Medium 123456789101112131415161718192021222324252627282930313233343536class Solution { public int[] exclusiveTime(int n, List&lt;String&gt; logs) { Stack&lt;Node&gt; stack = new Stack&lt;&gt;(); int[] result = new int[n]; for(String log: logs){ String[] content = log.split(&quot;:&quot;); int id = Integer.valueOf(content[0]); int time = Integer.valueOf(content[2]); if(content[1].equals(&quot;start&quot;)){ stack.push(new Node(id, time)); }else{ Node cur = stack.pop(); int consumed = time - cur._start + 1 - cur._consumedByChildren; // &#x51CF;&#x6389;&#x522B;&#x7684;id&#x505A;&#x7684;&#x4E8B;&#x60C5;&#xFF0C;&#x547D;&#x540D;&#x4E3A;consumedByOther&#x66F4;&#x597D; result[id] += consumed; if(!stack.isEmpty()){ stack.peek()._consumedByChildren += time - cur._start + 1; } } } return result; } private class Node{ final int _id; final int _start; int _consumedByChildren; public Node(int id, int start){ _id = id; _start = start; _consumedByChildren = 0; } }} 71. Simplify Path - Medium 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748class Solution { public String simplifyPath(String path) { Stack&lt;String&gt; stack = new Stack&lt;&gt;(); int start = 0; String str = new String(); for(int i=1; i&lt;path.length(); i++){ char cur = path.charAt(i); if(cur == &apos;/&apos;){ if(path.charAt(i-1) != &apos;/&apos;){ str = path.substring(start, i); if(str.equals(&quot;/..&quot;) &amp;&amp; !stack.isEmpty()){ stack.pop(); }else if(!str.equals(&quot;/.&quot;) &amp;&amp; !str.equals(&quot;/..&quot;)){ stack.push(str); } } start = i; } } String strEnd = path.substring(start, path.length()); if(stack.isEmpty()){ if(strEnd.equals(&quot;/..&quot;) || strEnd.equals(&quot;/.&quot;)){ stack.push(&quot;/&quot;); }else{ stack.push(strEnd); } }else{ if(strEnd.equals(&quot;/..&quot;)){ stack.pop(); if(stack.isEmpty()){ stack.push(&quot;/&quot;); } }else if(!strEnd.equals(&quot;/&quot;) &amp;&amp; !strEnd.equals(&quot;/.&quot;)){ stack.push(strEnd); } } StringBuilder sb = new StringBuilder(); for(String s: stack){ sb.append(s); } return sb.toString(); }} 385 - Mini Parser - Medium 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566/** * // This is the interface that allows for creating nested lists. * // You should not implement it, or speculate about its implementation * public interface NestedInteger { * // Constructor initializes an empty nested list. * public NestedInteger(); * * // Constructor initializes a single integer. * public NestedInteger(int value); * * // @return true if this NestedInteger holds a single integer, rather than a nested list. * public boolean isInteger(); * * // @return the single integer that this NestedInteger holds, if it holds a single integer * // Return null if this NestedInteger holds a nested list * public Integer getInteger(); * * // Set this NestedInteger to hold a single integer. * public void setInteger(int value); * * // Set this NestedInteger to hold a nested list and adds a nested integer to it. * public void add(NestedInteger ni); * * // @return the nested list that this NestedInteger holds, if it holds a nested list * // Return null if this NestedInteger holds a single integer * public List&lt;NestedInteger&gt; getList(); * } */class Solution { public NestedInteger deserialize(String s) { Stack&lt;NestedInteger&gt; stack = new Stack&lt;&gt;(); if(s.charAt(0) != &apos;[&apos;){ return new NestedInteger(Integer.valueOf(s)); } NestedInteger fakeBaba = new NestedInteger(); int start = 0; stack.push(fakeBaba); for(int i=0; i &lt; s.length(); i++){ char c = s.charAt(i); if( c == &apos;-&apos; || &apos;0&apos;&lt;= c &amp;&amp; c &lt;= &apos;9&apos;){ continue; } if(c == &apos;[&apos;){ NestedInteger nested = new NestedInteger(); stack.peek().add(nested); stack.push(nested); }else{ if(s.charAt(i-1) &gt;= &apos;0&apos; &amp;&amp; s.charAt(i-1) &lt;= &apos;9&apos;){ int num = Integer.valueOf(s.substring(start, i)); NestedInteger nested = new NestedInteger(num); stack.peek().add(nested); } if(c == &apos;]&apos;){ stack.pop();// &apos;[&apos;&#x65F6;,&#x65E2;peek&#x53C8;push&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#x5F53;&apos;]&apos;&#x6216;&apos;,&apos;&#x65F6; &#x7ED9;peek&#x52A0;&#x5C31;&#x76F8;&#x5F53;&#x4E8E;&#x7ED9;&#x524D;&#x4E00;&#x4E2A;&#x4E5F;&#x52A0;&#x4E86;&#xFF1B; } } start = i+1; } return stack.peek().getList().get(0); }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>636</tag>
        <tag>71</tag>
        <tag>385</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 2, Day 13, 3/22/2019]]></title>
    <url>%2F2019%2F03%2F23%2FDay-13%2F</url>
    <content type="text"><![CDATA[&#x53C8;&#x4F11;&#x606F;&#x4E86;&#x4E00;&#x5929;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 2, Day 12, 3/21/2019]]></title>
    <url>%2F2019%2F03%2F21%2FDay-12%2F</url>
    <content type="text"><![CDATA[&#x770B;&#x4E0D;&#x52A8;&#x4E86;&#xFF0C;&#x4E0B;&#x5348;&#x5750;&#x7740;&#x5C31;&#x7761;&#x7740;&#x4E86;&#x3002;&#x51C6;&#x5907;&#x7761;&#x4E86;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>休息</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 2, Day 11, 3/20/2019]]></title>
    <url>%2F2019%2F03%2F20%2FDay-11%2F</url>
    <content type="text"><![CDATA[&#x53C8;&#x5FD8;&#x8BB0;&#x5E26;&#x7B14;&#x548C;&#x672C;&#x6765;&#x56FE;&#x4E66;&#x9986;&#x4E86;&#xFF0C;&#x53EA;&#x80FD;&#x7EE7;&#x7EED;&#x590D;&#x4E60;&#x3002; &#x590D;&#x4E60;&#xFF1A; 163&#xFF0C;38 (&#x4E2D;&#x5348;&#x4E0D;&#x5230;&#x4E00;&#x5C0F;&#x65F6;) 228, 26, 27, 80(&#x665A;&#x996D;&#x540E;) LeetCode - &#x590D;&#x4E60; 163. Missing Ranges &#x53C8;&#x5FD8;&#x8BB0;int&#x6700;&#x5927;&#x503C;&#x7684;&#x95EE;&#x9898;&#x4E86; 12345678910111213141516171819202122232425262728293031323334class Solution { public List&lt;String&gt; findMissingRanges(int[] nums, int lower, int upper) { List&lt;String&gt; list = new ArrayList&lt;&gt;(); if(nums.length == 0){ list.add(group(lower, upper)); return list; } if(nums[0] &gt; lower){ list.add(group(lower, nums[0]-1)); } for(int i = 1; i &lt; nums.length; i++){ if(nums[i] != nums[i-1]+1 &amp;&amp; nums[i] != nums[i-1]){ list.add(group(nums[i-1]+1, nums[i]-1)); } } if(nums[nums.length - 1] &lt; upper){ list.add(group(nums[nums.length - 1]+1, upper)); } return list; } private String group(int start, int end){ if(start == end){ return start + &quot;&quot;; }else{ return start + &quot;-&gt;&quot; + end; } }} 38. Count and Say StringBuilder sb &#x6DFB;&#x52A0; 1B &#x8981;&#x5148;append(1)&#x518D;append(B) 1234567891011121314151617181920212223242526class Solution { public String countAndSay(int n) { String result = &quot;1&quot;; for(int i=2; i &lt;= n; i++){ StringBuilder sb = new StringBuilder(); char pre = result.charAt(0); int num = 1; for(int j = 1; j&lt;result.length(); j++){ char cur = result.charAt(j); if(cur != pre){ sb.append(num); sb.append(pre); pre = result.charAt(j); num = 1; }else{ num++; } } sb.append(num); sb.append(pre); result = sb.toString(); } return result; }} 228. Summary Ranges 123456789101112131415161718192021222324252627282930313233class Solution { public List&lt;String&gt; summaryRanges(int[] nums) { if(nums.length == 0){ return new ArrayList&lt;&gt;(); } List&lt;String&gt; list = new ArrayList&lt;&gt;(); int start = 0; for(int i=1; i &lt; nums.length; i++){ if(nums[i] != nums[i-1] +1 &amp;&amp; nums[i] != nums[i-1]){ list.add(group(nums[start], nums[i-1])); start = i; } } if(start &lt; nums.length){ list.add(group(nums[start], nums[nums.length-1])); } return list; } private String group(int start, int end){ if(start == end){ return start + &quot;&quot;; }else{ return start + &quot;-&gt;&quot; + end; } }} 26. Remove Duplicates from Sorted Array 1234567891011121314151617class Solution { public int removeDuplicates(int[] nums) { if(nums.length &lt;= 1){ return nums.length; } int start = 0; for(int i = 1; i &lt; nums.length; i++){ if(nums[i] != nums[i-1]){ start++; nums[start] = nums[i]; } } return start+1; }} 27. Remove Element 1234567891011121314151617class Solution { public int removeElement(int[] nums, int val) { if(nums.length == 0){ return 0; } int start = -1; for(int i=0; i &lt; nums.length; i++){ if(nums[i] != val){ start++; nums[start] = nums[i]; } } return start+1; }} 80. Remove Duplicates from Sorted Array 2 1234567891011121314151617class Solution { public int removeDuplicates(int[] nums) { if(nums.length &lt; 2){ return nums.length; } int start = 1; for(int i=2; i &lt; nums.length; i++){ if(nums[i] != nums[start-1]){ start++; nums[start] = nums[i]; } } return start+1; }} LeetCode - 735 (0 Easy, 1 Medium, 0 Hard) 735. Asteroid Collision - Medium &#x4E00;&#x6BB5;&#x62A5;&#x9519;&#x7684;&#x4EE3;&#x7801; 1234567891011121314151617181920212223242526272829303132class Solution { public int[] asteroidCollision(int[] asteroids) { if(asteroids.length == 0){ return new int[0]; } Stack&lt;Integer&gt; stack= new Stack&lt;&gt;(); stack.push(asteroids[0]); for(int i = 1; i &lt; asteroids.length; i++){ if(asteroids[i] &gt; 0){ stack.push(asteroids[i]); }else{ while(asteroids[i] + stack.peek() &lt; 0){ stack.pop(); } if(asteroids[i] + stack.peek() == 0){ stack.pop(); } } } int[] result = new int[stack.size()]; int i = 0; for(int val : stack){ result[i++] = val; } return result; }} &#x6B63;&#x786E;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x592A;&#x591A;&#x79CD;&#x60C5;&#x51B5;&#x4E86;&#xFF0C;&#x4E00;&#x5B9A;&#x8981;&#x60F3;&#x6E05;&#x695A; 12345678910111213141516171819202122232425262728293031323334353637class Solution { public int[] asteroidCollision(int[] a) { if(a.length == 0){ return new int[0]; } Stack&lt;Integer&gt; stack= new Stack&lt;&gt;(); stack.push(a[0]); for(int i = 1; i &lt; a.length; i++){ if(stack.isEmpty() || stack.peek()&lt;0){ stack.push(a[i]); }else{ if(a[i] &gt; 0){ stack.push(a[i]); }else{ while(!stack.isEmpty() &amp;&amp; stack.peek() &gt; 0 &amp;&amp; a[i] + stack.peek() &lt; 0){ stack.pop(); } if(!stack.isEmpty() &amp;&amp; a[i] + stack.peek() == 0){ stack.pop(); }else if(stack.isEmpty() || a[i] + stack.peek() &lt; 0){ stack.push(a[i]); } } } } int[] result = new int[stack.size()]; int i = 0; for(int val:stack){ result[i] = val; i++; } return result; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>27</tag>
        <tag>26</tag>
        <tag>80</tag>
        <tag>38</tag>
        <tag>228</tag>
        <tag>163</tag>
        <tag>735</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 2, Day 10, 3/19/2019]]></title>
    <url>%2F2019%2F03%2F19%2FDay-10%2F</url>
    <content type="text"><![CDATA[&#x4E2D;&#x5348;&#x6765;&#x56FE;&#x4E66;&#x9986;&#x590D;&#x4E60;&#x4E86;LeetCode 356&#xFF0C;554, 205, 781, 36, 299, 151&#x3002;&#x6293;&#x7D27;&#x6BCF;&#x4E00;&#x5206;&#x949F;&#x3002;&#x6CA1;&#x60F3;&#x5230;&#x6700;&#x4E0D;&#x719F;&#x7EC3;&#x7684;&#x7ADF;&#x7136;&#x662F;Easy&#x7684;205&#xFF0C;&#x4E5F;&#x8BB8;&#x662F;&#x56E0;&#x4E3A;&#x662F;&#x7B2C;&#x4E94;&#x5929;&#x505A;&#x7684;&#xFF0C;&#x800C;&#x5176;&#x5B83;&#x4E24;&#x9053;&#x90FD;&#x662F;&#x6628;&#x5929;&#x505A;&#x7684;&#x3002;&#x4ECA;&#x665A;&#x628A;&#x8FD9;&#x4E9B;&#x90FD;&#x590D;&#x4E60;&#x4E86;&#x5427;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>151</tag>
        <tag>205</tag>
        <tag>299</tag>
        <tag>36</tag>
        <tag>554</tag>
        <tag>781</tag>
        <tag>356</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 2, Day 9, 3/18/2019]]></title>
    <url>%2F2019%2F03%2F18%2FDay-09%2F</url>
    <content type="text"><![CDATA[&#x548C;&#x60C5;&#x7EEA;&#x4E0D;&#x7A33;&#x5B9A;&#x7684;&#x4EBA;&#x76F8;&#x5904;&#x771F;&#x7684;&#x9700;&#x8981;&#x6781;&#x597D;&#x7684;&#x8010;&#x5FC3;&#xFF0C;&#x4E5F;&#x8BB8;&#x8FD9;&#x5C31;&#x662F;&#x6211;&#x9700;&#x8981;&#x4FEE;&#x884C;&#x7684;&#x5730;&#x65B9;&#x5427;&#x3002; &#x529E;GC&#x8FD8;&#x8981;&#x518D;&#x7B49;&#xFF0C;&#x6293;&#x7D27;&#x5237;&#x9898;&#x5427;&#x3002; Java&#x5F3A;&#x5236;&#x7C7B;&#x578B;&#x8F6C;&#x6362; &#x8BED;&#x6CD5;&#xFF1A;&#x201C;&#xFF08;&#x201D;+&#x201C;&#x76EE;&#x6807;&#x7C7B;&#x578B;&#x201D;+&#x201C;&#xFF09;&#x201D;+&#x201C;&#x60F3;&#x8981;&#x8F6C;&#x6362;&#x7684;&#x503C;&#x201D;&#xFF1B; Ref: Java&#x5F3A;&#x5236;&#x7C7B;&#x578B;&#x8F6C;&#x6362; Java&#x96C6;&#x5408;&#x7C7B;: Set&#x3001;List&#x3001;Map&#x3001;Queue&#x4F7F;&#x7528;&#x573A;&#x666F;&#x68B3;&#x7406; Ref: Java&#x96C6;&#x5408;&#x7C7B;: Set&#x3001;List&#x3001;Map&#x3001;Queue&#x4F7F;&#x7528;&#x573A;&#x666F;&#x68B3;&#x7406; LeetCode - 356 356. Line Reflection - Medium 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051class Solution { public boolean isReflected(int[][] points) { if(points.length == 0){ return true; } Map&lt;Integer, Set&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;(); // 1. &#x4EE5;y&#x6765;&#x5F52;&#x7C7B;x // 2. &#x627E;&#x51FA;&#x6700;&#x5927;&#x6700;&#x5C0F;&#x7684;x&#xFF0C;&#x7B97;&#x51FA;mid(&#x7B2C;&#x4E00;&#x7EC4;&#x6570;) // 3. &#x904D;&#x5386;&#x6BCF;&#x4E00;&#x4E2A;&#x70B9;&#xFF0C;&#x5BF9;&#x7167;&#x662F;&#x5426;&#x4EE5;mid&#x6765;reflect // 1. &#x4EE5;y&#x6765;&#x5F52;&#x7C7B;x for(int[] point: points){ int x = point[0]; int y = point[1]; if(map.containsKey(y)){ Set&lt;Integer&gt; set = map.get(y); set.add(x); }else{ Set&lt;Integer&gt; set = new HashSet&lt;&gt;(); set.add(x); map.put(y, set); } } // 2. &#x627E;&#x51FA;&#x6700;&#x5927;&#x6700;&#x5C0F;&#x7684;x&#xFF0C;&#x7B97;&#x51FA;mid(&#x7B2C;&#x4E00;&#x7EC4;&#x6570;) int min = Integer.MAX_VALUE; int max = Integer.MIN_VALUE; Iterator&lt;Map.Entry&lt;Integer, Set&lt;Integer&gt;&gt;&gt; iter = map.entrySet().iterator(); Set&lt;Integer&gt; set0 = iter.next().getValue(); for(int x: set0){ min = Math.min(min, x); max = Math.max(max, x); } double mid = min + (max-min)/2.0; // 3. &#x904D;&#x5386;&#x6BCF;&#x4E00;&#x4E2A;&#x70B9;&#xFF0C;&#x5BF9;&#x7167;&#x662F;&#x5426;&#x4EE5;mid&#x6765;reflect for(Map.Entry&lt;Integer, Set&lt;Integer&gt;&gt; entry: map.entrySet()){ Set&lt;Integer&gt; set = entry.getValue(); for(int x:set){ int reflect = (int)(2*mid - x); if(!set.contains(reflect)){ return false; } } } return true; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>356</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 1, Day 8, 3/17/2019]]></title>
    <url>%2F2019%2F03%2F17%2FDay-08%2F</url>
    <content type="text"><![CDATA[&#x7531;&#x4E8E;&#x7B2C;&#x4E00;&#x5929;&#x5237;&#x9898;&#x90A3;&#x5929;&#x662F;&#x4E2A;&#x5468;&#x4E94;&#xFF0C;&#x6240;&#x4EE5;&#x7B2C;&#x4E00;&#x5468;&#x6709;&#x4E86;8&#x5929;&#x3002;&#x8D76;&#x4E86;&#x4E00;&#x5929;&#x98DE;&#x673A;&#xFF0C;&#x7531;&#x4E8E;&#x65F6;&#x5DEE;&#xFF0C;17&#x53F7;&#x8FD8;&#x5728;&#x3002; mod mod % LeetCode - 781 - (0 Easy, 1 Medium, 0 Hard) 781 - Rabbits in Forest - Medium 123456789101112131415161718192021222324252627282930class Solution { public int numRabbits(int[] answers) { if(answers.length == 0){ return 0; } Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(); for(int i = 0; i &lt; answers.length; i++){ if(map.containsKey(answers[i]+1)){ map.put(answers[i]+1, map.get(answers[i]+1)+1); }else{ map.put(answers[i]+1, 1); } } int result = 0; int key = 0; int value = 0; for(Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()){ key = entry.getKey(); value = entry.getValue(); if (value%key != 0){ result += key*(value/key+1); }else{ result += value; } } return result; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>mod</tag>
        <tag>781</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 1, Day 7, 3/16/2019]]></title>
    <url>%2F2019%2F03%2F16%2FDay-07%2F</url>
    <content type="text"><![CDATA[3/17 updated: &#x6628;&#x5929;&#x6700;&#x540E;&#x4E00;&#x5929;&#x5728;&#x5BB6;&#xFF0C;&#x966A;&#x4E86;&#x5BB6;&#x91CC;&#x4EBA;&#xFF0C;&#x803D;&#x8BEF;&#x4E86;&#x5237;&#x9898;&#x3002;&#x4ECA;&#x5929;&#x8865;&#x4E0A;&#x3002; for loop 1234567891011121314//&#x666E;&#x901A;for&#x5FAA;&#x73AF;&#x904D;&#x5386;for (int i = 0; i &lt; list.size(); i++) { System.out.print(list.get(i) + &quot;,&quot;);}//&#x8FED;&#x4EE3;&#x5668;&#x5FAA;&#x73AF;&#x904D;&#x5386;Iterator iterator = list.iterator();while (iterator.hasNext()) { System.out.print(iterator.next() + &quot;,&quot;);}//&#x589E;&#x5F3A;for&#x5FAA;&#x73AF;for (Integer i : list) { System.out.print(i + &quot;,&quot;);} // &#x601D;&#x8003; int[] x&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x4E0D;&#x80FD;&#x7528; int i: x// &#x53EF;&#x4EE5;int i: x&#x53EA;&#x662F;&#x4E0D;&#x80FD;&#x4FEE;&#x6539;int[]&#x7684;&#x503C; (edited on 43th day) Iterator Object next()&#xFF1A;&#x8FD4;&#x56DE;&#x8FED;&#x4EE3;&#x5668;&#x521A;&#x8D8A;&#x8FC7;&#x7684;&#x5143;&#x7D20;&#x7684;&#x5F15;&#x7528;&#xFF0C;&#x8FD4;&#x56DE;&#x503C;&#x662F; Object&#xFF0C;&#x9700;&#x8981;&#x5F3A;&#x5236;&#x8F6C;&#x6362;&#x6210;&#x81EA;&#x5DF1;&#x9700;&#x8981;&#x7684;&#x7C7B;&#x578B; boolean hasNext()&#xFF1A;&#x5224;&#x65AD;&#x5BB9;&#x5668;&#x5185;&#x662F;&#x5426;&#x8FD8;&#x6709;&#x53EF;&#x4F9B;&#x8BBF;&#x95EE;&#x7684;&#x5143;&#x7D20; void remove()&#xFF1A;&#x5220;&#x9664;&#x8FED;&#x4EE3;&#x5668;&#x521A;&#x8D8A;&#x8FC7;&#x7684;&#x5143;&#x7D20; Ref: Iterator Map.Entry Map.Entry&#x662F;Map&#x58F0;&#x660E;&#x7684;&#x4E00;&#x4E2A;&#x5185;&#x90E8;&#x63A5;&#x53E3;&#xFF0C;&#x6B64;&#x63A5;&#x53E3;&#x4E3A;&#x6CDB;&#x578B;&#xFF0C;&#x5B9A;&#x4E49;&#x4E3A;Entry&lt;K,V&gt;&#x3002;&#x5B83;&#x8868;&#x793A;Map&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x5B9E;&#x4F53;&#xFF08;&#x4E00;&#x4E2A;key-value&#x5BF9;&#xFF09;&#x3002;&#x63A5;&#x53E3;&#x4E2D;&#x6709;getKey(),getValue&#x65B9;&#x6CD5;&#x3002; Ref: Map.Entry&#x4F7F;&#x7528;&#x8BE6;&#x89E3; break &#x8DF3;&#x51FA;&#x4E00;&#x5C42;&#x5FAA;&#x73AF; LeetCode - 554 - (0 Easy, 1 Medium, 0 Hard) 554. Brick Wall - Easy 123456789101112131415161718192021222324252627class Solution { public int leastBricks(List&lt;List&lt;Integer&gt;&gt; wall) { Map&lt;Integer, Integer&gt; gapBypass = new HashMap&lt;&gt;(); for(List&lt;Integer&gt; list: wall){ int gap = 0; Iterator&lt;Integer&gt; it = list.iterator(); while(it.hasNext()){ gap += it.next(); if(!it.hasNext()){ break; // &#x7EC6;&#x7EC6;&#x4F53;&#x5473;&#x4E3A;&#x4EC0;&#x4E48;&#x8FD9;&#x5757;&#x8981;&#x52A0;break } if(gapBypass.containsKey(gap)){ gapBypass.put(gap, gapBypass.get(gap)+1); }else{ gapBypass.put(gap, 1); } } } int result = wall.size(); for(Map.Entry&lt;Integer, Integer&gt; entry: gapBypass.entrySet()){ int Bypass = entry.getValue(); result = Math.min(result, wall.size() - Bypass); } return result; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>for loop</tag>
        <tag>Iterator</tag>
        <tag>Map.Entry</tag>
        <tag>break</tag>
        <tag>554</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 1, Day 6, 3/15/2019]]></title>
    <url>%2F2019%2F03%2F15%2FDay-06%2F</url>
    <content type="text"><![CDATA[&#x7EE7;&#x7EED;&#x52AA;&#x529B;&#xFF01; &#x4ECA;&#x5929;&#x6709;&#x4E9B;&#x4E4F;&#xFF0C;&#x51FA;&#x73B0;&#x4E86;&#x601D;&#x7EF4;&#x60F0;&#x6027;&#xFF0C;&#x4E0D;&#x77E5;&#x9053;&#x662F;&#x56E0;&#x4E3A;&#x6CA1;&#x6709;&#x4F11;&#x606F;&#x597D;&#xFF0C;&#x8FD8;&#x662F;&#x505A;&#x4E86;&#x4E94;&#x5929;&#x9898;&#x6709;&#x4E9B;&#x7D2F;&#x4E86;&#x3002;&#x4E5F;&#x8BB8;&#x53EF;&#x4EE5;&#x8BD5;&#x8BD5;&#x4EE5;&#x540E;&#x5468;&#x4E00;&#x5230;&#x5468;&#x4E94;&#x6B63;&#x5E38;&#x5237;&#x9898;&#xFF0C;&#x5468;&#x516D;&#x4F11;&#x606F;&#xFF0C;&#x5468;&#x65E5;&#x590D;&#x4E60;&#x8FD9;&#x4E00;&#x5468;&#x7684;&#x9898;&#x3002; boolean[] boolean[] array = new boolean[size]; &#x6240;&#x6709;&#x9ED8;&#x8BA4;&#x503C;&#x4E3A;false&#xFF1B; LeetCode - 36 (0 Easy, 1 Medium, 0 Hard) 36. Valid Sudoku - Medium 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960class Solution { public boolean isValidSudoku(char[][] board) { // row for(int i=0; i &lt; 9; i++){ boolean[] set = new boolean[9]; for(int j=0; j&lt;9; j++){ char num = board[i][j]; if( &apos;1&apos;&lt;=num &amp;&amp; num&lt;=&apos;9&apos;){ if(set[num - &apos;1&apos;]){ return false; }else{ set[num - &apos;1&apos;]=true; } }else if(num != &apos;.&apos;){ return false; } } } // col for(int i=0; i &lt; 9; i++){ boolean[] set = new boolean[9]; for(int j=0; j&lt;9; j++){ char num = board[j][i]; if( &apos;1&apos;&lt;=num &amp;&amp; num&lt;=&apos;9&apos;){ if(set[num - &apos;1&apos;]){ return false; }else{ set[num - &apos;1&apos;]=true; } }else if(num != &apos;.&apos;){ return false; } } } // &#x4E5D;&#x5BAB;&#x683C; for(int daHang = 0; daHang &lt;3; daHang++){ for(int daLie = 0; daLie &lt;3; daLie++){ boolean[] set = new boolean[9]; for(int i=0; i &lt; 3; i++){ for(int j=0; j&lt;3; j++){ char num = board[daHang*3+i][daLie*3+j]; if( &apos;1&apos;&lt;=num &amp;&amp; num&lt;=&apos;9&apos;){ if(set[num - &apos;1&apos;]){ return false; }else{ set[num - &apos;1&apos;]=true; } }else if(num != &apos;.&apos;){ return false; } } } } } return true; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>boolean数组</tag>
        <tag>36</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 1, Day 5, 3/14/2019]]></title>
    <url>%2F2019%2F03%2F14%2FDay-05%2F</url>
    <content type="text"><![CDATA[&#x52A0;&#x6CB9;&#x52A0;&#x6CB9;&#xFF01; Set, Map Set(&#x96C6;&#x5408;)&#xFF1A;&#x65E0;&#x5E8F;&#xFF0C;&#x4E0D;&#x80FD;&#x91CD;&#x590D;&#xA0; Map&#xFF08;&#x6620;&#x5C04;&#xFF09;&#xFF1A;&#x96C6;&#x5408;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5305;&#x542B;&#x4E00;&#x5BF9;&#x952E;&#x5BF9;&#x8C61;&#x548C;&#x503C;&#x5BF9;&#x8C61;&#xFF0C;&#x96C6;&#x5408;&#x4E2D;&#x6CA1;&#x6709;&#x91CD;&#x590D;&#x7684;&#x952E;&#x5BF9;&#x8C61;&#xFF0C;&#x503C;&#x5BF9;&#x8C61;&#x53EF;&#x4EE5;&#x91CD;&#x590D;&#x3002; char[] char s=new char[30]; &#x5982;&#x679C;&#x6CA1;&#x6709;&#x663E;&#x5F0F;&#x8D4B;&#x503C;&#xFF0C;&#x5219;&#x7CFB;&#x7EDF;&#x81EA;&#x52A8;&#x8D4B;&#x9ED8;&#x8BA4;&#x503C;null (0)&#x3002; &#x9700;&#x8981;&#x601D;&#x8003;&#x4E24;&#x79CD;Map&#x7684;&#x8868;&#x8FBE;&#x65B9;&#x5F0F; (&#x7B2C;&#x4E8C;&#x79CD;&#x5E94;&#x8BE5;&#x8DDF;map&#x6CA1;&#x6709;&#x5173;&#x7CFB;&#x5427; - edited on 43th day) General 1234Map&lt;Character, T&gt; map;map.put(k, v);v = map.get(k);if(map.containsKey(k)); &#x6709;char&#x7684;&#x65F6;&#x5019;&#x7528;&#x8FD9;&#x4E2A;&#x6BD4;&#x8F83;&#x597D;&#xFF0C;char&#x53EA;&#x6709;256&#x4E2A; 1234T[] map = new T[256];map[k] = v;v = map[k];if(map[k] ! nullValue) LeetCode - 205 (1 Easy, 1 Medium, 0 Hard) 205. Isomorphic Strings - Easy 123456789101112131415161718192021222324class Solution { public boolean isIsomorphic(String s, String t) { return mappable(s, t) &amp;&amp; mappable(t, s);//&#x5982;&#x679C;&#x53EA;&#x5173;&#x5FC3;mappable(s, t)&#x5C31;&#x4E0D;&#x662F;&#x4E00;&#x4E00;&#x6620;&#x5C04;&#xFF0C;testcase: &quot;ab&quot;, &quot;aa&quot; } private boolean mappable(String s, String t) { char[] map = new char[256]; for (int i = 0; i &lt; s.length(); i++){ char cS = s.charAt(i); char cT = t.charAt(i); if(map[cS] == 0){ map[cS] = cT; }else{ if(map[cS] != cT){ return false; } } } return true; }} 299. Bulls and Cows - Medium 123456789101112131415161718192021222324class Solution { public String getHint(String secret, String guess) { int[] sF = new int[10]; int[] gF = new int[10]; int cntA = 0; for (int i = 0; i &lt; secret.length(); i++){ char cS = secret.charAt(i); char cG = guess.charAt(i); if(cS == cG){ cntA ++; }else{ sF[cS - &apos;0&apos;]++;// &apos;0&apos; -&gt; 0, &apos;1&apos; -&gt; 1 gF[cG - &apos;0&apos;]++; } } int cntB = 0; for (int i=0; i &lt; 10; i++){ cntB += Math.min(sF[i], gF[i]); } return cntA + &quot;A&quot; + cntB + &quot;B&quot;; }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Set</tag>
        <tag>Map</tag>
        <tag>205</tag>
        <tag>299</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 1, Day 4, 3/13/2019]]></title>
    <url>%2F2019%2F03%2F13%2FDay-04%2F</url>
    <content type="text"><![CDATA[3/13: &#x4ECA;&#x5929;&#x592A;&#x56F0;&#x4E86;&#xFF0C;&#x7F51;&#x4E5F;&#x603B;&#x65AD;&#xFF0C;&#x4E0A;&#x4E0D;&#x4E86;LeetCode&#xFF0C;&#x5199;&#x4E86;&#x4E00;&#x534A;&#x7684;Code&#x6CA1;&#x6CD5;test&#x3002; 3/14: &#x5148;&#x5B8C;&#x6210;&#x6628;&#x5929;&#x7684;#151 Java substring() &#x65B9;&#x6CD5; substring(int beginIndex) or substring(int beginIndex, int endIndex) &#x65B9;&#x6CD5;&#x8FD4;&#x56DE;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x5B50;&#x5B57;&#x7B26;&#x4E32;&#x3002; beginIndex -- &#x8D77;&#x59CB;&#x7D22;&#x5F15;&#xFF08;&#x5305;&#x62EC;&#xFF09;, &#x7D22;&#x5F15;&#x4ECE; 0 &#x5F00;&#x59CB;&#x3002; endIndex -- &#x7ED3;&#x675F;&#x7D22;&#x5F15;&#xFF08;&#x4E0D;&#x5305;&#x62EC;&#xFF09;&#x3002; Ref: Java substring() &#x65B9;&#x6CD5; IndexOutOfBoundsException - if the beginIndex is negative, or endIndex is larger than the length of this String object, or beginIndex is larger than endIndex. substring(length) will return an empty string Ref: substring(length) &#x5355;&#x5F15;&#x53F7;&#xFF0C;&#x53CC;&#x5F15;&#x53F7; &#x5355;&#x5F15;&#x53F7;&#x5F15;&#x7684;&#x6570;&#x636E; &#x662F;char&#x7C7B;&#x578B;&#x7684;; &#x53CC;&#x5F15;&#x53F7;&#x5F15;&#x7684;&#x6570;&#x636E; &#x662F;String&#x7C7B;&#x578B;&#x7684; Stack Stack&lt;String&gt; stack = new Stack&lt;&gt;(); &#x5148;&#x8FDB;&#x540E;&#x51FA; &#x52A0;&#x5728;&#x5C3E;: push() &#x5220;&#x5728;&#x5C3E;: pop() &#x770B;&#x5728;&#x5C3E;: peek() &#x6CDB;&#x578B; LeetCode - 151 (0 Easy, 1 Medium, 0 Hard) 151. Reverse Words in a String - Medium 12345678910111213141516171819202122232425class Solution { public String reverseWords(String s) { Stack&lt;String&gt; stack = new Stack&lt;&gt;(); // base case int start = 0; // general case for(int i=1; i &lt; s.length(); i++){ if(s.charAt(i) == &apos; &apos;){ // should be &apos; &apos; not &quot; &quot; if(s.charAt(i-1) != &apos; &apos;){ stack.push(s.substring(start, i)); } start = i+1; // consider why if s.charAt(i-1) != &apos; &apos; or not, start always should equal to i+1 } } stack.push(s.substring(start)); // if start = s.length(), will return an empty string StringBuilder sb = new StringBuilder(); while (!stack.isEmpty()){ sb.append(stack.pop() + &quot; &quot;); } return sb.toString().trim(); }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Stack</tag>
        <tag>substring()</tag>
        <tag>泛型</tag>
        <tag>单引号</tag>
        <tag>双引号</tag>
        <tag>151</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 1, Day 3, 3/12/2019]]></title>
    <url>%2F2019%2F03%2F12%2FDay-03%2F</url>
    <content type="text"><![CDATA[L&#x770B;&#x4EBA;&#x4E0B;&#x83DC;&#x789F;&#xFF0C;&#x552F;&#x6709;&#x81EA;&#x5DF1;&#x5F3A;&#x5927;&#x624D;&#x80FD;&#x4E0D;&#x88AB;&#x627E;&#x832C;&#x3002;X&#x654F;&#x611F;&#x591A;&#x7591;&#x65E0;&#x7406;&#x6027;&#x601D;&#x7EF4;&#xFF0C;&#x552F;&#x6709;&#x8EB2;&#x7740;&#x70B9;&#x624D;&#x80FD;&#x907F;&#x514D;&#x51B2;&#x7A81;&#x3002; int&#x6EA2;&#x51FA; &#x4EE3;&#x7801;&#xFF1A; 1234int a = 2147483647;System.out.println(a);int b = a + 1;System.out.println(b); &#x7ED3;&#x679C;&#xFF1A; 122147483647-2147483648 Reason: int&#x7C7B;&#x578B;&#x4E8C;&#x8FDB;&#x5236;&#x5B58;&#x50A8;&#x7684;&#x7B2C;&#x4E00;&#x4F4D;&#x4E3A;&#x7B26;&#x53F7;&#x4F4D;&#xFF0C;0&#x8868;&#x793A;&#x6B63;&#x6570;&#xFF0C;1&#x8868;&#x793A;&#x8D1F;&#x6570;&#xFF0C;2147483647&#x8FD9;&#x4E2A;&#x6570;&#x5B57;&#x7684;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x8868;&#x8FBE;&#x4E3A;01111111111111111111111111111111,&#x52A0;1&#x4EE5;&#x540E;&#x7684;&#x503C;&#x4E3A;10000000000000000000000000000000,&#x800C;10000000000000000000000000000000&#x8868;&#x793A;&#x7684;&#x662F;-2147483648&#x8FD9;&#x4E2A;&#x6570;&#x5B57;. Ref:Java&#x6574;&#x5F62;&#x6EA2;&#x51FA;&#x5904;&#x7406;&#x673A;&#x5236; LeetCode - 163 (0 Easy, 1 Medium, 0 Hard) 163. Missing Ranges - Medium 12345678910111213141516171819202122232425262728293031323334353637383940414243class Solution { public List&lt;String&gt; findMissingRanges(int[] nums, int lower, int upper) { List&lt;String&gt; result = new ArrayList&lt;&gt;(); if(nums.length == 0){ result.add(group(lower, upper)); return result; } // base case int start = nums[0]; int end = nums[0]; if(start != lower){ end = start-1; start = lower; result.add(group(start, end)); } // general case for (int i=1; i &lt; nums.length; i++){ if(nums[i] != nums[i-1] &amp;&amp; nums[i] != nums[i-1]+1){ //&#x5982;&#x679C;&#x5199;&#x6210; nums[i]&gt;nums[i-1]+1&#x4F1A;&#x8FC7;&#x4E0D;&#x4E86;&#x4E0B;&#x9762;&#x7684;test case start = nums[i-1]+1; end = nums[i] - 1; result.add(group(start, end)); } } if(nums[nums.length - 1] != upper){ result.add(group(nums[nums.length - 1]+1, upper)); } return result; } private String group(int start, int end){ if (start == end){ return start + &quot;&quot;; }else{ return start + &quot;-&gt;&quot; + end; } }} Input: [-2147483648,-2147483648,0,2147483647,2147483647] -2147483648 2147483647 Output: [&quot;-2147483647-&gt;-1&quot;,&quot;1-&gt;2147483646&quot;,&quot;-2147483648-&gt;2147483646&quot;] Expected: [&quot;-2147483647-&gt;-1&quot;,&quot;1-&gt;2147483646&quot;] &#x4EE3;&#x7801;&#xFF1A; 1234int a = 2147483647;System.out.println(a);int b = a + 1;System.out.println(b); &#x7ED3;&#x679C;&#xFF1A; 122147483647-2147483648 Reason: int&#x7C7B;&#x578B;&#x4E8C;&#x8FDB;&#x5236;&#x5B58;&#x50A8;&#x7684;&#x7B2C;&#x4E00;&#x4F4D;&#x4E3A;&#x7B26;&#x53F7;&#x4F4D;&#xFF0C;0&#x8868;&#x793A;&#x6B63;&#x6570;&#xFF0C;1&#x8868;&#x793A;&#x8D1F;&#x6570;&#xFF0C;2147483647&#x8FD9;&#x4E2A;&#x6570;&#x5B57;&#x7684;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x8868;&#x8FBE;&#x4E3A;01111111111111111111111111111111,&#x52A0;1&#x4EE5;&#x540E;&#x7684;&#x503C;&#x4E3A;10000000000000000000000000000000,&#x800C;10000000000000000000000000000000&#x8868;&#x793A;&#x7684;&#x662F;-2147483648&#x8FD9;&#x4E2A;&#x6570;&#x5B57;. Ref:Java&#x6574;&#x5F62;&#x6EA2;&#x51FA;&#x5904;&#x7406;&#x673A;&#x5236; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>int溢出</tag>
        <tag>163</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 1, Day 2, 3/11/2019]]></title>
    <url>%2F2019%2F03%2F11%2FDay-02%2F</url>
    <content type="text"><![CDATA[&#x5C0F;&#x767D;&#x7684;&#x8DEF;&#x7EBF;&#xFF0C;&#x5237;&#x9898;&#x524D;&#x671F;&#x5B66;&#x4E60;Java&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#xFF0C;&#x540E;&#x671F;&#x7B97;&#x6CD5;&#x8FDB;&#x9636;&#x3002; StringBuilder? StringBuffer? String? String &#x7C7B;&#x578B;&#x7684;&#x5BF9;&#x8C61;&#x4E0D;&#x53EF;&#x53D8;&#xFF0C;&#x5728;&#x6BCF;&#x6B21;&#x5BF9;&#x8BE5;&#x5BF9;&#x8C61;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#x7684;&#x65F6;&#x5019;&#x76F8;&#x5F53;&#x4E8E;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;String&#x5BF9;&#x8C61;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x628A;&#x6307;&#x9488;&#x6307;&#x5411;&#x65B0;&#x7684;&#x5BF9;&#x8C61;&#x3002;&#x6240;&#x4EE5;&#x5982;&#x679C;&#x9700;&#x8981;&#x7ECF;&#x5E38;&#x6539;&#x53D8;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x4E0D;&#x8981;&#x7528;String&#x3002;StringBuilder&#x662F;&#x975E;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x7684;&#x3002; String &#x5B57;&#x7B26;&#x4E32;&#x5E38;&#x91CF; StringBuffer &#x5B57;&#x7B26;&#x4E32;&#x53D8;&#x91CF;&#xFF08;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#xFF09; StringBuilder &#x5B57;&#x7B26;&#x4E32;&#x53D8;&#x91CF;&#xFF08;&#x975E;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;) Ref: String&#x3001;StringBuilder&#x3001;StringBuffer &#x7528;&#x6CD5;&#x6BD4;&#x8F83; &#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x662F;&#x4EC0;&#x4E48; &#x5141;&#x8BB8;&#x88AB;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x540C;&#x65F6;&#x6267;&#x884C;&#x7684;&#x4EE3;&#x7801;&#x79F0;&#x4F5C;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x7684;&#x4EE3;&#x7801;, &#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x540C;&#x65F6;&#x83B7;&#x53D6;&#x540C;&#x4E00;&#x4E2A;&#x8D44;&#x6E90;&#x3002; Ref: Java&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x548C;&#x975E;&#x7EBF;&#x7A0B;&#x5B89;&#x5168; &#x4E3A;&#x4EC0;&#x4E48;string.length()&#x540E;&#x9762;&#x6709;&#x62EC;&#x53F7;&#xFF0C;&#x800C;int[]&#x8C03;&#x7528;length&#x4E0D;&#x9700;&#x8981;&#x62EC;&#x53F7; &#x9700;&#x8981;&#x52A0;(&#xFF09;&#x7684;&#x662F;&#x65B9;&#x6CD5;&#xFF08;&#x6216;&#x8005;&#x53EB;&#x51FD;&#x6570;&#xFF09;&#xFF0C;&#x4E0D;&#x52A0;() &#x76F4;&#x63A5;&#x7528;&#x540D;&#x5B57;&#x5C31;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x7ED3;&#x679C;&#x7684;&#x53EB;&#x5C5E;&#x6027;&#xFF1B;&#x65B9;&#x6CD5;&#x662F;&#x5BF9;&#x672A;&#x77E5;&#x7684;&#x4E1C;&#x897F;&#x53BB;&#x6267;&#x884C;&#x6C42;&#x7ED3;&#x679C;&#xFF0C;&#x5C5E;&#x6027;&#x662F;&#x5BF9;&#x5DF2;&#x77E5;&#x7684;&#x4E1C;&#x897F;&#x8BFB;&#x53D6;&#x51FA;&#x6765;&#x3002; List&#x4E0E;ArrayList&#x7684;&#x533A;&#x522B; &#x770B;&#x7684;&#x61F5;&#x61F5;&#x61C2;&#x61C2;&#xFF0C;&#x4EE5;&#x540E;&#x660E;&#x767D;&#x4E86;&#x518D;&#x8865;&#x5145;&#x5427;&#x3002;&#x5148;&#x505A;&#x5B8C;&#x4ECA;&#x5929;&#x7684;&#x9898;&#x3002; Ref: List&#x4E0E;ArrayList&#x7684;&#x533A;&#x522B; java&#x4F5C;&#x7528;&#x57DF;public, private, protected &#x53CA;&#x4E0D;&#x5199;&#x65F6;&#x7684;&#x533A;&#x522B; &#x5728;&#x8BF4;&#x660E;&#x8FD9;&#x56DB;&#x4E2A;&#x5173;&#x952E;&#x5B57;&#x4E4B;&#x524D;&#xFF0C;&#x6211;&#x60F3;&#x5C31;class&#x4E4B;&#x95F4;&#x7684;&#x5173;&#x7CFB;&#x505A;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x5B9A;&#x4E49;&#xFF0C;&#x5BF9;&#x4E8E;&#x7EE7;&#x627F;&#x81EA;&#x5DF1;&#x7684;class&#xFF0C;base class&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x4ED6;&#x4EEC;&#x90FD;&#x662F;&#x81EA;&#x5DF1;&#x7684;&#x5B50;&#x5973;&#xFF0C;&#x800C;&#x5BF9;&#x4E8E;&#x548C;&#x81EA;&#x5DF1;&#x4E00;&#x4E2A;&#x76EE;&#x5F55;&#x4E0B;&#x7684;classes&#xFF0C;&#x8BA4;&#x4E3A;&#x90FD;&#x662F;&#x81EA;&#x5DF1;&#x7684;&#x670B;&#x53CB;&#x3002; public&#xFF1A;public&#x8868;&#x660E;&#x8BE5;&#x6570;&#x636E;&#x6210;&#x5458;&#x3001;&#x6210;&#x5458;&#x51FD;&#x6570;&#x662F;&#x5BF9;&#x6240;&#x6709;&#x7528;&#x6237;&#x5F00;&#x653E;&#x7684;&#xFF0C;&#x6240;&#x6709;&#x7528;&#x6237;&#x90FD;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x8FDB;&#x884C;&#x8C03;&#x7528; private&#xFF1A;private&#x8868;&#x793A;&#x79C1;&#x6709;&#xFF0C;&#x79C1;&#x6709;&#x7684;&#x610F;&#x601D;&#x5C31;&#x662F;&#x9664;&#x4E86;class&#x81EA;&#x5DF1;&#x4E4B;&#x5916;&#xFF0C;&#x4EFB;&#x4F55;&#x4EBA;&#x90FD;&#x4E0D;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#xFF0C;&#x79C1;&#x6709;&#x8D22;&#x4EA7;&#x795E;&#x5723;&#x4E0D;&#x53EF;&#x4FB5;&#x72AF;&#x561B;&#xFF0C;&#x5373;&#x4FBF;&#x662F;&#x5B50;&#x5973;&#xFF0C;&#x670B;&#x53CB;&#xFF0C;&#x90FD;&#x4E0D;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x3002; protected&#xFF1A;protected&#x5BF9;&#x4E8E;&#x5B50;&#x5973;&#x3001;&#x670B;&#x53CB;&#x6765;&#x8BF4;&#xFF0C;&#x5C31;&#x662F;public&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x81EA;&#x7531;&#x4F7F;&#x7528;&#xFF0C;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x9650;&#x5236;&#xFF0C;&#x800C;&#x5BF9;&#x4E8E;&#x5176;&#x4ED6;&#x7684;&#x5916;&#x90E8;class&#xFF0C;protected&#x5C31;&#x53D8;&#x6210;private&#x3002; &#x4F5C;&#x7528;&#x57DF; &#x5F53;&#x524D;&#x7C7B; &#x540C;&#x4E00;package &#x5B50;&#x5B59;&#x7C7B; &#x5176;&#x4ED6;package public &#x2714;&#xFE0F; &#x2714;&#xFE0F; &#x2714;&#xFE0F; &#x2714;&#xFE0F; protected &#x2714;&#xFE0F; &#x2714;&#xFE0F; &#x2714;&#xFE0F; &#x2716;&#xFE0F; friendly &#x2714;&#xFE0F; &#x2714;&#xFE0F; &#x2716;&#xFE0F; &#x2716;&#xFE0F; private &#x2714;&#xFE0F; &#x2716;&#xFE0F; &#x2716;&#xFE0F; &#x2716;&#xFE0F; &#x4E0D;&#x5199;&#x65F6;&#x9ED8;&#x8BA4;&#x4E3A;friendly Ref: java&#x4F5C;&#x7528;&#x57DF;public ,private ,protected &#x53CA;&#x4E0D;&#x5199;&#x65F6;&#x7684;&#x533A;&#x522B; LeetCode - 38, 228 (1 Easy, 1 Medium, 0 Hard) 38. Count and Say - Easy 123456789101112131415161718192021222324252627class Solution { public String countAndSay(int n) { String result = &quot;1&quot;; for (int row = 2; row &lt;= n; row++){ // base case StringBuilder sb = new StringBuilder(); int cnt = 1; // general case for(int i=1; i &lt; result.length(); i++){ if(result.charAt(i-1) == result.charAt(i)){ cnt ++; }else{ sb.append(cnt); sb.append(result.charAt(i-1)); cnt=1; } } sb.append(cnt); sb.append(result.charAt(result.length()-1)); result = sb.toString(); } return result; }} 228. Summary Ranges - Medium 123456789101112131415161718192021222324252627282930class Solution { public List&lt;String&gt; summaryRanges(int[] nums) { if(nums.length == 0){ return new ArrayList&lt;&gt;(); } // base case List&lt;String&gt; result = new ArrayList&lt;&gt;(); int start = nums[0]; for(int i=1; i &lt; nums.length; i++){ if(nums[i-1] + 1 &lt; nums[i]){ result.add(group(start, nums[i-1])); start = nums[i]; } } // g -&gt; f result.add(group(start, nums[nums.length - 1])); return result; } private String group (int start, int end){ if (start == end){ return start+&quot;&quot;; // int -&gt; string }else{ return start + &quot;-&gt;&quot; + end; } }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>StringBuilder</tag>
        <tag>String</tag>
        <tag>StringBuffer</tag>
        <tag>线程安全</tag>
        <tag>属性与方法</tag>
        <tag>List和ArrayList</tag>
        <tag>作用域</tag>
        <tag>38</tag>
        <tag>228</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Summary_LeetCode]]></title>
    <url>%2F2019%2F03%2F10%2FSummary-LeetCode%2F</url>
    <content type="text"><![CDATA[35/1003, 36 days (4 Easy, 23 Medium, 8 Hard) 10 of 36 &#x4F11;&#x606F; &#x9E21;&#x6C64;&#xFF1A; &#x6BCF;&#x5929;&#x82B1;&#x8D39;&#x65F6;&#x95F4;&#xFF1A; &#x6728;&#x6709;&#x57FA;&#x7840;&#x600E;&#x4E48;&#x529E;&#xFF1F; &#x70E6;&#x8E81;&#x4E86;&#x600E;&#x4E48;&#x529E;&#xFF1F; &#x1F4AA; Day 1: 26, 27, 80 (2 Easy, 1 Medium, 0 Hard) Day 2: 38, 228 (1 Easy, 1 Medium, 0 Hard) Day 3: 163 (0 Easy, 1 Medium, 0 Hard) Day 4: 151 (0 Easy, 1 Medium, 0 Hard) Day 5: 205, 299 (1 Easy, 1 Medium, 0 Hard) Day 6: 36 (0 Easy, 1 Medium, 0 Hard) Day 7: 554 (0 Easy, 1 Medium, 0 Hard) Day 8: 781 (0 Easy, 1 Medium, 0 Hard) Day 9: 356 (0 Easy, 1 Medium, 0 Hard) Day 10: &#x72B6;&#x6001;&#x4E0D;&#x597D;&#xFF0C;&#x7279;&#x522B;&#x4E4F;&#xFF0C;&#x53EA;&#x590D;&#x4E60;&#x4E86;&#xFF0C;&#x6CA1;&#x505A;&#x65B0;&#x9898; Day 11: 735 (0 Easy, 1 Medium, 0 Hard) Day 12: &#x4F11;&#x606F; Day 13: &#x4F11;&#x606F; Day 14: 636, 71, 385(0 Easy, 3 Medium, 0 Hard) Day 15: 353 (0 Easy, 1 Medium, 0 Hard) Day 16: 239, 729, 295 (0 Easy, 1 Medium, 2 Hard) Day 17: 23, 358 (0 Easy, 0 Medium, 2 Hard) Day 18: &#x590D;&#x4E60; Day 19: &#x4F11;&#x606F; Day 20: &#x590D;&#x4E60; Day 21: &#x4F11;&#x606F; Day 22: &#x4F11;&#x606F; Day 23: &#x590D;&#x4E60; Day 24: 692 (0 Easy, 1 Medium, 0 Hard) Day 25: &#x4F11;&#x606F; Day 26: 56, 179, 853, 253 (0 Easy, 4 Medium, 0 Hard) Day 27: &#x4F11;&#x606F; Day 28: &#x4F11;&#x606F; Day 29: 50 (0 Easy, 1 Medium, 0 Hard) Day 30: 244, 3, 340 (0 Easy, 2 Medium, 1 Hard) Day 31: 76, 632 (0 Easy, 0 Medium, 2 Hard) Day 32: 239 (0 Easy, 0 Medium, 1 Hard) Day 33: &#x590D;&#x4E60; Day 34: &#x4F11;&#x606F; Day 35: &#x4F11;&#x606F; Day 36: &#x590D;&#x4E60; Day 37: &#x4F11;&#x606F; Day 38: &#x4F11;&#x606F; Day 39: &#x590D;&#x4E60;&#x603B;&#x7ED3; Day 40: &#x4F11;&#x606F; Day 41: &#x4F11;&#x606F; Day 42: &#x4F11;&#x606F; Day 43: &#x590D;&#x4E60;&#x603B;&#x7ED3; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12周刷题大作战 - Week 1, Day 1, 3/10/2019]]></title>
    <url>%2F2019%2F03%2F10%2FDay-01%2F</url>
    <content type="text"><![CDATA[&#x4F60;&#x5230;&#x5E95;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x80FD;&#x8F6C;&#x884C;&#x6210;&#x529F;&#xFF1F; LeetCode - 26, 27, 80 (2 Easy, 1 Medium, 0 Hard) 26. Remove Duplicates from Sorted Array - Easy 1234567891011121314151617class Solution { public int removeDuplicates(int[] nums) { if(nums.length == 0){ return 0; } int end = 0; for (int i = 1; i &lt; nums.length; i++){ if (nums[end] != nums[i]){ end ++; nums[end] = nums[i]; } } return end+1; }} 27. Remove Element - Easy 1234567891011121314151617class Solution { public int removeElement(int[] nums, int val) { if(nums.length == 0){ return 0; } int end = 0; //&#x8FD8;&#x53EF;&#x4EE5;&#x5047;&#x60F3;&#x4E00;&#x4E2A;-1&#x4F4D;element&#xFF0C;&#x8FD9;&#x6837;end=-1&#xFF0C;&#x4E0B;&#x9762;&#x5148;end++&#x518D;&#x8D4B;&#x503C; for (int i = 0; i &lt; nums.length; i++){ if(nums[i] != val){ nums[end] = nums[i]; end++; } } return end; }} 80. Remove Duplicates from Sorted Array II - Medium &#x6211;&#x7684; 1234567891011121314151617181920212223242526class Solution { public int removeDuplicates(int[] nums) { if(nums.length == 0){ return 0; } int end = 0; int count = 1; for (int i = 1; i &lt; nums.length; i++){ if (count == 1){ if (nums[i] == nums[end]){ count++; } end++; nums[end] = nums[i]; }else{ if(nums[i] != nums[end]){ end ++; nums[end] = nums[i]; count = 1; } } } return end+1; }} &#x8001;&#x5E08;&#x7684; 12345678910111213141516class Solution { public int removeDuplicates(int[] nums) { if (nums.length &lt;= 2){ return nums.length; } int end = 1; for (int i = 2; i &lt; nums.length; i ++){ if(nums[end-1] != nums[i]){ end ++; nums[end] = nums[i]; } } return end+1; }} &#x660E;&#x5929;&#x5B66;StringBuilder document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>转行</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>27</tag>
        <tag>26</tag>
        <tag>80</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[买房策略]]></title>
    <url>%2F2018%2F09%2F14%2F%E4%B9%B0%E6%88%BF%E7%AD%96%E7%95%A5%2F</url>
    <content type="text"><![CDATA[9/14/2018: &#x5F53;&#x4E0B;&#x7684;&#x7B56;&#x7565;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5E0C;&#x671B;&#x4EE5;&#x540E;&#x53EF;&#x4EE5;&#x8D8A;&#x6765;&#x8D8A;&#x5B8C;&#x5584;&#x3002; list price &gt; budget hot home: don&apos;t need to have a tour not hot home: wait &#x1F44A; list price &lt; budget hot home: hurry not hot home: lowball Updated: &#x6700;&#x540E;&#x4E70;&#x5230;&#x4E86;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#x6709;&#x4E9B;&#x504F;&#x8FDC;&#x4F46;&#x662F;&#x6709;&#x5B66;&#x533A;&#x7684;&#x623F;&#x5B50;&#x3002;&#x56E0;&#x4E3A;&#x623F;&#x4E1C;&#x4E00;&#x76F4;&#x4E0D;&#x613F;&#x610F;&#x964D;&#x4EF7;&#xFF0C;&#x623F;&#x5B50;list&#x4E86;&#x5F88;&#x4E45;&#x6CA1;&#x6709;&#x5356;&#x51FA;&#x53BB;&#x3002;&#x5F53;list price&#x518D;&#x6B21;&#x4E0B;&#x8C03;&#x65F6;&#xFF0C;&#x6211;&#x7ACB;&#x523B;&#x7EA6;&#x4E86;agent&#x53BB;&#x770B;&#xFF0C;&#x5546;&#x91CF;&#x8FC7;&#x540E;&#x51B3;&#x5B9A;&#x4E0B;&#x4E2A;offer&#x3002;&#x51E0;&#x6B21;&#x8BA8;&#x4EF7;&#x8FD8;&#x4EF7;&#x4E4B;&#x540E;&#x62FF;&#x4E0B;&#x4E86;&#x623F;&#x5B50;&#x3002;&#x505A;loan&#x7684;&#x8FC7;&#x7A0B;&#x6BD4;&#x8F83;&#x6076;&#x5FC3;&#xFF0C;&#x5BC4;&#x5E0C;&#x671B;&#x4E8E;&#x4E4B;&#x540E;&#x7684; refinance&#x5427;&#x3002;&#x65E0;&#x8BBA;&#x5982;&#x4F55;&#xFF0C;&#x4E70;&#x5230;&#x4E86;&#x5C31;&#x5F00;&#x5F00;&#x5FC3;&#x5FC3;&#x7684;enjoy&#x5427;&#xFF01; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>House</category>
      </categories>
      <tags>
        <tag>House</tag>
        <tag>Strategy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[My first post]]></title>
    <url>%2F2018%2F09%2F13%2FMy-first-post%2F</url>
    <content type="text"><![CDATA[&#x6700;&#x8FD1;&#x5728;&#x770B;&#x521B;&#x4E16;&#x7EAA;&#xFF0C;&#x5F88;&#x662F;&#x559C;&#x6B22;&#x6587;&#x5F6A;&#xFF0C;&#x4EE5;&#x4ED6;&#x7684;&#x540D;&#x5B57;&#x521B;&#x5EFA;&#x4E2A;blog&#xFF0C;&#x8BB0;&#x5F55;&#x4E00;&#x4E0B;&#x6211;&#x81EA;&#x5DF1;&#x7684;&#x751F;&#x6D3B;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
</search>
